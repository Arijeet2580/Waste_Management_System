/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 06.03.2025 07:54:53

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 8700, -16536, -13547, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00064230879070237279, 0.00033661056659184396, 0.00042245659278705716, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ -1,31,51,-21,-25,39,127,-4,-40,68,48,-31,-25,-26,1,-40,-41,52,32,60,-40,-25,-3,-4,-56,49,-19,2,-35,-6,-11,-15, 
  /* [1][0][][] */ 50,-25,-55,33,-9,119,-127,1,124,-70,1,-61,-52,91,36,-45,93,-33,10,-82,-96,24,112,74,28,36,14,-3,-119,-38,-12,-14, 
  /* [2][0][][] */ -40,56,-52,41,45,-32,-127,85,74,13,90,9,-69,-77,58,83,-58,-36,17,-80,59,87,-29,-70,65,-30,-7,-84,54,-50,63,-8, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0063989618793129921, 0.0033534620888531208, 0.0042086979374289513, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 203, 175, -1149, 174, -206, 469, 2481, -33, 152, 1155, 219, -1023, -1054, -167, -99, -193, -247, -973, -1174, -1229, -887, -185, 335, 132, -224, -1013, -999, -1022, 480, -994, -732, -1030, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.7970115449279547e-05, 4.758822251460515e-05, 4.8886551667237654e-05, 5.4465428547700867e-05, 5.2841369324596599e-05, 4.9508962547406554e-05, 0.00013850313553120941, 4.7863111831247807e-05, 5.4300424380926415e-05, 7.062767690513283e-05, 4.666936001740396e-05, 4.4677057303488255e-05, 4.9294205382466316e-05, 5.0943515816470608e-05, 5.5296724895015359e-05, 5.9294448874425143e-05, 5.3310428484110162e-05, 4.9507696530781686e-05, 4.707770494860597e-05, 4.8031681217253208e-05, 4.3965585064142942e-05, 5.3352618124336004e-05, 7.1067275712266564e-05, 5.8594803704181686e-05, 4.6273638872662559e-05, 4.6528875827789307e-05, 4.6707278670510277e-05, 4.7658901166869327e-05, 8.6295032815542072e-05, 4.8710389819461852e-05, 4.4120210077380762e-05, 4.8663769121048972e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -24,-36,58,-13,80,-5,-52,-94,24,-67,-90,-40,44,10,-22,58,-46,-26,-57,-49,-60,-76,-12,99,-33,22,73,-32,94,7,-18,-73,61,-38,-68,63,-113,-85,-71,4,29,-60,-68,72,42,-98,74,-10,1,-51,-12,63,-70,-47,-45,92,9,47,87,-127,-73,54,-41,21,2,22,64,80,23,27,58,-112,81,-105,31,55,-55,-15,-53,26,33,45,40,-14,-34,-31,-78,80,21,74,4,-88,20,37,9,-10, 
  /* [1][0][][] */ -57,51,-61,-5,-31,52,36,27,74,-88,-88,89,56,-28,41,67,104,-43,53,87,-42,7,35,-8,1,12,-56,109,28,23,75,-52,43,93,2,23,50,29,-4,-63,-48,-30,-24,-86,-68,43,-25,-68,-42,-46,86,82,16,73,-115,-50,44,94,43,125,-38,94,-61,-65,-67,35,50,30,127,54,9,18,-112,41,-42,41,78,-44,-26,54,-70,60,-50,-117,29,80,-55,-93,83,96,53,1,69,83,17,-44, 
  /* [2][0][][] */ 16,8,-80,54,-46,-77,50,55,-114,50,-57,78,51,-41,46,-122,-76,-50,3,19,-113,-39,70,-10,-43,43,65,-19,-87,44,46,58,-90,-44,-111,-120,-104,55,66,-51,-127,-91,-15,-32,-101,81,-47,-92,65,7,55,-101,-68,31,-4,-12,-84,56,-84,-19,-42,25,-58,34,54,14,17,51,-109,32,-20,-92,1,-91,1,-2,-73,-48,-23,-19,4,-106,-39,-61,-25,-110,-45,-52,50,75,-47,-22,-65,-95,-67,-84, 
  /* [3][0][][] */ 54,1,27,-51,-57,13,-76,48,54,-4,51,-1,82,71,85,3,70,80,-45,26,97,-47,-40,-109,-43,-99,-80,98,40,-58,47,-2,-39,-26,1,-12,-35,-34,63,37,-30,-73,-102,25,52,14,-27,-78,24,-41,18,15,88,44,29,-83,-96,-86,-91,-22,-57,41,-1,75,24,-23,-61,-29,-4,-72,6,95,30,-105,56,-36,23,75,97,-44,-69,-127,18,90,46,34,-31,-124,-50,61,-19,-97,71,-75,-76,-2, 
  /* [4][0][][] */ 38,104,-10,20,-5,-27,40,53,59,67,4,56,25,-32,8,-42,-10,7,-20,17,86,-58,79,20,-16,-9,38,-32,-34,43,-79,-29,54,91,16,-71,-7,-30,-51,51,-20,-54,-89,-59,24,87,35,45,3,-2,-7,11,-65,41,-127,8,60,-66,30,65,27,-59,-19,-49,-44,47,-11,-33,46,-82,-81,-58,-48,-3,88,35,60,9,9,-42,6,-39,-104,-7,14,41,74,-21,-78,18,8,30,11,88,-65,-60, 
  /* [5][0][][] */ 88,-96,49,28,48,-90,44,40,108,-100,12,-63,44,76,53,26,54,80,-86,102,36,38,18,4,-127,-39,-5,-70,24,22,6,-72,-2,22,-52,41,-88,-44,47,31,-78,-29,26,112,-6,2,39,-35,-92,58,41,18,33,43,32,-4,90,62,-45,-50,40,-30,53,-58,-28,102,-12,47,58,-56,109,-52,-20,47,-18,-56,27,-60,10,78,92,43,-26,101,-50,83,-2,35,40,-117,111,89,-9,12,88,-96, 
  /* [6][0][][] */ 19,-41,80,125,-10,-36,21,42,-12,-13,3,10,17,49,43,20,-3,-37,80,56,-16,-28,30,-8,63,-3,-3,-39,3,-43,74,-24,-37,-38,-23,-6,-17,93,-12,-23,15,80,80,-5,-47,101,-11,35,-48,122,34,-37,56,-30,119,25,5,-23,19,19,-44,1,14,8,47,7,112,22,46,24,-29,6,18,57,-9,19,-27,-34,-33,-2,59,44,89,46,-9,59,-20,-1,51,65,97,9,39,-3,46,127, 
  /* [7][0][][] */ 100,81,-42,-75,-52,91,-9,15,121,4,-79,6,58,-90,68,70,58,30,10,107,55,47,6,72,-102,87,26,70,-61,116,-44,44,26,27,73,96,-64,32,9,-15,95,-93,60,81,39,-9,97,-116,31,-32,-110,-16,-21,92,-38,23,123,-67,6,1,32,0,89,-100,-79,-40,41,19,-73,20,62,92,79,-28,60,49,-44,73,-68,41,80,-49,-45,-69,92,17,-93,56,82,36,46,48,-61,-34,9,-127, 
  /* [8][0][][] */ 9,28,-49,-116,62,24,-42,-11,37,23,46,72,23,-49,-37,-57,-44,107,-53,31,36,-8,72,108,-123,76,35,77,-58,26,-85,107,96,-11,49,17,119,-28,4,73,70,83,-100,-65,9,-33,-7,83,7,-85,-43,36,-50,19,-51,-81,44,106,-72,116,112,55,60,88,-33,-22,-23,90,-56,14,41,13,76,19,15,18,-19,92,79,67,27,62,-127,-61,44,38,61,-48,25,-24,-78,86,-66,-81,-13,2, 
  /* [9][0][][] */ 2,-2,90,83,56,-75,-21,-44,41,34,7,49,-26,-37,-60,-3,11,-14,-43,-38,16,51,-72,-98,58,9,-30,-7,-7,-69,-22,78,29,-2,9,-8,-57,29,1,-73,58,-14,61,-63,35,48,-49,21,2,18,-37,-14,100,-78,-31,75,70,-44,9,20,-70,64,54,-16,-21,0,82,42,4,108,73,-21,4,61,-70,-15,-63,-73,-44,31,44,15,127,35,-37,-77,56,0,68,75,-7,69,69,12,70,21, 
  /* [10][0][][] */ -59,90,72,-91,-5,82,110,41,52,33,33,-71,100,67,0,9,-23,88,-78,-57,-8,39,60,-79,-22,52,-127,-89,-37,89,-105,-62,84,99,124,77,-16,-32,-18,31,-22,83,-112,-21,-104,-70,4,-86,-26,22,23,48,57,31,-97,-33,-72,-2,30,19,19,75,117,41,89,-61,-116,-21,50,-19,-76,-46,81,11,-73,96,-1,61,77,13,69,-12,29,94,-77,45,102,-70,37,25,-41,-80,-57,-43,-28,-122, 
  /* [11][0][][] */ 81,-9,-38,75,91,20,28,12,86,66,-100,87,-31,-105,7,-86,-76,-118,35,17,10,50,1,-127,-110,-116,-37,46,53,-32,3,-44,-108,-94,28,20,-81,48,-49,-78,-48,80,-94,-19,-62,-48,-102,-104,58,76,86,27,-108,-108,-7,2,-90,-78,-44,-107,-97,61,56,-14,7,60,-78,3,59,32,-101,-89,16,83,-121,24,-85,12,-65,65,-126,-48,-44,-62,24,-93,-10,-41,-108,-25,-14,-120,-108,-49,-86,-61, 
  /* [12][0][][] */ -11,36,-68,-24,51,-16,-56,7,-91,28,-37,-9,-63,-14,19,-91,-109,-52,-67,-95,-1,-33,-11,60,-84,-67,65,-110,57,-11,-55,77,-101,-84,-64,-11,-28,-92,-39,14,77,9,-116,-59,-42,-92,-56,80,-58,-127,-91,66,7,-22,-96,50,-40,-75,18,35,27,76,-29,22,74,6,-61,79,27,62,10,38,48,75,-38,-29,-56,9,-124,-107,-75,66,18,-14,-57,5,21,79,-107,-120,56,14,66,-36,-2,39, 
  /* [13][0][][] */ 77,-99,64,43,93,108,80,26,35,-91,7,-31,79,41,47,-61,-121,-39,-74,37,40,-41,93,-2,-83,37,25,13,-111,-90,78,23,53,87,-30,31,-70,-58,2,75,-70,93,-59,36,-6,-28,-17,-43,28,56,-6,-111,-82,43,99,-70,-75,36,-22,-122,-16,127,-61,13,-39,-51,-74,67,-70,-50,72,-5,-72,8,-74,-34,-90,39,54,-57,43,-84,39,21,-76,-80,71,119,-49,-87,-64,64,95,-76,63,-25, 
  /* [14][0][][] */ -65,-87,55,28,58,-26,-4,-83,-73,-26,47,58,-24,-74,-73,-70,-45,-39,-29,17,-61,31,-3,15,-127,-41,-26,20,-121,-80,-72,36,87,-19,-31,12,104,68,44,-94,8,-107,21,84,45,-116,37,-80,70,1,60,59,72,15,-30,-4,-14,5,46,88,-16,-54,30,61,-80,-20,42,-89,-75,-87,-62,75,27,29,51,-69,31,-99,41,35,19,-26,-100,-25,-56,-91,-71,46,88,22,49,-59,57,72,-1,18, 
  /* [15][0][][] */ 12,6,-19,48,76,-70,50,-48,43,5,-47,-4,76,-1,-50,-72,77,9,-47,14,34,28,60,67,50,47,20,83,33,61,38,-64,-11,5,-36,-3,-29,51,94,-41,26,59,-37,-10,1,-51,-26,-73,-17,-30,-11,56,-67,-74,-68,-10,69,46,-39,127,-16,-53,6,81,-35,76,-68,-3,-17,36,34,-41,10,-48,48,-80,4,52,92,53,-58,38,-81,-50,-83,-45,-64,3,81,75,-113,-38,37,86,-80,39, 
  /* [16][0][][] */ -60,-30,54,-95,44,106,-32,11,47,32,-89,50,-2,-51,-42,-67,78,89,28,72,88,50,-30,80,-38,43,-43,43,-115,-5,24,6,-59,65,36,54,-20,30,-46,-48,8,-14,49,98,82,55,77,-4,-38,-127,27,71,-43,119,65,39,-1,78,58,-31,93,115,34,48,45,9,-23,82,3,25,-18,-10,34,70,45,73,-4,68,-98,-3,-1,-62,-1,19,17,95,71,18,37,-15,-2,107,54,-33,-50,8, 
  /* [17][0][][] */ 9,-119,7,51,-52,-124,-77,-107,13,-93,49,27,59,29,-119,23,11,20,79,77,-101,-34,-14,-68,15,39,-86,-16,74,-70,-41,47,-55,-46,2,-13,-74,66,-99,-52,-99,-48,-21,-39,-16,-4,46,-118,58,78,-21,34,-33,39,70,-88,-121,52,-93,-119,1,-106,36,67,-86,-89,22,-114,-115,-22,66,4,-17,-116,-87,38,78,-61,9,-86,-10,-31,-76,-93,-127,43,44,-43,-7,61,-108,-124,-30,69,-4,-4, 
  /* [18][0][][] */ -92,85,92,-80,-34,-109,-115,-19,-20,60,-108,-40,-46,19,43,-45,15,-56,36,-54,57,-48,-7,-95,19,-107,-38,96,20,22,-8,38,4,-35,-116,-108,-58,22,-34,43,-71,13,-64,-27,-127,17,21,1,3,-19,43,32,-120,-23,-13,60,-44,10,-41,-97,59,76,0,19,-80,-123,-43,78,60,-95,-84,74,-100,-45,-82,-119,41,26,-15,-77,-76,-18,-22,-61,94,-50,46,54,-116,-88,-66,77,58,-60,28,-41, 
  /* [19][0][][] */ 0,0,42,11,26,-90,66,60,58,-75,2,-26,-107,6,-71,34,46,-113,72,26,-46,51,-77,-11,57,-94,5,-85,-104,-127,-78,25,46,-94,5,-25,-19,-87,-72,-107,21,-119,-95,-14,-97,9,47,-104,-29,15,-57,23,-57,-8,-9,-29,-2,68,-32,-43,27,-68,68,33,-88,-24,-44,-21,-27,26,40,-69,-78,-127,-73,-95,-44,-123,-13,68,26,-118,-46,51,-97,-31,-17,-25,51,2,-27,34,-49,82,39,-67, 
  /* [20][0][][] */ -33,62,75,73,-105,56,-8,55,-1,-15,-88,-13,-24,63,23,-69,-77,-73,-79,-58,22,-49,-78,-81,103,-118,-125,38,33,15,-60,72,56,15,-16,25,3,-39,-21,-127,-109,-50,-91,-120,-69,-87,-101,86,29,-127,-126,39,31,73,23,-20,59,49,73,87,102,-91,-96,-64,-50,-78,-58,-20,-80,-92,-88,60,-97,-103,24,3,87,36,117,100,81,-35,84,-56,41,90,-24,78,25,99,11,48,-1,2,-28,-18, 
  /* [21][0][][] */ 60,58,47,-127,85,-92,65,26,-10,-71,-65,31,-1,11,-23,-70,-89,-21,-3,1,79,-38,66,-77,22,-90,-27,66,10,20,-26,-28,0,6,-68,-102,117,38,-74,-21,-8,-9,16,5,-81,-80,-94,52,-23,-57,-16,88,30,70,-101,18,-54,48,-40,123,64,-54,32,-5,47,20,-49,-74,-73,-21,39,69,29,-66,62,47,-85,-3,62,84,4,47,-9,-55,28,-81,55,-96,-87,82,48,-110,-47,-75,72,-81, 
  /* [22][0][][] */ 15,-45,-50,-96,66,-25,82,23,-44,21,-34,-65,83,-78,-59,-52,26,67,-127,-24,59,-54,24,43,42,-5,-59,68,-47,-50,-24,-58,46,48,14,13,8,-20,-20,-59,-7,26,1,77,51,-68,57,2,-46,-103,30,-9,-31,-37,-24,29,-30,-6,-7,-27,74,-26,-35,-59,-30,21,-60,-14,62,20,-8,7,-27,-2,45,-47,41,-50,41,64,68,-54,-69,-66,68,63,62,-21,-45,17,-29,50,0,-2,13,41, 
  /* [23][0][][] */ 29,-92,13,25,37,-70,9,-103,46,-113,51,44,15,-90,-13,-26,57,-34,-119,62,42,-70,76,-24,-16,-36,68,-2,15,15,48,-43,-33,33,1,-13,40,-19,-97,-39,-87,12,-7,-73,-31,-76,91,14,60,-127,-78,-32,49,-39,-51,72,-106,-35,71,5,-103,-52,-47,-10,1,22,-108,-67,13,-48,101,-81,11,-40,-21,-76,42,-46,48,96,-51,-19,-8,-93,90,22,92,-45,-83,7,97,5,51,-46,-44,31, 
  /* [24][0][][] */ -81,-28,-112,-121,-58,-115,-46,-62,85,100,89,32,117,40,-7,-103,-63,68,38,-34,94,-59,-39,-22,18,-33,57,74,96,69,-25,-44,6,12,53,47,-7,-127,96,-3,-46,-99,83,33,26,-45,48,54,-96,-25,-15,96,69,75,-4,-83,29,90,33,73,113,5,65,90,-110,99,-65,-82,-75,31,-50,-7,-27,-10,98,89,74,-40,-73,-70,-76,-99,-104,-94,24,50,-13,-123,39,-44,-32,-73,-29,37,-59,-36, 
  /* [25][0][][] */ -98,-74,-96,-33,61,-88,-124,34,32,-127,-56,4,41,-22,-123,-44,-88,33,21,-125,48,60,-38,-80,12,-73,-118,11,49,-107,18,83,58,-127,16,44,61,-62,-40,-42,-95,62,-107,-25,63,20,44,14,-113,70,-79,-17,19,-43,-71,-15,-28,23,-99,47,87,11,32,13,-22,46,-35,-31,-107,-24,-31,-125,2,-87,40,-2,43,60,-8,-6,20,32,-51,71,-96,-57,-119,-103,-53,-22,78,-8,-127,-31,-17,-76, 
  /* [26][0][][] */ 36,-127,-36,-35,-111,-24,-32,-28,-108,-124,78,62,-87,-57,-3,-31,87,9,-102,-82,-5,55,69,-4,11,41,-5,24,-5,-10,-106,-20,-43,-73,-107,-110,-77,49,-64,84,-113,69,16,12,-86,47,-53,76,-35,4,-26,70,-11,-60,-25,-113,68,41,25,5,-16,-103,42,-42,84,-36,-66,36,-96,49,64,68,58,-119,-96,-13,24,-114,-106,-6,-46,51,47,-96,57,-21,-64,-2,-98,81,-7,-1,-64,95,20,48, 
  /* [27][0][][] */ -12,-12,-75,-113,-127,-72,-78,-28,29,68,15,-111,-47,29,51,-41,39,-33,36,-89,-104,-11,-39,-45,-112,20,-115,-23,36,5,-47,-28,33,40,-104,-97,-96,-71,-113,62,-92,-2,11,-2,75,8,40,79,65,39,35,-65,-93,-92,-20,-53,73,-42,-93,-89,-65,-71,-47,31,18,-62,-118,73,23,-8,-123,-10,32,-59,-24,-93,21,-70,63,71,54,-43,94,-43,-88,-90,-46,15,-64,20,-52,-66,31,-5,70,37, 
  /* [28][0][][] */ 78,22,-7,33,-13,-38,-35,-36,30,-27,60,3,-31,-26,30,42,57,76,-3,14,12,25,-86,-9,-66,65,-43,-39,-62,-127,23,12,-41,24,21,64,-35,-59,-38,-57,95,32,-48,-5,-70,-10,69,27,-21,15,9,35,-41,-14,-6,15,70,-22,39,73,-48,-59,-79,9,64,50,2,68,-35,-3,-18,-15,31,18,-18,-40,-37,-79,-95,16,-49,-23,71,1,44,-54,52,-104,-56,-39,4,-20,-18,71,15,-48, 
  /* [29][0][][] */ 34,25,33,-63,-98,-11,-127,-13,73,-30,-98,-97,74,-108,-59,-60,-107,68,15,-79,-84,-45,26,-16,-52,-14,-57,-48,-109,-26,75,-23,25,-19,-90,-67,-33,75,-27,63,25,72,-54,50,-21,77,-53,-41,-2,-11,35,-105,43,-108,85,25,-100,28,-63,76,-124,63,-107,-66,-72,-76,28,57,64,-90,16,-83,77,55,32,0,78,-72,-47,8,-25,-87,-21,-83,36,83,20,50,-53,68,43,52,-103,1,-18,46, 
  /* [30][0][][] */ 6,-63,-76,12,-100,16,-67,-15,99,-26,-5,-49,-114,0,37,0,-20,32,79,-114,21,-104,-111,2,-109,10,-78,113,-22,-105,-94,-9,-95,-83,-127,-64,15,-35,-8,24,85,-77,-16,92,85,-58,87,52,-68,49,15,-101,88,-50,-24,81,-82,-62,-79,-58,-104,-15,-74,-30,-112,-91,-108,69,-75,87,24,-44,-97,93,33,-94,-62,-70,-76,-64,16,2,-106,-23,-109,18,-107,93,-39,-113,54,41,-50,-16,6,-84, 
  /* [31][0][][] */ 55,-105,15,72,24,32,-75,-104,-49,-36,-90,-91,67,-126,-59,77,-77,-102,20,22,37,19,-49,73,15,-120,15,12,-84,-85,26,74,-4,-3,-101,-29,65,-39,-75,-119,34,-83,-46,7,-18,-66,-50,1,40,10,65,-50,-120,-72,-86,4,-124,39,-14,80,-57,-22,52,-84,43,78,-55,-91,45,-127,-126,-9,-107,-47,-18,-16,-75,-58,23,55,-87,-55,36,47,26,64,-102,-2,-2,-60,-96,-68,-5,74,-21,-34, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0024637298192828894, 0.0020224994514137506, 0.0020776784513145685, 0.002314780605956912, 0.002245758194476366, 0.002104130806401372, 0.0058863833546638489, 0.0020341821946203709, 0.0023077679798007011, 0.0030016761738806963, 0.0019834476988762617, 0.0018987748771905899, 0.0020950036123394966, 0.0021650993730872869, 0.0023501107934862375, 0.0025200140662491322, 0.0022656931541860104, 0.0021040770225226879, 0.0020008024293929338, 0.0020413463935256004, 0.0018685373943299055, 0.0022674861829727888, 0.0030203592032194138, 0.0024902790319174528, 0.0019666296429932117, 0.0019774772226810455, 0.0019850593525916338, 0.0020255031995475292, 0.0036675387527793646, 0.0020701915491372347, 0.0018751089228317142, 0.0020682101603597403, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 655, -249, 3039, 6627, 3077, -3148, 2654, -1616, -1850, -1155, 4581, -2971, 4122, 4852, 1273, 2117, -472, -344, -1419, 5001, 1401, -1297, 2506, -857, -447, 2510, 497, 2325, 3794, 1469, 6015, 607, 1727, 4251, 4660, 3143, -966, 4331, 1556, -6137, -339, 2396, 1008, 1565, -1728, 845, -1188, 825, -8980, 3068, 1471, -3129, 8624, -1323, 3525, 1297, 759, 2719, -1114, -1957, 242, 1127, 93, 3124, 6847, 3945, 4151, 5247, 3190, -1070, 2385, 4782, 2718, -1897, 4697, 6343, -140, -3755, 460, 1121, 11984, 2828, 202, -2031, 183, 675, 1160, -2972, 4775, -437, 4535, 836, -270, -3134, -329, 3220, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00012581892951857299, 0.00029549264581874013, 0.00020261130703147501, 0.00014556838141288608, 0.00018501392332836986, 0.00016548001440241933, 0.00019024865468963981, 0.00019356219854671508, 0.00022574092145077884, 0.00024003026192076504, 0.00013926748943049461, 0.00018518512661103159, 0.00012978163431398571, 0.00011191525845788419, 0.00021083791216369718, 0.00022415521380025893, 0.00033632217673584819, 0.00019984440586995333, 0.00015029605128802359, 0.00012425173190422356, 0.00026717715081758797, 0.00015591511328238994, 0.00012922815221827477, 0.00017437872884329408, 0.00023098448582459241, 0.00021837926760781556, 0.00021632690913975239, 0.00013782840687781572, 0.0001823131024139002, 0.00021007763280067593, 0.00010032085992861539, 0.00022111753060016781, 0.00015047959459479898, 0.0001373861450701952, 0.00013143294199835509, 0.00013192511687520891, 0.00016462849453091621, 0.00013610327732749283, 0.00016702267748769373, 8.7489614088553935e-05, 0.00024063940509222448, 0.0001355094718746841, 0.00022681563859805465, 0.00013705456512980163, 0.00017028029833454639, 0.00011295356671325862, 0.00019485717348288745, 0.00018398287647869438, 8.7248139607254416e-05, 0.00015890420763753355, 0.0001581837423145771, 0.00018482776067685336, 9.4561932201031595e-05, 0.00016638319357298315, 0.00017095101065933704, 0.00018860420095734298, 0.00018463618471287191, 0.00012115807476220652, 0.0001839999167714268, 0.00018086968339048326, 0.00017912355542648584, 0.00013616598153021187, 0.00029201246798038483, 0.00017148100596386939, 0.00010377082071499899, 9.8557538876775652e-05, 0.00013446077355183661, 0.00012060438166372478, 0.00020368199329823256, 0.00017568359908182174, 0.00017145623860415071, 0.00013265489542391151, 0.0001434248115401715, 0.00012777109805028886, 0.00013271346688270569, 0.00011634994007181376, 0.00020378184854052961, 0.00017036229837685823, 0.00017433232278563082, 0.00016861189214978367, 7.3657538450788707e-05, 0.00014423464017454535, 0.00020265701459720731, 0.00019550556316971779, 0.00026320488541387022, 0.00020351364219095558, 0.00018578521849121898, 0.00015978915325831622, 0.0001333607651758939, 0.00019999577489215881, 0.00014015127089805901, 0.00021900421415921301, 0.00016661600966472179, 0.00013729830970987678, 0.00019171828171238303, 0.00013176884385757148, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -10,102,-113,86,113,-54,95,87,-22,23,19,-97,95,127,-43,23, 
  /* [1][0][][] */ -10,15,-64,-3,-22,40,18,-127,17,-29,-11,-68,-28,-25,-56,-19, 
  /* [2][0][][] */ -10,-13,27,49,32,39,-81,127,-11,1,43,-30,-26,-44,-11,49, 
  /* [3][0][][] */ 112,-40,82,13,-15,-16,-54,127,-5,39,23,16,-16,65,42,-27, 
  /* [4][0][][] */ -45,-10,-16,49,-56,-1,-24,-111,26,6,20,6,46,54,127,94, 
  /* [5][0][][] */ 84,15,-32,4,-107,30,38,76,-1,-16,76,125,127,30,-86,5, 
  /* [6][0][][] */ 2,-21,-76,-22,-35,-1,-25,-26,-41,-23,-46,60,121,21,127,-22, 
  /* [7][0][][] */ -37,47,-34,-67,13,-66,-93,27,-87,69,-77,-69,-127,-31,46,82, 
  /* [8][0][][] */ 49,49,42,19,32,30,72,1,58,-8,39,-23,-127,-2,-57,-5, 
  /* [9][0][][] */ -4,66,15,-23,-21,-6,35,-6,-29,37,-17,-1,7,127,21,11, 
  /* [10][0][][] */ 89,49,-59,20,-30,1,65,-33,-60,-20,-82,-88,-127,-60,33,109, 
  /* [11][0][][] */ 50,9,67,-2,7,-31,-2,127,-79,37,-43,6,-20,-20,61,106, 
  /* [12][0][][] */ -55,-28,6,-25,4,8,127,17,-62,10,5,15,-19,55,-46,96, 
  /* [13][0][][] */ 20,81,-19,75,28,16,26,113,-40,127,-68,-17,65,80,-37,-76, 
  /* [14][0][][] */ -104,127,29,-3,12,-1,26,35,-29,54,78,-17,-72,18,2,26, 
  /* [15][0][][] */ 6,0,-127,-34,60,-24,-77,-42,-16,-3,16,-50,-10,-40,-28,38, 
  /* [16][0][][] */ 127,1,-17,-4,42,-13,23,-19,-16,19,112,22,29,5,-23,-1, 
  /* [17][0][][] */ 0,-3,-9,-82,-13,-34,127,-101,9,-29,-26,42,15,50,3,74, 
  /* [18][0][][] */ 41,127,-5,-51,57,-87,-57,-86,-26,97,-25,-5,-20,39,16,-51, 
  /* [19][0][][] */ -67,-100,86,-112,40,-89,39,-26,53,44,74,127,18,-12,86,-16, 
  /* [20][0][][] */ -17,68,35,-5,10,-5,21,-17,53,-4,91,-11,-127,-20,-54,-1, 
  /* [21][0][][] */ -69,49,46,20,23,13,77,34,-127,84,-49,-50,-24,48,-49,-85, 
  /* [22][0][][] */ 11,-77,48,-3,20,-127,103,1,27,-47,-48,-65,47,-121,-42,-42, 
  /* [23][0][][] */ -67,-111,28,73,31,-18,36,-67,25,-54,103,22,16,82,86,127, 
  /* [24][0][][] */ -20,-21,22,49,43,25,-66,-127,82,18,-19,7,11,-29,-61,-62, 
  /* [25][0][][] */ 1,23,7,-46,-41,3,43,-51,-15,34,-8,5,8,127,23,23, 
  /* [26][0][][] */ -64,77,-4,47,42,-95,-7,-16,30,44,30,95,7,31,-66,127, 
  /* [27][0][][] */ -23,-127,-36,-16,-74,87,19,-81,-1,-50,49,-14,16,-62,-103,-7, 
  /* [28][0][][] */ -29,4,30,86,19,-17,-53,-127,-106,46,95,-65,52,-10,-44,-69, 
  /* [29][0][][] */ -127,81,-15,-23,-25,6,-104,-64,-50,-26,-1,-15,2,-58,-101,25, 
  /* [30][0][][] */ 66,97,-45,108,-86,-116,-107,29,-31,19,-17,-117,127,23,13,87, 
  /* [31][0][][] */ 127,44,-33,-15,-55,11,81,46,-32,12,42,19,21,40,-3,-1, 
  /* [32][0][][] */ -34,-32,127,-18,-43,75,97,-1,-35,-27,-14,39,0,58,45,49, 
  /* [33][0][][] */ -6,2,-54,-58,-36,17,127,-5,-16,-28,24,-26,65,79,-50,68, 
  /* [34][0][][] */ -73,-33,71,-4,8,-43,115,-36,-127,18,44,-35,24,40,-62,-22, 
  /* [35][0][][] */ -3,-3,-82,12,-84,124,-22,-67,-16,127,6,116,-74,69,48,47, 
  /* [36][0][][] */ -14,-60,127,-49,-68,15,-45,-16,-8,33,-77,79,15,-97,-45,44, 
  /* [37][0][][] */ 13,-4,93,-39,86,-72,-1,81,-66,112,-40,65,-127,-37,96,-37, 
  /* [38][0][][] */ 34,49,12,-57,-37,-31,-127,44,-72,61,-76,-43,-36,-73,-79,32, 
  /* [39][0][][] */ -121,-1,-62,-34,-118,-101,110,0,-113,-78,56,127,44,1,12,68, 
  /* [40][0][][] */ 127,36,-14,-58,-33,39,-5,-21,27,-1,-11,-86,-17,77,37,13, 
  /* [41][0][][] */ 91,-60,-81,-65,-17,3,-88,-32,81,-12,18,-51,127,-102,100,-16, 
  /* [42][0][][] */ 36,-49,-43,127,-3,-84,-116,23,-5,22,0,42,-77,58,-39,-4, 
  /* [43][0][][] */ -94,-42,-34,-127,-31,-6,6,86,54,-121,-40,52,-10,-40,-9,115, 
  /* [44][0][][] */ -33,11,28,-47,-33,-11,42,108,94,-81,76,127,104,54,-4,29, 
  /* [45][0][][] */ 82,93,-50,113,112,-122,-90,-51,127,-34,46,-89,-16,5,-17,38, 
  /* [46][0][][] */ -42,-55,-12,10,120,12,64,-10,-12,113,-9,-127,24,96,-78,100, 
  /* [47][0][][] */ 54,-27,-28,-17,59,-15,-47,-48,0,127,-33,8,5,-85,-48,-21, 
  /* [48][0][][] */ 18,45,-8,-127,15,-46,118,-91,-17,-4,-37,45,27,76,6,28, 
  /* [49][0][][] */ -34,127,-55,6,31,-39,41,63,-13,25,15,-58,-4,57,115,-91, 
  /* [50][0][][] */ 17,60,-24,19,-127,-19,-99,-59,62,83,29,42,-41,-59,20,24, 
  /* [51][0][][] */ 127,-39,-57,3,-54,86,-61,-49,52,-24,-34,68,-43,-53,3,58, 
  /* [52][0][][] */ -5,-6,47,49,-42,-70,-127,23,-31,-13,-48,-55,18,-34,17,30, 
  /* [53][0][][] */ 12,74,57,-127,-5,93,82,-30,-33,-30,-9,-28,55,-113,-11,50, 
  /* [54][0][][] */ -18,124,3,6,13,-31,-75,71,-21,12,-48,127,100,112,-12,27, 
  /* [55][0][][] */ 9,49,54,61,32,-56,77,127,-37,14,3,-29,123,80,26,-25, 
  /* [56][0][][] */ 127,9,-13,23,-44,114,-28,-65,6,32,-60,0,-76,108,-4,48, 
  /* [57][0][][] */ -53,-61,-55,-43,-73,-93,91,-51,-127,-44,49,98,17,37,-1,96, 
  /* [58][0][][] */ 68,-16,35,60,20,-53,-35,29,53,23,-127,-45,18,-10,-22,23, 
  /* [59][0][][] */ 79,20,-115,89,20,43,82,-23,-17,-23,18,-98,-127,-32,32,61, 
  /* [60][0][][] */ -20,7,-12,-7,-27,-12,9,-2,-40,-101,66,127,-44,-121,-51,27, 
  /* [61][0][][] */ -20,24,87,-86,-54,58,2,127,-1,-97,75,71,76,32,34,122, 
  /* [62][0][][] */ 60,30,4,-127,-27,-2,4,-27,-5,22,-30,55,18,-22,-64,-54, 
  /* [63][0][][] */ -2,-18,-4,-17,-44,-71,-73,9,-62,2,-60,5,127,-3,51,-19, 
  /* [64][0][][] */ 50,22,-12,69,-61,-55,-46,-38,66,127,22,13,29,-32,-9,81, 
  /* [65][0][][] */ -20,8,-30,-22,-74,97,38,-52,80,-127,120,-64,51,92,-101,58, 
  /* [66][0][][] */ -105,93,-95,-107,54,-37,-126,-54,-90,127,99,22,-105,-82,40,43, 
  /* [67][0][][] */ 10,-24,-127,-126,84,98,7,-13,-13,8,43,-7,18,61,42,50, 
  /* [68][0][][] */ 64,42,-24,-22,-35,31,-3,55,-39,77,127,5,-8,-24,-72,0, 
  /* [69][0][][] */ 98,-66,58,-46,23,-127,-51,105,33,71,80,70,-53,63,4,-27, 
  /* [70][0][][] */ 24,-11,78,23,127,-3,106,25,43,6,-32,61,-31,77,-65,62, 
  /* [71][0][][] */ -4,23,99,-72,-127,-71,8,13,-37,-9,10,-81,-59,-25,-3,15, 
  /* [72][0][][] */ -84,-76,32,-127,76,-13,2,41,-55,33,-112,-22,24,117,-57,73, 
  /* [73][0][][] */ 21,32,45,-2,122,-81,-47,-7,-24,89,-92,22,-72,-51,127,-20, 
  /* [74][0][][] */ -127,1,-107,-79,66,-44,-48,15,-95,14,-119,-29,-34,-83,-52,57, 
  /* [75][0][][] */ 80,-31,48,-50,-12,-5,-127,-45,-10,-92,68,15,-9,-42,-12,-13, 
  /* [76][0][][] */ 43,0,-72,127,58,82,49,-43,71,-69,58,33,7,-43,-54,-17, 
  /* [77][0][][] */ -63,-45,127,-24,-2,-37,-22,-104,-2,37,15,95,70,45,24,21, 
  /* [78][0][][] */ -57,-2,20,-51,-19,-42,36,-18,-4,-26,4,-68,-71,-81,-127,-35, 
  /* [79][0][][] */ -125,-66,-15,-13,127,27,-2,24,-5,14,-28,51,-19,-72,-92,-14, 
  /* [80][0][][] */ -11,-127,16,120,-46,-29,-96,87,3,17,79,47,-75,-26,10,104, 
  /* [81][0][][] */ 120,83,-28,55,8,40,41,127,16,-11,112,42,76,39,39,-30, 
  /* [82][0][][] */ -37,-6,-8,-22,61,-125,-98,-94,49,58,-15,-3,-21,127,-68,-22, 
  /* [83][0][][] */ 109,-17,75,-39,-17,-10,-127,21,28,-87,15,-19,-19,-5,41,-20, 
  /* [84][0][][] */ 35,-42,-63,33,127,7,29,41,-51,28,-84,-11,24,-31,-36,24, 
  /* [85][0][][] */ 5,69,37,-72,89,-9,28,-76,127,-32,13,-33,82,-81,38,-2, 
  /* [86][0][][] */ 127,-28,81,41,24,-54,54,33,-38,-53,-89,-40,35,11,-28,24, 
  /* [87][0][][] */ 12,13,28,-100,107,9,-51,30,40,-72,86,-55,-127,-106,12,42, 
  /* [88][0][][] */ -79,-30,42,-14,14,29,-72,-47,-16,14,-77,-127,-37,-53,-18,-31, 
  /* [89][0][][] */ -56,48,19,-35,0,32,-127,40,96,35,-68,-45,-10,-48,-35,-19, 
  /* [90][0][][] */ -19,-10,-20,-69,127,7,-55,48,65,73,4,-6,21,6,-28,-29, 
  /* [91][0][][] */ -26,-62,18,43,-21,-20,-13,79,-19,-70,38,-4,2,64,48,127, 
  /* [92][0][][] */ -16,108,-20,12,-15,41,-127,76,-6,19,62,24,-21,75,75,11, 
  /* [93][0][][] */ 32,79,-49,-75,78,83,-80,2,67,63,62,52,-127,39,-30,78, 
  /* [94][0][][] */ 43,78,101,23,-127,-74,0,21,36,-16,21,-5,-59,-41,52,-33, 
  /* [95][0][][] */ -65,45,53,5,127,53,-92,21,53,14,-75,59,11,-12,105,-124, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0014031139435246587, 0.0032952900510281324, 0.0022594912443310022, 0.0016233569476753473, 0.0020632478408515453, 0.0018454085802659392, 0.0021216247696429491, 0.0021585768554359674, 0.0025174291804432869, 0.0026767817325890064, 0.0015530902892351151, 0.0020651570521295071, 0.0014473054325208068, 0.0012480623554438353, 0.0023512330371886492, 0.0024997456930577755, 0.0037506150547415018, 0.0022286351304501295, 0.0016760792350396514, 0.0013856368605047464, 0.0029795197769999504, 0.0017387421103194356, 0.0014411332085728645, 0.0019446456572040915, 0.0025759045965969563, 0.0024353330954909325, 0.0024124456103891134, 0.001537041855044663, 0.0020331286359578371, 0.0023427545092999935, 0.0011187633499503136, 0.0024658697657287121, 0.0016781260492280126, 0.0015321099199354649, 0.0014657207066193223, 0.0014712093397974968, 0.0018359124660491943, 0.001517803524620831, 0.0018626120872795582, 0.00097567116608843207, 0.0026835747994482517, 0.0015111814718693495, 0.0025294143706560135, 0.0015284121036529541, 0.0018989405361935496, 0.0012596413725987077, 0.0021730181761085987, 0.0020517497323453426, 0.00097297824686393142, 0.0017720761243253946, 0.0017640416044741869, 0.0020611716900020838, 0.0010545406257733703, 0.001855480601079762, 0.0019064202206209302, 0.0021032860968261957, 0.0020590352360159159, 0.0013511368306353688, 0.0020519397221505642, 0.0020170318894088268, 0.0019975593313574791, 0.0015185028314590454, 0.0032564797438681126, 0.0019123306265100837, 0.0011572367511689663, 0.0010990990558639169, 0.0014994865050539374, 0.0013449621619656682, 0.00227143126539886, 0.0019591974560171366, 0.0019120544893667102, 0.0014793477021157742, 0.0015994521090760827, 0.0014248843071982265, 0.0014800007920712233, 0.0012975172139704227, 0.0022725448943674564, 0.0018998549785465002, 0.001944128074683249, 0.0018803346902132034, 0.00082141795428469777, 0.0016084832604974508, 0.0022600009106099606, 0.0021802489645779133, 0.0029352218843996525, 0.0022695539519190788, 0.0020718490704894066, 0.0017819448839873075, 0.0014872194733470678, 0.0022303231526166201, 0.0015629461267963052, 0.0024423024151474237, 0.0018580770120024681, 0.001531130401417613, 0.002138013718649745, 0.0014694666024297476, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { 17016, 12143, -1025, 3171, 4544, 3010, 1250, 3117, 21804, -3325, -6167, -137, -12915, 6074, 3862, 8999, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.2936440624762326e-05, 5.9552799939410761e-05, 3.668612043838948e-05, 8.6593703599646688e-05, 6.4665255194995552e-05, 7.4155548645649105e-05, 5.732713543693535e-05, 6.6489861637819558e-05, 6.7446984758134931e-05, 5.0365433708066121e-05, 6.6434418840799481e-05, 7.6090916991233826e-05, 8.3623359387274832e-05, 6.3776627939660102e-05, 6.5306063333991915e-05, 9.1476846137084067e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -127,30,73,-57,-51,-17,-102,-14,-61,29,-36,-73,11,45,33,-24,4,-8,76,25,10,-36,103,41,-17,33,31,26,-73,-62,-85,3,-6,-39,30,43,-3,15,31,89,-33,19,-69,20,-93,-53,2,99,-42,37,-34,-14,-10,6,37,-67,-68,56,14,79,61,27,24,22,-20,-87,-81,13,-70,-68,-7,6,-31,-5,-71,-61,-79,2,-103,-6,-30,71,67,-67,-28,54,-23,21,48,31,-18,-39,-24,-5,-123,7, 
  /* [1][0][][] */ 88,18,31,-30,-20,-1,-37,-31,11,65,105,-80,1,11,-73,-49,-5,-46,-40,34,-14,-17,33,50,-77,-66,52,-75,48,-127,104,-60,68,55,-16,59,30,63,-33,-30,17,37,-21,-38,-34,53,-109,-17,-58,-29,-64,-33,21,-39,-27,36,81,58,-15,42,37,39,5,-91,-17,-76,-31,43,-8,-5,-78,-16,-99,6,1,-66,-14,14,-30,-63,13,-38,-76,-24,-19,0,-15,-23,-44,-30,-29,41,53,45,-84,81, 
  /* [2][0][][] */ 83,-18,7,-22,41,-78,125,11,2,-40,13,-43,-59,-68,43,-38,-120,-24,-83,32,35,-62,-45,13,49,-93,-44,-24,-6,42,-107,123,-91,101,-35,56,-29,-33,-55,-72,-113,89,127,18,-81,-5,-1,-38,55,-13,-27,-52,72,-15,-9,53,27,-37,9,-5,-28,43,-58,-6,118,17,-32,-16,46,54,-43,30,51,33,117,52,55,-81,98,79,85,-12,-16,11,-43,-34,6,100,-2,-5,-48,26,-51,53,9,-22, 
  /* [3][0][][] */ -3,13,-5,1,44,-7,-9,-73,-41,70,31,12,31,-2,-50,19,16,-30,20,27,32,114,32,-65,-24,8,-4,-7,58,-35,52,-7,-6,39,-2,2,4,48,44,19,-66,-23,-24,41,-60,24,7,-3,-30,-47,-12,-9,36,-49,-33,-50,41,127,-31,50,-6,-13,14,7,33,16,-40,0,-17,-16,1,-40,-64,-24,35,-29,-4,4,-66,-42,-11,-3,-53,30,-40,-13,-4,-37,29,27,14,-29,47,41,-53,48, 
  /* [4][0][][] */ 48,8,-46,15,38,33,-48,-6,-15,60,76,-47,0,12,10,-51,9,-11,-27,45,26,15,46,40,-127,-28,-87,-13,-67,-53,-23,38,-32,-31,7,61,11,9,35,12,-25,-46,35,-19,-41,37,-12,55,-64,48,-8,10,52,-18,-38,0,58,26,6,13,54,4,43,-17,-58,-34,-63,18,-63,-1,-57,78,-11,-83,-40,-56,19,-47,-54,-1,-64,53,-75,22,-50,66,35,-63,36,23,4,6,-62,-17,22,13, 
  /* [5][0][][] */ -103,15,69,53,19,-55,49,-17,0,28,-54,6,14,-2,-14,-32,2,-60,55,-8,-124,-37,-71,78,-62,2,54,35,31,-61,12,59,43,127,1,27,-4,46,31,3,5,88,35,-68,44,28,38,8,-14,16,11,40,22,-36,16,-86,38,-44,-23,-86,65,88,-61,35,49,12,-8,-95,-41,-3,-47,-30,32,25,-19,-32,14,-47,-23,-17,126,-1,0,-84,-81,35,40,-8,-32,3,40,-14,-2,28,-5,87, 
  /* [6][0][][] */ 12,-31,-67,19,-30,-125,106,94,-110,35,-26,108,-127,-79,50,63,2,-15,15,-37,5,-38,-67,-48,-12,67,30,70,27,63,93,-89,-2,-8,-1,-118,9,-10,13,63,26,-26,-63,-44,47,-73,-65,24,8,-76,62,84,61,-1,-32,-46,-21,-15,46,-58,-93,26,-108,60,-15,50,7,23,45,51,21,5,47,10,68,22,55,-38,37,-52,-31,2,-44,42,69,-116,30,47,-72,10,37,53,-36,2,-8,105, 
  /* [7][0][][] */ 34,96,-54,-121,-7,-3,35,-6,-78,74,-17,-57,-21,-27,26,-2,-53,8,-43,86,19,109,17,-5,46,-25,3,5,70,39,56,-35,62,15,-30,25,10,-29,32,35,-63,5,43,6,0,-67,52,-25,48,-68,-83,-33,-46,12,0,-18,25,41,-127,53,-7,110,82,-41,9,-13,-74,37,-40,-26,-112,50,-11,63,-19,7,-52,69,20,-90,-10,-37,83,-74,48,-35,-56,33,7,94,-105,32,36,7,-26,6, 
  /* [8][0][][] */ -31,123,-55,27,0,-12,-115,1,-110,-14,33,-24,-46,49,29,99,-12,-18,5,28,60,40,8,-37,-51,66,-11,11,2,-38,-46,-37,-24,-36,-11,-71,-47,3,64,27,1,-25,63,41,-99,-50,-3,-40,-27,-43,57,81,-9,-9,-68,89,-21,35,-8,-3,-54,14,71,51,-12,-109,-68,15,-58,-25,-3,55,-56,-58,-127,-57,-48,40,-107,-57,-54,-2,-35,-14,9,6,-20,42,2,94,-89,-9,-100,-109,15,-80, 
  /* [9][0][][] */ 5,23,-88,46,-27,-28,39,43,21,65,-18,48,-14,6,19,117,31,-23,71,48,15,43,34,-115,-98,-26,84,-42,2,-29,31,74,1,11,6,-78,27,-3,5,-18,-26,50,40,-2,-37,27,18,42,36,127,-26,-18,-85,-93,13,-5,72,63,67,35,-48,49,-37,-68,91,-63,-40,37,-80,3,12,6,-67,94,-51,-12,-54,28,-67,-18,79,-55,51,1,-43,35,9,-66,-10,44,15,-8,77,34,-93,-6, 
  /* [10][0][][] */ 41,-2,-69,-63,0,-26,48,-6,-43,5,27,-3,-86,-53,2,27,-75,25,16,40,52,24,26,-28,-10,62,28,4,-28,-42,-29,-25,63,-37,32,5,75,-65,91,127,16,-59,28,26,-19,-105,-18,42,34,44,-53,-45,-23,42,5,41,1,-36,59,60,-22,37,-26,-21,-14,-78,5,53,13,-28,-10,83,94,50,29,-103,21,-39,24,-28,-53,49,71,13,-22,-34,-34,46,-53,6,15,56,34,87,-28,-3, 
  /* [11][0][][] */ -72,-1,20,-96,13,-11,-22,-25,2,20,9,50,-4,-31,-23,49,-65,60,49,24,-13,-2,-53,-72,116,13,-44,53,69,-42,70,-89,0,-9,-3,-57,-6,-50,-109,32,-40,53,-5,82,3,-30,3,-55,74,-79,-28,-46,27,30,71,-47,-61,-116,1,-22,-56,-20,5,-91,39,-5,33,56,93,35,63,36,-4,-32,67,-53,110,37,62,26,8,22,19,36,127,-52,9,39,-84,-39,-30,24,38,92,118,61, 
  /* [12][0][][] */ 39,27,0,-40,31,87,15,32,16,77,-6,40,42,32,12,8,-49,53,-3,41,82,12,61,-82,73,-11,-72,-90,17,36,27,-35,1,-11,4,-55,48,-19,0,-32,1,6,89,87,-46,53,7,-43,-27,-21,-46,9,-21,-8,13,28,-32,7,-36,41,29,-54,51,-102,36,127,-40,-53,10,-51,36,8,-23,-13,-19,55,12,53,-7,3,-9,-11,92,16,26,36,-48,-24,45,13,-83,56,36,10,14,-99, 
  /* [13][0][][] */ -33,17,-19,-61,-33,-19,6,-57,-41,27,-20,-45,46,-93,-48,-20,-4,-3,-44,5,-49,-27,4,49,-7,27,111,42,44,5,108,24,25,12,-127,70,-36,-71,61,-17,96,4,16,85,-46,-95,22,-3,57,-5,-2,35,26,6,16,52,46,-26,-43,10,57,30,55,-59,-4,27,-68,45,-48,-42,-69,6,-68,20,-53,-78,-115,6,14,44,0,78,40,-86,69,0,-16,11,0,15,-11,11,-53,50,-28,-16, 
  /* [14][0][][] */ -8,34,-76,-53,83,73,-91,-16,16,-11,68,-3,10,-36,-36,-51,-52,14,24,127,14,-12,-8,-9,1,21,-8,40,22,-12,-7,9,65,3,-33,9,-2,21,82,42,37,8,32,48,-32,-46,39,-37,21,-9,-15,-26,27,11,-30,24,23,63,-81,37,-17,-44,10,-94,19,-51,-72,14,-66,19,-19,18,-28,-34,-16,-33,20,0,-56,-41,11,-1,10,-9,-21,36,-25,-3,-16,93,44,12,-10,-4,-48,-60, 
  /* [15][0][][] */ -87,-48,-2,-93,1,-22,-15,-57,-45,40,5,84,-26,-59,4,94,-83,44,23,-58,38,-48,-22,-48,94,23,26,-24,-34,-72,-39,2,-46,3,40,-115,18,-86,11,-14,-7,-40,38,4,15,-22,41,57,-20,-29,66,-40,-21,35,7,-35,-127,-79,88,-10,-33,20,-59,33,-75,29,-17,12,47,-43,73,43,90,-36,-28,-33,7,11,50,6,-29,77,69,-5,56,-68,-90,31,-50,-19,-57,26,-16,10,9,59, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022497987374663353, 0.0025309938937425613, 0.0015591600676998496, 0.0036802322138100863, 0.0027482733130455017, 0.0031516107264906168, 0.0024364031851291656, 0.0028258189558982849, 0.0028664967976510525, 0.002140530850738287, 0.0028234627097845078, 0.0032338639721274376, 0.0035539926029741764, 0.0027105065528303385, 0.0027755075134336948, 0.0038877658080309629, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 40, 2669, -3256, -3245, -214, -2434, -7841, -6004, 1378, 1794, 442, -1746, -68, 3713, 9308, -1115, 18074, -1990, -9537, 951, 1873, 1548, 4702, -4281, -1685, -2760, -5803, -7334, 27, -8174, 1311, 2429, 11059, -6536, -4287, -157, 3372, -1055, -133, 5688, 552, 2890, 1235, -4659, 6710, 14583, 5075, 15478, -1723, 6167, 8878, -12891, 588, -5203, -624, 6465, -2303, 1416, 12304, 3282, 2729, 9175, 6820, -13512, -246, -2448, -1722, 2681, -6750, -2380, 11192, 1029, 15620, 2722, -4762, 9569, -4308, 1690, 1063, 6454, -4170, 9151, 136, 4026, 11527, -7811, -6774, -4984, 60, -3077, 14607, -587, 1052, -196, -5913, -6593, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00040901798638515174, 0.00014399786596186459, 0.00017672282410785556, 0.00021126691717654467, 0.00022157405328471214, 0.00023477419745177031, 0.00025912764249369502, 8.8978362327907234e-05, 0.00017722106713335961, 0.00015959361917339265, 0.00025637203361839056, 0.00032065124833025038, 0.00022660233662463725, 0.00013674248475581408, 0.00011966101737925783, 0.00023947287991177291, 0.0001018963084788993, 0.00028509358526207507, 9.3948328867554665e-05, 8.5810781456530094e-05, 0.00018728930444922298, 0.00033262665965594351, 0.00026705456548370421, 0.00016828325169626623, 0.0001840372133301571, 0.0001979311928153038, 0.00025233530323021114, 0.00010561302042333409, 0.0001321669842582196, 0.00010157022916246206, 0.00037509645335376263, 0.00019391252135392278, 0.00012683735985774547, 0.00014163558080326766, 0.00021415975061245263, 0.00031504794606007636, 0.00016415737627539784, 0.00037241549580357969, 0.00038126649451442063, 0.0001209850815939717, 0.00017550007032696158, 0.00021254453167784959, 0.00027366672293283045, 0.00014120520791038871, 0.00022314686793833971, 0.00010215600923402235, 0.00013079094060231, 6.8920584453735501e-05, 0.00017618011042941362, 0.00014106434537097812, 9.2360940470825881e-05, 7.4717936513479799e-05, 0.00017685051716398448, 0.00015348962915595621, 0.00014888416626490653, 0.0001374151324853301, 0.00019576260820031166, 0.00019595965568441898, 0.00016144644177984446, 0.00012922138557769358, 0.000314473727485165, 0.00011090299085481092, 0.00016908756515476853, 0.00010934290185105056, 0.00014827317500021309, 0.00030646080267615616, 0.00037725362926721573, 0.00024141925678122789, 0.0001956461783265695, 0.00018283257668372244, 0.00013429667160380632, 0.00014207229833118618, 0.00010053731239167973, 0.00019523044466041028, 0.00022837403230369091, 0.00013774042599834502, 8.3902981714345515e-05, 0.0002109526249114424, 0.00041397553286515176, 0.00015204701048787683, 0.00024255359312519431, 0.00011210819502593949, 0.0002534104569349438, 0.00019456345762591809, 0.0001442712964490056, 0.00014364131493493915, 0.00011038790398743004, 0.00015587119560223073, 0.00022311767679639161, 0.00024714958271943033, 8.4557257650885731e-05, 0.00021922255109529942, 0.00023024715483188629, 0.00027413040515966713, 0.00012318047811277211, 0.00020765903173014522, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 13,61,8,96,-67,5,24,81,77,-83,-37,5,-47,81,8,-110,-116,36,47,31,18,53,19,85,47,-28,-11,-47,-53,12,12,-15,-5,23,-28,127,6,54,11,-50,30,-55,27,127,-69,-1,-27,-43,-34,-107,-103,89,-78,76,-14,-20,-127,-117,-88,-111,-127,64,-127,72,-62,34,105,-67,-29,21,1,42,-105,18,25,-20,18,-13,-37,69,17,-52,58,-50,-73,-14,26,22,-43,-13,-92,127,47,-35,127,31, -31,-43,-7,60,11,110,-13,28,68,18,-93,101,-55,13,-70,127,-127,48,40,89,44,-2,88,117,58,-44,10,53,-62,127,-19,-120,97,127,26,56,48,58,24,-70,127,-34,79,31,2,14,116,-21,26,-94,-99,10,26,127,-83,-127,0,-33,-72,-41,7,-29,-22,127,-63,63,127,-16,37,127,122,-12,-81,50,-18,-127,59,-56,32,102,31,-41,117,-89,-117,-5,127,70,83,22,-127,66,127,-14,70,74, 5,-127,-1,39,-33,15,47,73,49,109,-4,-77,-50,106,-39,-108,-18,17,-11,127,24,31,12,57,51,-55,36,14,8,30,-42,-56,-83,-8,-9,62,-9,4,20,-46,-31,21,-4,18,-127,-51,-45,-71,48,-127,66,86,-15,14,9,42,93,-116,-29,-62,-42,78,-116,42,71,4,87,24,-24,31,-76,52,-127,-74,51,28,127,-35,-49,22,45,-44,18,-32,-30,-1,-9,21,-66,12,-79,44,0,61,68,32, 
  /* [0][1][][] */ 46,-37,37,127,-23,-53,127,113,-76,-89,16,121,-18,-127,-54,-59,-60,-20,127,21,-127,-27,-127,-42,3,52,-109,127,-107,26,127,83,67,42,36,25,-127,60,-27,-52,61,-127,25,84,-42,-53,17,-127,-124,-10,-127,83,79,-6,108,-1,-92,-13,-51,7,-3,-71,-12,5,-114,-10,100,-47,-25,14,-95,-127,-69,50,127,-111,103,32,-28,-59,127,-127,-39,102,24,15,-28,127,19,2,-82,31,-7,-94,72,12, -127,-35,-31,88,-107,-123,-116,-127,57,-53,127,127,-78,-53,-8,88,-65,-127,79,63,-21,-127,-56,49,-127,127,50,58,-87,17,-106,41,-41,85,127,-52,-2,127,127,56,-40,-15,-12,27,38,-50,-127,-95,32,10,17,99,2,46,12,-1,63,-3,60,-51,17,-89,-69,43,9,-127,20,127,51,49,-111,-83,23,28,-124,-83,47,127,127,-127,-66,66,-127,62,-38,-77,45,111,127,33,-17,-123,-78,-51,-20,127, 73,-33,42,113,21,-14,53,100,-116,127,-14,86,40,84,-127,32,35,-16,43,103,-121,9,-73,-113,25,-16,127,67,127,52,21,-127,-47,-76,0,86,-127,-20,-35,-127,-1,57,-1,-4,10,-98,-17,-82,127,2,-30,35,86,-21,-127,71,66,14,-127,43,35,-49,38,101,127,-10,77,0,-28,11,-127,-15,-125,-127,25,-37,73,-36,-61,-86,-11,-69,-27,118,-2,30,20,69,-38,-34,-11,39,-23,127,110,-7, 
  /* [0][2][][] */ 34,-103,26,49,26,73,55,115,-69,-81,15,52,34,-76,-53,54,-96,18,-10,57,19,30,-25,-19,122,31,15,33,-25,-7,-2,35,-49,-5,-22,6,-4,-39,-37,-108,-36,-17,-23,53,-59,-107,-14,-64,-28,-7,-111,77,52,16,-39,-42,-80,24,-37,91,-16,-84,-5,37,-50,80,49,-32,61,-11,24,56,-122,-12,48,12,22,-36,-5,-58,50,-39,9,-58,-127,124,-51,49,-54,127,12,6,-20,16,13,8, -6,-38,127,67,127,127,9,-14,-127,-28,-5,32,127,-41,-84,41,-37,47,22,-84,39,-6,20,127,96,-11,6,59,11,92,-27,-8,-90,69,10,-8,24,29,20,-112,-34,-10,-127,54,0,-56,-85,-100,18,-18,-110,127,127,3,-50,-82,34,127,-12,26,27,-127,46,91,-15,34,106,-8,127,-10,1,78,-39,31,-14,-73,39,-117,-13,-118,-22,0,-60,-127,-61,127,100,72,42,76,83,22,-47,-1,56,42, 23,104,39,-4,49,-1,51,88,-14,60,-24,-12,4,-43,-80,74,-58,56,51,108,4,43,-17,65,90,18,32,101,58,18,-26,-96,-127,26,-8,2,1,-86,-43,70,-8,1,0,-42,-51,-127,-73,-37,-18,39,-125,32,-21,1,22,43,25,33,12,127,-21,14,27,19,31,69,-22,9,43,16,-42,110,-58,-61,28,78,30,-10,-34,-22,-6,-68,17,-13,-66,76,30,-11,-95,33,5,-24,-45,-7,-20,-4, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.017383264377713203, 0.006119909230619669, 0.007510719820857048, 0.0089788436889648438, 0.0094168968498706818, 0.0099779032170772552, 0.011012924835085869, 0.0037815803661942482, 0.0075318953022360802, 0.0067827287130057812, 0.010895811021327972, 0.013627677224576473, 0.0096305990591645241, 0.0058115553110837936, 0.0050855930894613266, 0.010177597403526306, 0.0043305931612849236, 0.012116476893424988, 0.0039928038604557514, 0.0036469581536948681, 0.0079597951844334602, 0.014136632904410362, 0.011349818669259548, 0.0071520381607115269, 0.0078215813264250755, 0.0084120752289891243, 0.010724250227212906, 0.0044885533861815929, 0.005617097020149231, 0.0043167346157133579, 0.015941599383950233, 0.0082412818446755409, 0.0053905877284705639, 0.0060195121914148331, 0.0091017894446849823, 0.013389538042247295, 0.0069766882807016373, 0.015827657654881477, 0.016203826293349266, 0.0051418659277260303, 0.0074587529525160789, 0.00903314258903265, 0.011630835011601448, 0.0060012210160493851, 0.0094837415963411331, 0.0043416302651166916, 0.0055586150847375393, 0.0029291247483342886, 0.0074876546859741211, 0.0059952344745397568, 0.0039253397844731808, 0.0031755121890455484, 0.0075161466374993324, 0.0065233092755079269, 0.0063275769352912903, 0.0058401427231729031, 0.0083199106156826019, 0.0083282850682735443, 0.0068614738993346691, 0.0054919086396694183, 0.013365133665502071, 0.004713376984000206, 0.0071862214244902134, 0.0046470733359456062, 0.0063016097992658615, 0.013024583458900452, 0.016033278778195381, 0.010260318405926228, 0.0083149624988436699, 0.0077703846618533134, 0.0057076085358858109, 0.0060380725190043449, 0.0042728357948362827, 0.008297293446958065, 0.0097058964893221855, 0.0058539677411317825, 0.0035658765118569136, 0.0089654866605997086, 0.017593959346413612, 0.0064619975164532661, 0.010308527387678623, 0.0047645983286201954, 0.01076994463801384, 0.0082689467817544937, 0.0061315298080444336, 0.0061047556810081005, 0.0046914857812225819, 0.0066245254129171371, 0.0094825010746717453, 0.010503857396543026, 0.0035936834756284952, 0.009316958487033844, 0.0097855040803551674, 0.011650541797280312, 0.0052351700142025948, 0.0088255088776350021, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 7127, 1716, 998, -3452, 8135, 11715, 7960, 1390, 193, 9473, 1247, -6424, 2429, 1531, 390, -2472, 3193, 4834, 152, -88, 4048, 4932, 6488, -1698, -1839, 159, 12520, -371, 2309, 2821, 9836, -825, 7381, 3292, 4060, -3465, 1591, -4751, -845, 783, 821, 2115, 1499, -815, 3095, 1728, 2954, 3922, 3841, 1181, 4321, 5343, -3998, 1018, 897, 1441, 2933, 1946, 4611, 2405, -1391, 7066, 3693, 5760, 2927, 6901, -6559, 3220, 5356, -562, 4226, 918, 2053, 5379, 6116, 4254, -312, 1178, 3876, 5524, 1885, 2296, 8140, 1491, 2541, 2728, 223, -2046, 7926, -886, 969, -2412, 7088, 3405, -390, -1844, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00011966589227085933, 0.0001971739693544805, 0.00018818675016518682, 0.00013762015441898257, 0.00011526261368999258, 7.5905198173131794e-05, 0.00010455331357661635, 0.00017164461314678192, 0.00016635829524602741, 8.5513071098830551e-05, 0.0001544079277664423, 9.2710361059289426e-05, 0.00017069675959646702, 0.00021401802951004356, 0.00023202403099276125, 0.00012780216638930142, 0.00018612605344969779, 0.00013467772805597633, 0.00013734734966419637, 0.00022658280795440078, 0.00013129311264492571, 0.00015629804693162441, 0.00012551498366519809, 0.00017351479618810117, 0.00015218228509183973, 0.00013829146337229759, 7.7910844993311912e-05, 0.00020316563313826919, 0.00014618849672842771, 0.00013773530372418463, 9.6008006948977709e-05, 0.00019773842359427363, 0.00011084658763138577, 0.00016492398572154343, 0.00015366139996331185, 0.00016742051229812205, 0.00013203885464463383, 0.00014085270231589675, 0.00015443500888068229, 0.00023755461734253913, 0.00033765519037842751, 0.00016424241766799241, 0.00025439533055759966, 0.00021386488515418023, 0.00013233389472588897, 0.00017899028898682445, 0.0001814562565414235, 0.00013987532292958349, 0.00018504740728531033, 0.00022821644961368293, 0.0001476679026382044, 0.00010037054744316265, 0.00012559094466269016, 0.00028777160332538188, 0.00018606506637297571, 0.00019426472135819495, 0.00014829964493401349, 0.00017514373757876456, 0.00014120100240688771, 0.00014344509690999985, 0.00013371853856369853, 0.00010477391333552077, 0.00016462057828903198, 0.00012011185754090548, 0.00017846046830527484, 0.0001040295755956322, 0.00010894000297412276, 0.00016497501928824931, 0.00011433229519752786, 0.00017511569603811949, 0.00014021237439010292, 0.00014324503717944026, 0.00019180591334588826, 0.00010550526349106804, 0.00010275811655446887, 0.00010481048229848966, 0.0001434081350453198, 0.000245221599470824, 0.00013168113946449012, 0.00012659968342632055, 0.00017245576600544155, 0.00018406836898066103, 9.4534145318903029e-05, 0.00013309386849869043, 0.00016596999194007367, 0.00018341501709073782, 0.00022562839149031788, 0.00018952264508698136, 0.0001047900368575938, 0.0002079159312415868, 0.00026056516799144447, 0.00014068398741073906, 0.00011325660307193175, 0.00012834975495934486, 0.0002366881089983508, 0.00013626988220494241, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -34,88,-19,-88,43,-13,-74,45,-28,-27,89,-127,74,-16,6,-118, 
  /* [1][0][][] */ -72,48,-41,-98,-127,-10,-3,49,-56,-5,68,-98,87,57,-10,38, 
  /* [2][0][][] */ -49,-10,-49,-44,3,-35,75,-34,-109,85,77,-16,19,45,-69,127, 
  /* [3][0][][] */ -68,-73,-15,-38,-79,9,-55,-78,-58,11,26,-114,-48,-31,-127,-7, 
  /* [4][0][][] */ 29,-1,8,1,-61,-6,-127,-11,-9,38,49,36,34,-2,-64,-109, 
  /* [5][0][][] */ -55,74,-65,10,74,-13,-119,-3,120,2,67,-66,-5,-57,-93,-127, 
  /* [6][0][][] */ -18,-49,2,-23,-50,49,73,-69,-10,-77,60,-5,1,15,-127,-7, 
  /* [7][0][][] */ -56,70,127,-122,53,80,43,-90,-16,71,-96,22,-7,11,-7,85, 
  /* [8][0][][] */ -11,35,-5,7,-30,22,90,120,-83,-10,-51,-72,50,127,-17,-58, 
  /* [9][0][][] */ 106,87,98,-12,-94,-10,-65,-96,60,-58,90,-32,-27,-127,21,37, 
  /* [10][0][][] */ -34,-118,3,-51,-127,69,46,14,-66,22,-22,74,15,105,-59,-41, 
  /* [11][0][][] */ 82,-26,-29,98,-127,8,84,-18,114,125,-64,94,10,-36,59,99, 
  /* [12][0][][] */ 16,12,95,19,127,-2,2,77,72,3,90,66,-75,67,-124,-13, 
  /* [13][0][][] */ 44,-23,4,49,-5,33,98,8,-45,3,6,3,14,83,127,-75, 
  /* [14][0][][] */ 119,-9,127,15,60,26,47,71,78,81,27,22,12,-41,26,-64, 
  /* [15][0][][] */ 22,116,-18,21,10,127,-48,33,-25,-10,-15,-31,-76,70,23,-20, 
  /* [16][0][][] */ -7,62,126,-77,43,17,-4,-12,48,-11,-15,67,54,-38,61,127, 
  /* [17][0][][] */ 17,114,87,-127,32,-90,64,-33,-50,37,-13,69,-20,-10,32,-50, 
  /* [18][0][][] */ -58,30,-57,-27,97,81,-50,-47,25,79,48,60,0,127,14,-28, 
  /* [19][0][][] */ 24,101,83,78,-9,-59,-43,25,-26,127,53,65,70,18,-126,32, 
  /* [20][0][][] */ 126,22,45,27,-19,-51,-9,-14,-23,-51,-127,21,91,-55,5,-20, 
  /* [21][0][][] */ -46,-35,27,57,-5,-26,-127,62,3,2,-9,-17,26,13,-55,-19, 
  /* [22][0][][] */ 10,35,-29,-36,127,34,-12,18,32,8,20,63,-30,19,-37,5, 
  /* [23][0][][] */ -127,-26,4,25,1,7,121,85,34,100,-72,-40,35,40,-57,-48, 
  /* [24][0][][] */ -18,-94,127,-96,95,10,126,78,0,-31,94,97,-124,-33,33,53, 
  /* [25][0][][] */ 72,-66,107,16,-49,-37,-22,32,90,-24,-52,-38,127,-103,77,57, 
  /* [26][0][][] */ 49,19,98,99,22,-15,-36,13,-9,32,40,127,6,-65,103,-33, 
  /* [27][0][][] */ -12,43,-46,23,-49,87,28,-71,29,-49,57,45,15,4,127,99, 
  /* [28][0][][] */ -72,49,-127,-49,11,-17,-1,-59,-38,109,-44,69,2,81,3,-8, 
  /* [29][0][][] */ 49,48,-98,35,30,74,-32,-30,23,-6,50,62,-127,8,-31,67, 
  /* [30][0][][] */ -42,82,-127,-48,52,-16,27,36,-43,38,-20,-22,-20,86,-19,71, 
  /* [31][0][][] */ 51,-51,88,-5,9,-85,-71,-52,-105,-101,35,11,-31,84,51,127, 
  /* [32][0][][] */ -80,2,5,44,-96,43,46,24,-20,-127,47,-55,25,2,121,40, 
  /* [33][0][][] */ -92,-41,32,124,-53,16,-62,25,-80,-54,45,-11,-13,-12,35,127, 
  /* [34][0][][] */ 7,36,-117,-26,92,6,-29,114,51,57,-57,-51,-44,-26,1,127, 
  /* [35][0][][] */ 71,20,52,-59,10,0,-90,5,-47,-127,-46,-19,12,-29,73,-65, 
  /* [36][0][][] */ -36,20,-127,-16,48,110,7,43,-53,9,81,86,-1,54,-67,52, 
  /* [37][0][][] */ 31,28,20,-64,66,-106,94,2,-127,9,2,32,-57,27,77,63, 
  /* [38][0][][] */ -51,127,46,-70,103,41,107,-126,6,-44,-61,57,-106,-97,-59,35, 
  /* [39][0][][] */ 39,22,-121,-126,6,-116,3,-25,9,34,56,-18,49,23,-127,-50, 
  /* [40][0][][] */ -26,55,-81,-48,-25,-26,7,-127,1,2,-8,-11,23,74,49,42, 
  /* [41][0][][] */ -40,-127,10,75,-1,-2,-18,-28,-17,-71,90,-50,-68,-55,-22,25, 
  /* [42][0][][] */ -44,34,-3,-127,-32,27,27,13,-18,10,-37,12,82,1,-14,-7, 
  /* [43][0][][] */ 7,19,0,1,127,26,10,31,-9,-41,28,-40,-115,-88,8,4, 
  /* [44][0][][] */ 60,-41,34,53,-33,0,3,58,49,-71,25,-56,91,-44,-72,127, 
  /* [45][0][][] */ 69,-113,-79,90,-57,-114,-24,32,40,-26,-56,42,-127,109,89,11, 
  /* [46][0][][] */ -20,-83,34,67,19,-32,-88,9,40,-37,45,-16,57,109,50,127, 
  /* [47][0][][] */ -59,-96,41,42,47,-51,71,66,9,-42,-127,-30,4,-51,-104,90, 
  /* [48][0][][] */ -25,96,-26,-20,14,42,-5,-127,31,-51,17,-60,85,-82,-38,-24, 
  /* [49][0][][] */ -30,21,16,25,-26,-54,127,105,33,27,-90,-10,30,3,-28,57, 
  /* [50][0][][] */ 50,19,-28,9,40,-127,-25,15,-45,16,-38,2,13,-75,-107,-19, 
  /* [51][0][][] */ -47,84,-71,125,-46,127,-15,-104,-94,-106,35,-66,-2,81,-20,101, 
  /* [52][0][][] */ -127,14,1,27,3,67,63,26,2,-73,-24,-67,-66,0,-121,-6, 
  /* [53][0][][] */ -9,-65,-4,-127,-40,-24,-17,68,21,-22,-32,19,6,5,44,63, 
  /* [54][0][][] */ 31,-23,-10,12,-69,51,42,-17,14,-75,92,69,-50,-14,-127,19, 
  /* [55][0][][] */ 1,-28,-56,46,115,-72,48,79,-43,-39,-127,-31,102,-28,33,14, 
  /* [56][0][][] */ 113,-15,-23,-114,-69,49,-65,4,-53,-18,-107,45,45,-25,8,127, 
  /* [57][0][][] */ -31,-1,45,-45,81,63,78,34,23,-1,-15,-7,-69,34,-127,6, 
  /* [58][0][][] */ 13,-6,-11,20,70,0,-93,-63,89,-127,-26,6,-70,-85,-60,40, 
  /* [59][0][][] */ -117,40,-13,10,-11,80,-127,-32,-13,104,-55,-50,-45,58,-12,-43, 
  /* [60][0][][] */ 53,-71,40,-17,-127,-107,115,-23,44,44,-48,123,-28,-77,33,99, 
  /* [61][0][][] */ 47,44,-69,-10,-57,-8,-105,-127,-27,-10,-12,110,104,-38,85,32, 
  /* [62][0][][] */ 13,-71,9,-12,-14,20,50,73,-61,127,23,95,22,54,113,61, 
  /* [63][0][][] */ 9,-127,-31,-34,-71,46,72,-18,-41,-33,-2,-42,-45,121,93,48, 
  /* [64][0][][] */ -42,-72,-48,-53,35,-17,49,-37,11,-83,36,16,58,-53,-23,127, 
  /* [65][0][][] */ -14,-20,68,-30,37,-6,127,54,-112,-60,-44,38,10,77,-80,28, 
  /* [66][0][][] */ -72,-115,-2,-103,-30,-127,-24,-33,-14,-43,57,90,8,-26,-90,-12, 
  /* [67][0][][] */ -90,-127,-9,-58,-33,76,10,-95,-67,4,-58,-71,56,-1,-39,-2, 
  /* [68][0][][] */ 105,18,8,8,-40,6,-113,-27,-127,-127,-77,-18,71,-77,43,-113, 
  /* [69][0][][] */ 50,2,50,-1,6,-14,-111,49,-7,127,-33,-10,-10,17,107,-60, 
  /* [70][0][][] */ 82,15,-29,44,-57,45,-3,-64,81,127,-32,62,67,-22,-10,15, 
  /* [71][0][][] */ 74,-53,24,92,-64,-64,-18,-2,127,52,-49,-31,105,-32,8,-11, 
  /* [72][0][][] */ 10,29,11,127,-2,-4,-96,85,23,74,38,-6,3,-16,-27,28, 
  /* [73][0][][] */ 37,2,38,-93,59,-64,-47,26,-14,85,-127,69,10,-68,32,-67, 
  /* [74][0][][] */ 46,-45,25,-20,-127,-37,108,3,-101,-98,25,-22,23,-38,-44,41, 
  /* [75][0][][] */ 22,113,-59,25,15,106,19,-50,-42,-45,63,64,-127,69,-13,59, 
  /* [76][0][][] */ -91,-65,38,-126,-42,-15,123,28,-63,17,66,31,-39,-127,-29,86, 
  /* [77][0][][] */ -34,127,-50,1,-69,-14,0,78,-36,-23,-46,14,-3,100,15,9, 
  /* [78][0][][] */ 93,81,-15,41,-64,82,-127,-9,-17,-3,-104,-62,37,-56,4,36, 
  /* [79][0][][] */ -90,-38,92,2,-36,-127,-6,-8,-22,24,24,-9,-62,112,-51,86, 
  /* [80][0][][] */ 77,110,11,-98,40,102,107,-29,127,42,-69,10,101,-48,2,-30, 
  /* [81][0][][] */ -2,-86,8,-72,52,57,-21,108,71,23,12,-63,-18,34,-127,-96, 
  /* [82][0][][] */ 91,103,97,-70,76,-127,108,57,-65,98,-47,45,-14,-21,55,-54, 
  /* [83][0][][] */ -75,38,17,-22,64,67,127,112,-3,34,-69,-109,-52,38,-72,-62, 
  /* [84][0][][] */ -21,-51,15,53,-101,-77,-127,46,-78,87,-53,-82,-88,53,-23,-66, 
  /* [85][0][][] */ -85,63,-64,-31,-36,-2,-127,-59,-20,105,40,-77,-86,-23,-36,-39, 
  /* [86][0][][] */ -22,17,127,35,13,-72,60,11,1,-3,-89,-44,23,4,-88,-34, 
  /* [87][0][][] */ -5,59,67,-32,-127,8,51,31,71,-13,18,34,-38,20,-8,-8, 
  /* [88][0][][] */ -66,-90,-46,16,58,11,-8,-45,-35,-127,-45,24,18,-75,-11,58, 
  /* [89][0][][] */ 66,18,32,-127,31,-16,-36,10,77,-64,23,-32,-79,-64,47,-17, 
  /* [90][0][][] */ 20,96,9,11,-26,36,46,62,-13,-40,2,127,22,5,-32,58, 
  /* [91][0][][] */ -27,44,-58,57,127,18,-61,-117,-58,44,22,52,-99,-89,-33,-71, 
  /* [92][0][][] */ 7,48,2,19,-127,1,-93,38,-34,54,109,109,10,-67,57,-17, 
  /* [93][0][][] */ 93,34,84,67,-127,-55,4,5,-6,-89,44,-71,-14,-67,-16,-8, 
  /* [94][0][][] */ 4,-111,39,-127,-30,1,-13,20,50,-26,7,34,34,40,-60,50, 
  /* [95][0][][] */ -15,-32,-35,-17,127,63,-14,33,63,52,-39,37,-13,125,1,-4, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0016264684963971376, 0.0026799386832863092, 0.0025577866472303867, 0.0018704982940107584, 0.0015666203107684851, 0.001031684223562479, 0.0014210621593520045, 0.0023329502437263727, 0.0022610998712480068, 0.0011622720630839467, 0.0020986734889447689, 0.0012600957415997982, 0.0023200672585517168, 0.0029088789597153664, 0.0031536119058728218, 0.001737054786644876, 0.0025297782849520445, 0.0018305056728422642, 0.0018667903495952487, 0.0030796562787145376, 0.001784502761438489, 0.0021243635565042496, 0.0017059678211808205, 0.0023583692964166403, 0.0020684232003986835, 0.0018796225776895881, 0.0010589445009827614, 0.0027613758575171232, 0.0019869571551680565, 0.0018720633815973997, 0.0013049165718257427, 0.0026876106858253479, 0.0015065987827256322, 0.002241605194285512, 0.0020885269623249769, 0.002275537233799696, 0.0017946386942639947, 0.0019144343677908182, 0.0020990415941923857, 0.0032287822104990482, 0.0045893238857388496, 0.0022323413286358118, 0.0034576768521219492, 0.0029067974537611008, 0.0017986488528549671, 0.0024327908176928759, 0.0024663074873387814, 0.0019011500990018249, 0.0025151176378130913, 0.0031018601730465889, 0.002007064875215292, 0.0013642110861837864, 0.0017070004250854254, 0.0039113187231123447, 0.0025289494078606367, 0.0026403970550745726, 0.0020156512036919594, 0.0023805093951523304, 0.0019191682804375887, 0.0019496694440022111, 0.0018174685537815094, 0.0014240605523809791, 0.0022374812979251146, 0.0016325300093740225, 0.0024255895987153053, 0.0014139437116682529, 0.0014806849649176002, 0.0022422987967729568, 0.0015539756277576089, 0.002380128251388669, 0.0019057311583310366, 0.0019469503313302994, 0.0026069774758070707, 0.0014340009074658155, 0.0013966623228043318, 0.0014245575293898582, 0.0019491671118885279, 0.003332989988848567, 0.0017897767247632146, 0.0017207108903676271, 0.0023439752403646708, 0.0025018106680363417, 0.0012848841724917293, 0.0018089782679453492, 0.0022558220662176609, 0.0024929305072873831, 0.0030666841194033623, 0.0025759439449757338, 0.0014242796460166574, 0.0028259407263249159, 0.0035415359307080507, 0.0019121411023661494, 0.001539355143904686, 0.0017444974509999156, 0.0032170049380511045, 0.0018521457677707076, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -20550, -20683, 9134, -24984, 11520, -9611, 26706, -11965, 3078, -16065, 18350, 21292, -7524, -24093, 4473, 19592, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.7240332504734397e-05, 5.3313578973757103e-05, 5.7791985454969108e-05, 6.7825785663444549e-05, 8.408002759097144e-05, 0.00012658521882258356, 6.5294094383716583e-05, 4.5076933020027354e-05, 0.00011863632971653715, 0.00013039966870564967, 8.5827312432229519e-05, 5.4768210247857496e-05, 5.5189706472447142e-05, 7.3014933150261641e-05, 8.2020422269124538e-05, 5.6126518757082522e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -15,8,31,-42,-29,-117,-52,55,-18,-53,28,-35,69,-74,49,49,-60,-67,34,-1,69,3,-57,-34,-28,97,127,52,13,62,-1,-30,24,-5,13,-21,5,39,-26,25,97,1,5,15,-12,-17,9,-56,49,-21,95,-20,-45,-3,68,-3,-30,-29,-6,41,-14,41,-17,-20,5,3,45,-16,23,-49,9,21,13,30,4,29,83,-31,48,35,-15,40,38,39,-46,-5,3,77,-2,14,-67,-22,17,0,92,109, 
  /* [1][0][][] */ 24,58,-33,-53,-57,-64,79,-68,-37,3,-35,-43,-6,-25,-8,-27,10,-78,-39,13,-33,-86,103,-68,-10,31,-9,40,-14,12,-62,23,-26,39,32,33,-23,49,-80,127,87,13,23,-52,74,-68,-3,57,-37,1,39,-97,7,53,77,50,37,37,-27,15,-38,3,32,-21,48,47,113,-13,-15,-122,21,29,31,44,-18,26,-29,-14,125,-3,60,-50,89,-28,-9,-57,2,0,-29,-6,40,6,64,-61,-27,43, 
  /* [2][0][][] */ -20,-14,25,4,93,54,-55,33,-65,29,10,-39,43,-50,35,4,36,-15,-127,-9,-21,-50,-14,8,-51,-5,-37,26,-42,-41,-45,56,10,-39,-25,-7,-39,55,19,-41,29,27,12,48,-16,62,25,-30,-52,14,-13,-14,20,10,-15,-40,5,33,28,20,-13,-4,6,19,12,-20,-41,-24,-54,1,2,3,-10,41,18,72,-50,-45,-30,-51,33,34,6,-30,-21,-33,-24,-41,-26,-32,-3,40,1,6,91,-19, 
  /* [3][0][][] */ -9,-17,-35,-127,-24,-64,72,3,29,106,-28,-7,25,-32,-40,81,67,16,-12,34,-13,36,13,9,10,90,48,-1,-13,5,-95,54,12,11,69,5,-9,-36,-33,72,64,-8,-5,51,49,-89,28,52,83,-38,50,-23,112,70,41,-29,23,25,-16,-38,-30,29,84,-14,-23,17,114,-13,33,-40,-43,20,33,-45,2,-64,37,-31,102,-2,3,-51,20,8,-24,-42,109,79,-67,50,-41,1,34,-89,-31,52, 
  /* [4][0][][] */ -31,127,58,-24,-34,-5,-14,8,24,-32,-1,-5,20,29,-38,28,-7,-95,-26,-64,21,-26,-60,23,-16,-18,-18,6,-59,112,-91,-20,20,-38,-35,-41,29,73,-82,49,57,4,10,-27,-32,-10,73,-27,62,-20,-67,-9,-55,59,89,31,24,64,-16,38,-63,-33,12,19,57,11,-104,-31,-7,-42,39,-36,-14,58,73,74,-15,21,-73,54,26,78,7,-38,74,-73,-39,-49,-43,-75,-50,16,9,-1,22,-24, 
  /* [5][0][][] */ 5,-34,32,-8,-32,-6,1,-35,30,9,-22,10,-50,0,33,-7,-16,16,-39,-37,-56,1,-16,-7,26,-43,69,-6,8,45,7,76,-41,-67,26,-17,-24,-46,-43,2,-54,-11,-4,11,17,1,-84,19,-17,10,57,-2,-2,-44,29,12,-38,-89,19,-12,17,18,-4,43,-40,-26,127,-46,-11,-2,8,5,4,23,43,0,-8,-6,115,35,-25,16,-43,-7,46,82,27,82,14,-37,-17,4,7,-13,-38,4, 
  /* [6][0][][] */ -2,-82,83,34,-20,127,-15,-72,-37,-72,-84,70,3,28,-15,54,-7,46,4,-53,-86,-50,-49,-50,29,-79,0,64,-96,50,1,-23,18,60,0,-68,17,-39,36,-44,-85,34,29,-31,-18,33,-78,-31,3,10,-48,-114,-9,16,-46,-8,-64,-35,1,2,26,-26,-53,-1,30,-104,-28,-63,-125,86,-11,-35,-22,-66,4,-78,73,-16,-68,36,-39,87,-46,-116,55,16,-18,22,-71,36,-45,44,12,-27,60,-90, 
  /* [7][0][][] */ -46,9,-42,60,0,9,13,28,-100,-3,41,21,18,-72,-23,-26,-22,-34,-1,20,-50,-33,-25,-39,55,54,13,72,0,12,21,2,-28,-127,25,122,-42,49,-76,11,-17,-5,29,-76,3,30,100,72,22,25,-21,-4,48,-50,-2,-48,-13,67,-82,-17,68,10,19,-34,55,-43,119,-46,-78,-33,82,33,-34,-47,-98,3,79,-38,115,-32,-3,-13,-108,-16,33,41,-68,45,-67,28,43,7,45,-46,84,29, 
  /* [8][0][][] */ -59,2,11,4,-21,-28,-8,-14,2,16,45,-2,17,13,-40,-24,61,-43,13,23,5,-70,-39,-30,-37,-5,73,25,5,43,10,-6,-1,16,6,-1,-47,21,-53,-31,32,73,34,-45,26,-27,56,4,46,16,59,-18,0,-6,-38,0,-11,121,-33,2,-4,-70,-31,-12,-86,-12,5,4,60,-14,45,-8,-15,-127,33,-87,26,-3,-25,22,-19,-12,9,70,50,-46,-39,60,-52,78,28,-31,-34,-25,-2,-54, 
  /* [9][0][][] */ -5,-20,-36,5,-7,23,24,27,-24,1,77,49,-27,35,4,-50,3,53,-18,-25,15,4,-17,20,-8,43,4,14,24,1,30,-5,-8,12,-9,74,-38,-9,7,8,30,-43,-16,21,30,37,-2,51,-4,11,-14,25,127,24,-18,-24,37,-9,40,9,-42,-39,109,10,34,43,46,16,51,-13,-17,52,52,-98,-15,-106,-23,-7,32,-5,0,1,29,-10,33,13,-36,7,-13,87,13,33,50,32,-20,37, 
  /* [10][0][][] */ -4,72,19,6,-40,17,-54,-6,40,-8,-35,25,30,-6,-31,-56,-35,12,-8,14,20,-36,-42,-22,13,-2,-87,61,-16,41,-11,0,45,2,-30,-11,5,-9,-10,-27,19,5,57,-36,-22,-16,4,42,26,23,10,-49,-33,-32,-10,22,-37,5,-9,-13,18,-44,12,23,-24,-8,-78,-27,-66,28,58,-25,-9,23,0,35,52,-34,-113,20,-33,35,-14,-2,-24,28,-83,-127,-20,10,25,16,62,-33,10,39, 
  /* [11][0][][] */ -13,-28,6,13,-62,50,-5,16,61,-18,-44,-66,35,-3,33,-16,-16,45,5,-63,12,-6,10,-49,-12,15,68,10,8,-65,-56,24,33,90,-112,-6,32,12,52,-26,-91,72,14,4,-78,-8,30,-11,52,16,-18,-90,-17,-12,-122,112,-62,46,8,-20,62,0,-29,-89,-51,-67,-127,-114,-27,23,-99,83,24,23,-41,9,69,33,-106,-53,-10,-12,-60,-6,-19,31,48,117,-36,-38,41,-25,-28,30,106,35, 
  /* [12][0][][] */ 14,9,-61,-42,54,-9,-37,61,68,-64,-23,-13,-10,-46,9,14,11,-85,-2,34,-7,67,11,57,-70,-45,-125,5,96,-32,24,-9,-9,-64,86,24,27,-11,5,41,-41,-60,22,5,26,-3,53,-51,-64,-8,-41,83,99,-37,-20,-69,7,33,-60,-40,41,42,92,-7,-27,-4,58,33,104,8,-4,47,8,-10,-49,7,-26,-63,57,-85,32,-50,57,-49,-8,-4,34,-127,-15,75,-5,-22,-13,84,20,81, 
  /* [13][0][][] */ -70,5,-61,22,28,58,25,13,25,40,-75,63,-40,-24,49,-76,12,89,89,3,-10,-53,-38,33,126,65,-12,31,-2,31,89,-10,-16,69,-27,44,-40,-70,-50,-67,-15,-15,42,15,56,55,-40,54,-13,32,31,22,-19,-21,56,40,21,-86,-10,-4,45,29,-37,-6,1,36,127,-1,9,39,-41,-6,32,45,-70,51,37,-91,110,-57,-43,-30,-28,-29,44,32,-38,0,-2,-40,-25,54,22,-20,59,55, 
  /* [14][0][][] */ -29,71,61,-6,-71,-67,-7,81,-77,1,45,-12,-57,-22,72,-6,-27,19,-41,18,-9,10,-84,-18,-45,-22,-46,-105,12,-22,9,62,-35,24,28,-7,-39,-72,-3,-8,24,-32,32,-56,-18,28,-60,3,28,-46,107,7,-18,33,-16,17,-78,34,-4,64,60,88,13,48,20,-44,4,-125,42,62,74,37,-92,24,-13,11,58,-8,43,47,-53,97,-20,-125,88,-22,26,26,-127,-12,-22,-36,-64,-7,35,24, 
  /* [15][0][][] */ 72,-61,30,33,40,14,-25,-12,0,25,-94,-26,46,73,13,-22,-28,6,-74,27,-23,-59,33,21,70,-38,86,33,29,-31,-10,38,56,19,-13,-98,46,43,59,35,36,37,5,3,-56,-118,13,-47,-50,-11,4,-45,-52,-50,-65,69,-62,-6,-25,-3,34,-75,-69,42,9,16,-63,16,-34,26,-15,2,-24,-127,-70,-95,-11,21,-124,38,67,-17,-3,-11,-63,15,5,-43,37,96,39,-73,-41,-26,22,-43, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0037077139131724834, 0.0022658270318061113, 0.0024561593309044838, 0.0028825958725064993, 0.0035734011325985193, 0.0053798714652657509, 0.0027749990113079548, 0.0019157696515321732, 0.0050420439802110195, 0.0055419858545064926, 0.0036476606037467718, 0.0023276489228010178, 0.0023455624468624592, 0.0031031344551593065, 0.0034858677536249161, 0.0023853769525885582, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 8361, 3190, -11573, 9267, -3237, -1417, 413, -1037, 406, -5829, 2926, -4746, 6285, -2360, -5288, -11244, -2753, -1222, -9753, -2690, 473, -1702, -7439, 2575, -173, 7025, -15234, -4221, -2672, -5597, 2585, -1098, 18629, -988, 4172, 3731, -2708, 12695, 1606, 8770, 14625, 1810, -504, 4559, 3761, -1897, 8608, 2855, -5195, -418, -11016, -467, -237, -6357, 981, -852, -1235, 10326, 2046, 4537, 148, 3530, -482, 8365, 11531, 1611, 16763, 7670, -2648, -1629, 5309, -5156, 883, -2602, -1938, -1716, 17290, 9731, 11188, 25753, 9473, -1711, 9627, 16623, -703, -2048, 8553, -9414, 15820, -2488, -8864, -3396, 719, 5510, 16811, 725, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00011450266174506396, 0.00020327718812040985, 8.1312733527738601e-05, 0.00012354239879641682, 0.00019570045697037131, 0.00058311759494245052, 9.0793291747104377e-05, 0.00011082404671469703, 0.00027674666489474475, 0.00012567341036628932, 0.00021835399093106389, 0.00014088695752434433, 0.00011834625183837488, 0.00012563170457724482, 0.00018368987366557121, 0.00011670037201838568, 0.00017289452080149204, 0.00032703150645829737, 0.00013384173507802188, 0.00034193007741123438, 0.00025434329290874302, 0.0001673120423220098, 8.2785561971832067e-05, 0.00013940721692051739, 0.0016041867202147841, 0.00011509884643601254, 0.0001400297915097326, 0.00013907889660913497, 0.0003751989861484617, 9.1318404884077609e-05, 0.00018340144015382975, 0.00023469513689633459, 4.8470014007762074e-05, 0.00023254145344253629, 0.00017380365170538425, 0.00016103580128401518, 0.00026278742006979883, 8.9550798293203115e-05, 0.00017481455870438367, 0.0001783038314897567, 0.00020686197967734188, 0.00025563317467458546, 0.00013402679178398103, 0.00017031203606165946, 0.00016794601106084883, 0.00017386817489750683, 0.00018210563575848937, 0.00040539054316468537, 0.00015564271598123014, 0.00027110151131637394, 0.00010222048149444163, 0.000162833122885786, 0.00016309645434375852, 0.00016182243416551501, 0.00021916598780080676, 0.00020043448603246361, 0.00022411539976019412, 0.00029067901778034866, 0.00029288177029229701, 0.00017939988174475729, 0.00031526491511613131, 0.00019905051158275455, 0.00016432901611551642, 9.0856461611110717e-05, 0.00019023093045689166, 0.00040751794585958123, 0.0001144782145274803, 0.00021884546731598675, 0.00015411752974614501, 0.00038035883335396647, 0.00017811980796977878, 0.00015103416808415204, 0.00051989365601912141, 0.00012273284664843231, 0.00018058645946439356, 0.00011627133062575012, 8.3563638327177614e-05, 0.00012668230920098722, 0.00013340120494831353, 7.9063975135795772e-05, 7.9101228038780391e-05, 0.00016552412125747651, 0.00010828422091435641, 0.00014386475959327072, 0.00011613128299359232, 0.00023848119599279016, 0.00015191118291113526, 0.00016124577086884528, 9.2340669652912766e-05, 0.00017280751490034163, 8.5994652181398124e-05, 0.00015929338405840099, 0.00025026919320225716, 0.00010192648187512532, 9.4604161859024316e-05, 0.00025467597879469395, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -19,-16,-11,-54,115,17,15,-67,2,-36,-34,10,10,-11,-2,54,-30,33,-17,-11,-25,41,38,59,12,-32,-2,17,10,16,24,-8,24,15,-65,-32,12,-127,-8,-29,-64,87,64,-33,-34,63,-84,-32,-18,-16,52,63,-75,37,-1,15,38,-36,14,-54,-6,-61,-23,-21,-13,-47,-74,-43,-41,35,30,-7,24,19,-3,-29,-16,20,127,-85,-56,-15,-79,-41,-13,10,31,36,-53,-9,-60,-14,-12,15,-53,-25, -16,68,-12,-127,-23,1,103,-94,13,-48,-55,35,13,11,-57,72,-2,78,48,-3,-7,127,87,127,64,-7,62,76,127,26,127,-45,-92,3,-127,-44,6,-75,127,-127,-78,-127,-31,-39,58,-29,-27,8,92,17,77,121,-127,67,-101,26,-84,-27,0,2,-12,-127,-127,-16,-40,-19,-18,-22,20,29,49,127,-127,-12,-18,-28,-24,-42,-34,-127,-41,-9,-26,-78,127,104,-52,40,-110,18,59,-4,8,111,-51,-86, -11,46,39,-48,114,26,27,-102,-11,-43,-21,37,19,-9,1,65,6,3,6,-20,-18,37,75,-6,31,-14,48,15,-16,37,13,11,22,7,-23,79,15,-68,-10,-12,-45,6,39,-39,-13,-44,-74,4,-27,-2,100,61,-13,-46,-25,4,84,-37,0,-39,19,-41,-54,-12,-7,-44,127,-35,-6,46,2,67,59,6,-25,29,25,80,-66,-62,-10,-51,-59,-60,55,-21,-20,-5,-67,-23,-72,73,15,61,-28,-7, 
  /* [0][1][][] */ -127,-32,77,-7,33,64,-59,-33,8,-62,-22,-18,-127,14,21,127,-12,38,23,34,-7,-3,114,-23,33,34,63,0,-13,1,-24,-19,-114,-11,77,-45,5,-27,-90,3,-69,34,105,-31,-82,127,-45,-94,39,65,39,-62,-63,50,90,5,47,-38,24,-17,-11,-17,72,-84,-61,12,-40,-16,-5,-4,-92,1,26,121,45,-77,-94,-80,-70,-104,-75,9,38,-80,-21,15,-71,57,-42,127,4,-71,127,6,-45,-28, -13,127,127,91,-127,-127,127,-51,127,98,-83,-78,-113,127,-11,25,127,-127,127,127,127,-85,115,-118,-127,-127,127,127,-84,127,-40,127,-127,127,56,-119,127,46,-23,1,127,17,-127,-81,127,-35,127,127,127,-127,127,-127,70,127,-127,127,-127,127,-127,127,-114,73,91,-127,127,127,-9,127,-127,-127,35,-114,-22,127,127,57,36,-72,94,-79,-5,127,71,127,22,53,-74,127,11,78,-56,-32,-100,-29,-127,-18, -103,-36,99,-57,31,55,-57,16,-33,-62,-1,127,-94,2,22,77,-13,47,29,8,-3,-13,54,-55,67,8,56,-14,-18,10,-10,-6,-58,-28,66,127,15,-36,-107,-11,-57,24,56,-60,-73,-78,-53,-83,11,65,70,-23,92,-35,112,-14,39,-29,25,-40,-13,-20,-80,-37,-26,-14,-73,-20,-1,-1,-78,45,39,-53,-5,127,-26,-65,-52,-33,-127,-22,26,-64,9,20,-127,66,-57,-84,127,127,-22,-14,-78,-11, 
  /* [0][2][][] */ -14,-101,48,4,21,12,-30,45,-12,47,36,-37,68,-5,17,-34,16,-1,-41,-4,-46,-21,-5,-46,26,53,1,-15,25,13,-35,1,-64,4,11,-35,-12,-34,15,-16,-87,11,-3,-7,-10,50,-46,-25,-63,0,-61,-26,12,-8,30,3,59,-55,4,-28,0,32,30,-45,-90,-32,123,-46,45,23,-127,-36,-14,26,-31,-36,-127,4,-57,-63,-6,50,-127,-42,-9,-11,77,-4,-127,24,19,-38,-22,-54,21,-18, 26,-91,76,-52,-38,0,46,127,-51,127,127,-38,-60,13,127,73,19,-48,83,-50,-32,-72,50,11,32,-23,15,-15,13,59,-73,-41,-78,-20,-114,-35,-92,-44,66,-58,-48,-87,-66,127,12,-31,-46,15,50,-8,-66,-13,53,83,-56,-19,-42,-53,21,-73,127,38,88,-14,-109,-31,-17,-33,107,27,36,20,-22,-11,-5,-7,-65,-127,1,-2,-46,25,-62,-67,17,-127,-15,-7,8,18,74,-20,-22,-127,-23,127, 12,-6,18,-25,26,18,-43,55,-23,52,5,46,94,-3,0,-16,15,-2,-12,-46,-58,0,-127,-36,23,66,-36,-27,12,3,-52,27,66,10,15,-22,-10,-74,13,-16,-55,3,-29,5,-30,-5,-45,9,-64,-4,-33,11,13,1,41,15,82,-45,-10,-26,0,32,-9,-34,-25,-15,-50,-49,97,11,-30,30,-36,-24,-22,92,-68,16,120,-73,-12,34,-86,-9,4,-10,55,29,-80,-41,75,8,19,-77,-8,-13, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0057449634186923504, 0.010199064388871193, 0.0040797190740704536, 0.0061985156498849392, 0.0098189152777194977, 0.029256869107484818, 0.0045553888194262981, 0.0055603957735002041, 0.013885262422263622, 0.0063054356724023819, 0.010955515317618847, 0.0070687476545572281, 0.0059378086589276791, 0.0063033429905772209, 0.0092163067311048508, 0.0058552296832203865, 0.0086746690794825554, 0.01640821248292923, 0.0067152664996683598, 0.017155721783638, 0.012761212885379791, 0.0083945784717798233, 0.0041536153294146061, 0.0069945040158927441, 0.080487161874771118, 0.0057748761028051376, 0.0070257405750453472, 0.0069780317135155201, 0.018824929371476173, 0.0045817354694008827, 0.0092018349096179008, 0.011775403283536434, 0.0024318951182067394, 0.011667345650494099, 0.0087202833965420723, 0.0080796796828508377, 0.013184882700443268, 0.0044930488802492619, 0.0087710032239556313, 0.0089460713788866997, 0.010378925129771233, 0.012825930491089821, 0.0067245513200759888, 0.0085450978949666023, 0.0084263868629932404, 0.0087235206738114357, 0.0091368202120065689, 0.020339734852313995, 0.00780909089371562, 0.013602026738226414, 0.0051287272945046425, 0.0081698568537831306, 0.0081830685958266258, 0.0081191472709178925, 0.010996256023645401, 0.010056436993181705, 0.011244583874940872, 0.014584292657673359, 0.014694811776280403, 0.0090010641142725945, 0.015817845240235329, 0.00998699851334095, 0.0082449102774262428, 0.0045585581101477146, 0.0095444917678833008, 0.020446473732590675, 0.0057437368668615818, 0.010980174876749516, 0.0077325673773884773, 0.019083814695477486, 0.0089368382468819618, 0.0075778653845191002, 0.026084721088409424, 0.0061578978784382343, 0.0090605979785323143, 0.0058337030932307243, 0.0041926540434360504, 0.0063560553826391697, 0.0066931634210050106, 0.003966891672462225, 0.0039687608368694782, 0.0083048725500702858, 0.0054329643025994301, 0.0072181536816060543, 0.0058266767300665379, 0.011965361423790455, 0.007621868047863245, 0.0080902138724923134, 0.0046330257318913937, 0.0086703039705753326, 0.0043146256357431412, 0.0079922564327716827, 0.012556803412735462, 0.0051139765419065952, 0.0047465921379625797, 0.012777904979884624, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 643, 9005, 174, 1248, 4620, 7463, 577, 2310, 7944, -1758, 13640, 2259, 2589, 274, 3543, 1686, 4115, 4521, -171, 13117, 818, 4728, -994, 1163, -9722, 931, 2802, 2456, 8098, 1370, 5987, 5245, 1246, 11475, 3847, 4032, 4281, 2424, 2649, 2740, 28116, 2882, 1154, 618, 1735, 7166, 7093, 13328, 1414, -1956, 1886, 2411, 2261, -2690, 8071, 521, -456, 16650, 1184, 1115, 4393, 9134, 2819, -588, 18407, 15255, 2238, 2687, 2290, 2532, 2561, 890, -4317, 4026, 1014, 3386, 905, 8481, 4649, 6127, 1700, 2827, 1312, 11739, -464, 6814, 5616, 2399, -464, 3388, 1940, 9262, 6129, 1680, 4401, 3292, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00021430852939374745, 8.6360865680035204e-05, 0.00024721771478652954, 0.00018702600209508091, 0.00015855205128900707, 9.5480296295136213e-05, 0.00021218773326836526, 0.00014406966511160135, 0.00010153915354749188, 0.0001262863224837929, 7.0507761847693473e-05, 0.00015185298980213702, 0.00014605709293391556, 0.00029248447390273213, 0.00014002941315993667, 0.0001426204398740083, 0.00016619628877379, 0.00012187628453830257, 0.00013563636457547545, 6.9771966082043946e-05, 0.00019736174726858735, 0.00014205416664481163, 0.00017803270020522177, 0.00018609207472763956, 7.7288481406867504e-05, 0.00017280195606872439, 0.00016173119365703315, 0.00019453659479040653, 0.00011751660349546, 0.00027944508474320173, 0.00011683933553285897, 0.00013577939535025507, 0.00019602917018346488, 7.6174626883585006e-05, 0.00014470294991042465, 0.00016215544019360095, 0.00014945329166948795, 0.00013382658653426915, 0.00016800696903374046, 0.00015184501535259187, 3.7655983760487288e-05, 0.00014304065553005785, 0.00021390079928096384, 0.00016676490486133844, 0.00020450029114726931, 0.00011032405018340796, 0.00011022575199604034, 7.1982234658207744e-05, 0.00019708910258486867, 0.00018298834038432688, 0.00020997990213800222, 0.00021682257647626102, 0.00015831534983590245, 0.00013596193457487971, 9.7150899819098413e-05, 0.00022101901413407177, 0.00028757803374901414, 5.5541666370118037e-05, 0.0001394467253703624, 0.00027656700694933534, 0.00014156720135360956, 9.4136295956559479e-05, 0.00017169199418276548, 0.0002008426672546193, 5.3500651119975373e-05, 5.9284055168973282e-05, 0.00020665106421802193, 0.00018988225201610476, 0.00023336101730819792, 0.00013992005551699549, 0.0001913392188725993, 0.00015084324695635587, 0.00013186554133426398, 0.00013888017565477639, 0.00025190910673700273, 0.00018208783876616508, 0.00021660166385117918, 9.6390234830323607e-05, 0.0001454811281291768, 0.00014081319386605173, 0.00020175942336209118, 0.00013013283023610711, 0.00015640926721971482, 7.5358868343755603e-05, 0.0001967903517652303, 0.00010111460142070428, 0.00013015422155149281, 0.0002042454871116206, 0.00024734172620810568, 0.0001610686449566856, 0.00015590063412673771, 9.3537644715979695e-05, 9.3227688921615481e-05, 0.00014528784959111363, 0.00012261753727216274, 0.00018342398107051849, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 83,-3,-14,62,-127,-24,93,36,38,90,-4,60,20,0,56,77, 
  /* [1][0][][] */ 19,48,2,-79,127,76,33,-69,-13,22,-84,61,-28,126,-62,-13, 
  /* [2][0][][] */ -36,79,65,-30,61,86,7,54,23,-5,52,-31,43,-127,-21,22, 
  /* [3][0][][] */ 127,-83,26,30,30,11,-61,55,87,55,-66,-30,-41,44,-60,16, 
  /* [4][0][][] */ -67,14,10,-23,-71,14,-69,-29,-9,24,-10,-63,-64,8,-40,127, 
  /* [5][0][][] */ -96,18,23,43,127,56,29,-35,-37,49,-42,24,-55,97,-42,-54, 
  /* [6][0][][] */ -127,12,-37,15,-17,-62,122,-8,-6,-47,-40,42,19,20,-52,14, 
  /* [7][0][][] */ -20,81,66,-107,88,15,127,74,53,-23,10,55,81,56,-67,52, 
  /* [8][0][][] */ -44,-48,-76,74,-54,46,-79,-54,51,-17,79,28,127,51,-72,-19, 
  /* [9][0][][] */ -46,-127,-84,92,-45,-28,31,106,52,37,72,38,-92,16,-2,63, 
  /* [10][0][][] */ -50,-51,-39,56,-39,127,32,-31,44,9,50,-38,66,114,-2,106, 
  /* [11][0][][] */ -86,-78,-18,23,31,29,33,42,48,35,53,-127,-58,28,-111,40, 
  /* [12][0][][] */ -63,-115,-69,100,-119,-127,-16,54,75,73,-63,122,-5,-5,-85,-40, 
  /* [13][0][][] */ -50,-21,-30,18,3,-26,28,27,-11,127,2,-23,56,33,24,-8, 
  /* [14][0][][] */ -70,-39,-85,-1,9,37,-5,-77,75,-66,65,-3,59,-32,-127,-64, 
  /* [15][0][][] */ 1,-127,80,-59,-61,-28,19,12,-3,-67,-112,-46,111,-81,-42,-45, 
  /* [16][0][][] */ -21,-48,8,-30,21,32,-8,-43,62,-127,65,-24,4,-12,-52,-88, 
  /* [17][0][][] */ 2,52,41,-127,39,46,-44,-22,55,19,-10,47,48,-84,-2,-86, 
  /* [18][0][][] */ 71,21,-45,-120,72,26,126,-29,27,77,-6,93,2,78,-63,-127, 
  /* [19][0][][] */ -119,-15,-7,-91,-68,92,28,-37,-32,-50,-28,-127,-52,-13,32,-28, 
  /* [20][0][][] */ -23,60,57,-82,63,4,-15,70,-72,-97,35,-47,-56,127,-15,0, 
  /* [21][0][][] */ 10,-82,-127,-32,95,55,97,38,-82,-79,-19,38,126,-2,17,50, 
  /* [22][0][][] */ 41,-51,46,-14,99,20,98,63,-11,127,-14,8,40,8,89,-7, 
  /* [23][0][][] */ -58,-43,-65,80,16,17,5,-32,-31,-15,24,-44,26,99,63,127, 
  /* [24][0][][] */ 55,-24,55,6,-9,-81,5,-30,39,84,-127,40,-11,-70,98,-92, 
  /* [25][0][][] */ 25,-68,31,127,66,15,-36,54,-68,72,53,-42,-1,67,72,-15, 
  /* [26][0][][] */ -22,43,24,36,-63,108,-6,26,-77,-20,-108,47,-5,39,62,-127, 
  /* [27][0][][] */ 42,7,17,-50,-43,1,-70,15,-80,-26,-72,-22,-79,45,1,127, 
  /* [28][0][][] */ -86,-25,22,18,29,-8,-127,12,8,-52,10,-28,-11,-64,-49,-8, 
  /* [29][0][][] */ -48,-76,-14,61,-42,46,127,8,51,16,-85,74,10,-5,-15,84, 
  /* [30][0][][] */ 46,-34,-58,25,-127,12,46,-39,-24,-23,12,-22,-1,51,-13,78, 
  /* [31][0][][] */ -103,-12,12,127,-19,-24,-37,-23,-43,-41,-2,-49,-19,-32,-23,87, 
  /* [32][0][][] */ -108,-61,-99,-32,-73,-73,-8,-13,127,96,-68,-28,36,70,21,-44, 
  /* [33][0][][] */ 11,0,-89,70,-66,-127,16,34,-71,41,-31,-72,-9,70,57,69, 
  /* [34][0][][] */ 39,127,3,-1,-66,-39,82,-71,-46,-62,-61,28,-34,72,8,45, 
  /* [35][0][][] */ 37,16,-12,-16,-127,28,63,9,15,8,-14,-26,-20,3,80,76, 
  /* [36][0][][] */ -7,-11,-46,48,127,-33,-8,65,14,41,-56,-38,26,-9,35,-6, 
  /* [37][0][][] */ -99,78,26,-52,15,-115,-87,3,5,14,-6,37,27,-123,47,-127, 
  /* [38][0][][] */ 15,71,38,-23,-127,-71,-79,-8,-20,-88,54,32,-61,-44,62,45, 
  /* [39][0][][] */ -9,-11,-6,38,-64,25,35,-40,-33,0,27,-70,-74,55,65,127, 
  /* [40][0][][] */ 80,42,45,127,33,-67,-92,77,22,95,29,33,-21,16,48,6, 
  /* [41][0][][] */ -33,12,38,-2,-122,118,7,65,-53,23,-98,9,-37,-11,37,-127, 
  /* [42][0][][] */ 48,-98,46,49,124,-56,114,48,-63,-127,-49,2,40,-70,-37,29, 
  /* [43][0][][] */ -9,19,-70,-69,79,47,81,47,-127,-40,-57,-15,26,4,-72,43, 
  /* [44][0][][] */ -10,-66,-41,-89,12,29,56,0,-36,-117,-75,49,-21,63,106,127, 
  /* [45][0][][] */ 15,-57,-34,-34,-107,127,11,-101,56,-28,14,-53,33,67,-50,66, 
  /* [46][0][][] */ 32,-9,-27,-11,53,-35,-90,62,12,-10,64,60,-63,-127,47,-126, 
  /* [47][0][][] */ -102,-17,-40,-52,0,100,62,12,37,92,28,90,-84,48,-26,127, 
  /* [48][0][][] */ 30,-23,-76,-118,81,-55,12,44,54,-72,-3,26,-78,11,-83,-127, 
  /* [49][0][][] */ 25,7,10,22,6,-29,6,40,-6,127,-30,21,-19,-6,72,43, 
  /* [50][0][][] */ 28,6,7,8,-127,-49,-4,-48,57,24,18,87,-13,-58,29,-12, 
  /* [51][0][][] */ -30,-28,-11,-71,12,127,14,7,7,-15,32,-53,84,43,-1,45, 
  /* [52][0][][] */ 50,-15,-2,-69,49,-79,35,-17,31,-28,124,-64,32,-32,-52,127, 
  /* [53][0][][] */ -52,-72,53,-63,-29,-127,-4,-50,-18,112,-104,48,-75,-39,22,-66, 
  /* [54][0][][] */ 64,83,79,-3,-102,-87,-99,-127,-30,49,27,32,-71,-37,50,14, 
  /* [55][0][][] */ 16,10,-28,84,-14,-3,10,6,37,127,-6,68,13,10,22,31, 
  /* [56][0][][] */ 7,-44,-48,8,-37,29,-9,41,127,-9,44,-19,-50,-28,9,39, 
  /* [57][0][][] */ 20,69,55,-127,121,62,-27,-21,54,-2,4,68,-53,-97,56,-79, 
  /* [58][0][][] */ 97,-75,8,-110,-18,25,-60,127,81,87,23,31,36,-54,88,-71, 
  /* [59][0][][] */ -64,33,24,-29,-1,-37,7,37,-4,-14,-63,-61,-127,-28,30,-12, 
  /* [60][0][][] */ 11,15,69,-16,-17,-24,10,-44,34,127,-23,54,-14,-26,-59,-62, 
  /* [61][0][][] */ 31,39,13,7,-78,-127,-59,-111,-53,17,-46,49,-81,17,89,18, 
  /* [62][0][][] */ -27,54,-37,15,-65,127,10,46,-98,-20,-26,1,-41,-7,30,-19, 
  /* [63][0][][] */ 43,28,-48,-89,-5,-57,127,-26,-21,-98,-38,52,-15,108,44,-20, 
  /* [64][0][][] */ -37,2,-38,9,29,-79,23,65,-127,-27,-31,-65,-42,85,38,92, 
  /* [65][0][][] */ -127,-52,-49,-59,43,75,-26,-49,-117,-79,16,-6,-73,78,-10,63, 
  /* [66][0][][] */ -30,54,-3,33,-43,127,-33,28,-56,5,-35,56,-43,69,57,-55, 
  /* [67][0][][] */ 6,-11,-64,17,-16,-25,31,-81,-55,21,6,127,-43,12,0,-102, 
  /* [68][0][][] */ -14,-127,9,27,-17,20,-6,50,49,25,29,18,-28,36,21,11, 
  /* [69][0][][] */ 17,127,57,-94,32,51,-4,6,-41,116,38,98,22,-48,0,-106, 
  /* [70][0][][] */ 61,22,63,-95,114,-9,-127,-44,-126,-66,-28,18,-35,8,-95,-13, 
  /* [71][0][][] */ -11,-117,57,-12,54,-36,-3,39,-46,73,-127,-86,0,46,10,94, 
  /* [72][0][][] */ 45,18,115,-127,-104,-38,-125,-109,1,64,-57,63,65,124,-119,85, 
  /* [73][0][][] */ 0,-50,-61,-37,35,-84,31,-45,83,76,121,-26,7,-16,-86,127, 
  /* [74][0][][] */ -3,12,-39,118,-94,14,49,40,105,43,63,127,72,12,-35,31, 
  /* [75][0][][] */ -42,40,-39,1,-34,127,8,30,-57,14,-19,37,-19,50,2,-32, 
  /* [76][0][][] */ -38,89,-23,2,-113,-26,-30,45,83,41,-47,-93,-11,-127,-102,28, 
  /* [77][0][][] */ 53,54,-93,103,18,39,60,-1,17,-16,127,-8,30,31,24,17, 
  /* [78][0][][] */ 0,-29,11,-84,62,-97,39,-61,18,51,105,-26,17,-12,-42,127, 
  /* [79][0][][] */ -52,48,4,26,-24,-31,17,-36,-127,-44,13,-20,84,50,-47,-16, 
  /* [80][0][][] */ -39,-22,127,-35,48,44,18,-72,-70,34,-83,-72,20,-77,55,104, 
  /* [81][0][][] */ 87,102,-14,-38,14,-28,65,63,-88,110,-56,12,-11,32,111,127, 
  /* [82][0][][] */ 29,83,-57,-29,-37,-50,46,-127,82,22,-36,83,91,8,63,-63, 
  /* [83][0][][] */ 7,8,31,12,31,10,-12,-113,61,12,52,34,30,-17,-27,-127, 
  /* [84][0][][] */ -127,-40,-12,-27,39,62,62,-7,67,70,36,75,24,97,-59,5, 
  /* [85][0][][] */ 108,26,103,-54,59,32,-43,63,8,127,-40,-3,-3,46,116,56, 
  /* [86][0][][] */ -56,60,-25,7,23,65,27,14,61,20,127,-10,-69,26,5,-2, 
  /* [87][0][][] */ 16,-53,39,-43,31,-127,35,-30,22,-17,65,-26,36,-35,-34,80, 
  /* [88][0][][] */ -63,53,35,-3,95,-11,35,9,-46,-28,54,-23,44,127,51,-71, 
  /* [89][0][][] */ -27,31,0,17,-17,106,-15,16,-38,19,-72,47,0,81,36,-127, 
  /* [90][0][][] */ 69,-73,51,26,122,-30,14,64,1,-50,-127,-62,-1,-7,-10,23, 
  /* [91][0][][] */ 3,53,25,-34,-7,-39,-75,-33,-71,50,-127,-48,-40,-2,40,-29, 
  /* [92][0][][] */ 80,32,127,27,-109,-117,2,27,-45,91,-41,-49,2,-124,50,-23, 
  /* [93][0][][] */ -13,-127,-91,94,-59,-78,-52,67,64,44,6,18,-22,67,20,36, 
  /* [94][0][][] */ 76,-4,127,-18,-7,-48,-35,29,45,82,-11,4,-5,1,74,-35, 
  /* [95][0][][] */ -30,-1,35,-24,127,-18,49,40,-44,-8,-84,6,0,-17,-63,51, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.003831017529591918, 0.0015438022091984749, 0.0044193081557750702, 0.0033433102071285248, 0.0028343047015368938, 0.0017068228917196393, 0.0037931059487164021, 0.0025754149537533522, 0.0018151320982724428, 0.0022575168404728174, 0.0012604093644768, 0.0027145512867718935, 0.0026109428144991398, 0.0052285045385360718, 0.0025031908880919218, 0.0025495085865259171, 0.0029709546361118555, 0.0021786822471767664, 0.0024246599059551954, 0.0012472561793401837, 0.0035280738957226276, 0.0025393855758011341, 0.0031825443729758263, 0.0033266150858253241, 0.0013816227437928319, 0.0030890386551618576, 0.0028911356348544359, 0.0034775708336383104, 0.0021007477771490812, 0.004995410330593586, 0.0020886408165097237, 0.0024272166192531586, 0.0035042525269091129, 0.0013617111835628748, 0.0025867358781397343, 0.0028987196274101734, 0.0026716536376625299, 0.0023923078551888466, 0.0030033225193619728, 0.0027144085615873337, 0.00067314511397853494, 0.0025570204015821218, 0.0038237289991229773, 0.0029811193235218525, 0.0036556837148964405, 0.0019721724092960358, 0.00197041523642838, 0.0012867673067376018, 0.0035232000518590212, 0.0032711322419345379, 0.0037536381278187037, 0.0038759591989219189, 0.0028300734702497721, 0.0024304797407239676, 0.0017366867978125811, 0.0039509753696620464, 0.0051407963037490845, 0.00099287275224924088, 0.002492774510756135, 0.0049439612776041031, 0.0025306805036962032, 0.0016827972140163183, 0.0030691968277096748, 0.0035902992822229862, 0.00095638720085844398, 0.0010597723303362727, 0.0036941312719136477, 0.0033943690359592438, 0.0041716033592820168, 0.0025012358091771603, 0.0034204139374196529, 0.0026965008582919836, 0.0023572519421577454, 0.002482646843418479, 0.0045031723566353321, 0.0032550347968935966, 0.0038720099255442619, 0.0017230890225619078, 0.0026006465777754784, 0.0025172019377350807, 0.0036066875327378511, 0.0023262777831405401, 0.0027960001025348902, 0.0013471286511048675, 0.0035178596153855324, 0.0018075426341965795, 0.0023266600910574198, 0.0036511288490146399, 0.004421524703502655, 0.0028792917728424072, 0.0027869076002389193, 0.0016720956191420555, 0.0016665548318997025, 0.0025971916038542986, 0.0021919331047683954, 0.0032789199613034725, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -9013, 9297, -7079, -3333, 9607, -17264, -40556, -6215, -9354, 9189, -17412, -10105, 3703, -14639, -4487, -6059, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00010089205898111686, 0.00011364723468432203, 0.00010376136924605817, 0.00013687780301552266, 0.00012498884461820126, 0.00013605643471237272, 7.7366559708025306e-05, 0.00010435880540171638, 9.1918052930850536e-05, 6.2657760281581432e-05, 0.00015755099593661726, 9.6384974312968552e-05, 7.693758379900828e-05, 0.00010999588266713545, 0.00010955879406537861, 0.00011602152517298236, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 43,52,41,-42,76,77,-42,48,-12,127,-18,50,-44,38,-17,49,31,84,53,-50,-86,88,-11,56,69,55,40,55,-50,-53,-19,73,-32,16,-78,60,56,-127,-36,38,17,-9,62,-10,5,-94,-55,2, 
  /* [1][0][][] */ -43,-1,-64,-40,10,102,-53,12,-5,-29,-39,31,47,22,-25,-21,-34,-36,-37,26,-42,37,-106,-63,-45,-36,35,70,-10,-23,38,-60,16,-46,-52,60,21,-55,127,-54,3,33,-45,-17,20,66,39,15, 
  /* [2][0][][] */ -5,-11,50,-49,-36,-89,-7,32,84,93,-79,20,85,-61,127,97,-89,-39,-55,69,59,-101,-69,-90,22,-47,39,-80,34,62,-36,3,22,-23,32,31,-63,-25,-18,-64,28,11,61,-58,-5,-113,100,-55, 
  /* [3][0][][] */ 48,12,-22,-4,31,91,29,-29,56,-58,24,-23,-50,23,-2,34,-31,-60,54,-103,20,4,5,0,-47,93,127,46,-7,-51,18,32,66,-33,97,28,-39,-45,13,36,28,53,-16,20,25,16,-12,-23, 
  /* [4][0][][] */ 96,-24,17,-27,105,76,48,14,62,-11,-86,40,30,-21,16,-7,-89,-90,-40,-80,-5,22,-54,-63,-60,111,-87,127,-31,-17,3,52,41,-47,-7,-22,-13,11,-11,6,-26,-27,6,59,-45,86,-22,-52, 
  /* [5][0][][] */ -4,-5,-61,9,-22,70,28,-27,47,58,39,100,66,-20,34,6,-25,127,-33,44,20,-12,-72,-6,31,-14,-82,-34,-7,42,0,-14,-41,-1,57,11,-55,4,-75,22,98,-30,22,38,-24,21,-41,20, 
  /* [6][0][][] */ 38,40,24,67,22,-6,103,-31,-16,72,90,111,28,25,-41,62,41,-36,-65,64,72,-82,-28,50,-104,92,79,-2,59,37,-49,10,88,-46,-108,4,57,29,33,5,9,53,65,-31,72,127,29,-6, 
  /* [7][0][][] */ -98,-15,-11,16,-49,-52,27,45,66,127,-73,-55,-96,3,-8,-9,-67,74,10,123,-56,30,-2,44,-38,-65,-32,-78,20,49,-26,12,-24,-4,0,-39,-8,-54,108,36,14,56,22,-4,57,40,-24,-14, 
  /* [8][0][][] */ 15,-96,76,-68,69,-68,80,-57,-12,-127,29,13,-15,14,40,19,-11,16,-30,96,-8,66,-17,49,90,-13,-71,-41,-123,-24,-60,-127,32,-80,7,96,24,39,93,25,36,34,57,125,3,-76,-64,107, 
  /* [9][0][][] */ 35,-57,13,-63,42,72,-31,71,30,-37,-48,-24,2,-28,112,-24,4,-124,76,58,-74,56,61,-50,-25,-86,-39,71,38,80,-41,-13,-60,65,-13,127,-24,-44,-49,-17,-18,28,34,86,90,66,-68,15, 
  /* [10][0][][] */ -15,8,-12,0,32,8,-42,-41,43,31,56,8,-27,-16,32,-46,-48,127,1,34,-4,-14,13,54,-35,44,5,86,39,9,-17,-16,61,3,14,25,-8,-36,-30,41,-74,11,13,-14,11,40,31,24, 
  /* [11][0][][] */ -20,53,-21,14,28,63,5,26,27,6,-127,-65,75,0,8,-43,12,31,-69,-57,-3,-13,92,0,44,7,-17,32,-11,27,-16,26,35,-1,-61,13,34,76,94,-2,39,-30,49,16,-65,-9,74,1, 
  /* [12][0][][] */ -65,7,38,33,-30,-53,6,-11,-25,-36,-122,25,83,-127,29,44,64,107,86,-126,-35,72,-32,-83,19,-14,49,-23,17,-10,-36,83,81,73,23,-58,-50,-41,25,-14,-22,17,63,26,53,-11,-50,-58, 
  /* [13][0][][] */ -64,-103,-26,-75,42,32,67,10,-91,28,95,-62,47,14,119,20,117,17,11,-91,103,-79,106,-9,-77,6,-11,12,-56,-90,-127,44,47,-49,-45,33,9,-48,86,-38,-3,39,46,80,72,-32,92,-79, 
  /* [14][0][][] */ 65,16,-33,-11,-47,25,-75,-7,-16,51,34,21,-13,-86,25,-38,48,-113,27,9,71,-51,32,6,-2,114,-79,-4,-74,-40,-95,-6,127,37,75,-13,-76,12,-30,67,-1,-18,104,-19,-49,-37,-46,47, 
  /* [15][0][][] */ -70,18,38,-6,78,1,4,14,6,84,-30,51,57,-20,-23,-18,1,29,24,-29,15,-43,-38,-31,38,-42,-26,56,-38,10,0,21,-55,-6,127,-3,-70,17,46,30,-56,-21,10,-2,-18,-36,10,26, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0042879125103354454, 0.004830007441341877, 0.0044098580256104469, 0.0058173066936433315, 0.0053120255470275879, 0.0057823983952403069, 0.0032880785875022411, 0.004435249138623476, 0.0039065172895789146, 0.0026629546191543341, 0.0066959173418581486, 0.0040963613428175449, 0.0032698472496122122, 0.0046748248860239983, 0.0046562487259507179, 0.0049309148453176022, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 13263, 777, 18562, 1210, 20350, -4687, 37267, 464, 2888, 53759, 6791, 27733, 2938, 12515, 80858, 39300, 4965, -1885, 9762, 54325, 846, 19149, -1251, 16316, 12840, 34395, 5559, -4888, -4468, 13940, 20166, 399, 1376, 10529, 654, 13319, 8197, 23825, 3810, 22016, 24184, 2152, 2537, 8282, 2985, -1825, 24126, 12035, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.3066220870241523e-05, 0.00012157231685705483, 6.7938730353489518e-05, 5.757101098424755e-05, 9.9405420769471675e-05, 7.5163188739679754e-05, 5.1879876991733909e-05, 8.0286510637961328e-05, 7.7265576692298055e-05, 3.9590599044458941e-05, 5.2002753363922238e-05, 6.8282417487353086e-05, 6.7431428760755807e-05, 0.00011409472790546715, 1.9616391000454314e-05, 4.6686411224072799e-05, 8.8434419012628496e-05, 5.5817246902734041e-05, 0.00023082279949449003, 4.3515025026863441e-05, 5.9665439039235935e-05, 6.7034285166300833e-05, 6.4561427279841155e-05, 9.6186369773931801e-05, 7.2625516622792929e-05, 6.650673458352685e-05, 4.400935722514987e-05, 4.3639720388455316e-05, 0.0002073887299047783, 0.00010169933375436813, 7.5474403274711221e-05, 0.00032955329515971243, 7.6044321758672595e-05, 0.00020122119167353958, 8.4446975961327553e-05, 7.8156583185773343e-05, 6.1794962675776333e-05, 7.5435869803186506e-05, 7.6870695920661092e-05, 8.4681843873113394e-05, 5.2304414566606283e-05, 0.00020016533380839974, 0.00012674117169808596, 0.00010166604624828324, 0.00020794494776055217, 7.9944882600102574e-05, 6.7432069045025855e-05, 0.00010391551768407226, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -91,81,-127,127,-87,57,-127,79,-76,-101,86,-100,86,-73,-89,-106,40,94,89,-127,126,-125,47,-27,-97,-26,127,100,-87,-94,-62,36,86,-116,96,-88,-106,-127,68,-62,25,-111,106,-109,120,127,-66,-127, -40,77,-78,102,-106,127,-101,121,-101,-110,104,-93,127,-127,-74,-118,55,127,111,-101,89,-127,71,-76,-125,-93,96,126,42,-112,-127,22,118,-127,91,-88,-99,-81,105,-44,-78,96,105,-52,-2,95,-127,-76, -127,51,-23,66,-23,81,-100,40,-29,-87,60,-38,26,1,-97,-110,31,102,28,-30,58,-89,7,36,-46,-20,63,51,89,14,-84,-13,13,-103,16,-36,-73,-13,45,-127,-127,-57,83,18,-70,82,-26,-69, 
  /* [0][1][][] */ -20,68,-23,67,-99,106,-63,101,-104,-127,124,-109,59,-43,-87,-115,77,98,-18,-97,127,-46,94,-63,-127,-40,112,127,-127,-40,-42,-15,124,12,113,-127,-103,-72,91,-67,-57,-112,68,-76,127,68,-8,-39, -37,103,-58,59,-127,109,-31,127,-127,-123,127,-80,67,-49,-96,-127,127,106,-47,-90,101,-49,104,-99,-86,-127,77,101,36,-127,-79,41,115,16,127,-53,-127,-33,127,-56,-108,127,127,-10,-82,70,-85,38, -74,127,-5,74,-12,59,-57,59,-9,-85,57,3,43,-17,-61,-46,102,63,-113,-80,32,-27,43,-77,-51,-42,68,30,120,-31,-100,-109,70,-5,57,-88,-33,24,49,-99,-65,-68,63,-6,-106,80,28,-51, 
  /* [0][2][][] */ -50,90,46,39,-79,98,-80,-7,-50,-22,26,-91,64,-87,-127,-104,64,39,-36,-35,-1,-46,127,-127,-89,0,103,71,-71,-69,-49,118,127,15,81,-75,-74,-15,19,-72,-106,-40,20,-68,67,74,6,-2, -76,84,-74,48,-85,47,-75,57,-18,-26,10,-127,13,-96,-85,-31,72,68,-99,-29,14,-59,112,-97,-10,-73,54,80,13,-102,-81,127,71,23,100,-24,-81,-18,35,-78,-25,92,100,-127,-56,31,0,48, -60,44,-119,53,-29,27,-33,-9,33,-32,52,-41,66,-70,-116,-27,86,70,-127,-21,3,-25,81,-90,43,-20,53,26,59,-27,-72,-25,82,1,69,-24,0,29,24,-78,-5,-36,85,-2,-74,56,57,-93, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0039553144015371799, 0.0051668235100805759, 0.0028873959090560675, 0.0024467678740620613, 0.0042247301898896694, 0.0031944354996085167, 0.0022048947867006063, 0.0034121766220778227, 0.003283787053078413, 0.0016826004721224308, 0.002210116945207119, 0.0029020027723163366, 0.0028658357914537191, 0.0048490259796380997, 0.00083369656931608915, 0.0019841725006699562, 0.0037584628444164991, 0.0023722329642623663, 0.0098099689930677414, 0.0018493884708732367, 0.0025357811246067286, 0.0028489571996033192, 0.0027438607066869736, 0.0040879207663238049, 0.0030865843873471022, 0.0028265360742807388, 0.0018703977111726999, 0.0018546880455687642, 0.0088140210136771202, 0.004322221502661705, 0.0032076621428132057, 0.014006014913320541, 0.0032318837475031614, 0.0085519002750515938, 0.0035889963619410992, 0.0033216546289622784, 0.0026262858882546425, 0.0032060244120657444, 0.0032670043874531984, 0.0035989782772958279, 0.0022229375317692757, 0.0085070263594388962, 0.0053864996880292892, 0.0043208068236708641, 0.0088376598432660103, 0.0033976573031395674, 0.0028658630326390266, 0.0044164094142615795, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2429, -1775, 743, -1295, 5838, -585, 5639, -2652, 1036, 627, 3176, 3103, 561, -483, 657, 4550, -3157, 6665, 18829, 1107, -456, 3511, 31, 4582, 1986, 3090, 513, -1004, 14061, -318, 2799, -1768, -1046, 11197, -1290, 2841, 1921, 3428, 1892, 4252, 1643, 12218, -3451, 1965, 22572, -324, 2169, 2335, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00019746623001992702, 0.00024452246725559235, 0.00027403249987401068, 0.00022285025625023991, 0.00014793472655583173, 0.00019100599456578493, 0.00014390752767212689, 0.00015850026102270931, 0.00018674047896638513, 0.00022583600366488099, 0.00015173308202065527, 0.00018484893371351063, 0.00026549678295850754, 0.00024842086713761091, 0.00025657747755758464, 0.00017699896125122905, 0.00017194292740896344, 0.00013340305304154754, 5.8917761634802446e-05, 0.00026447462732903659, 0.0003130724944639951, 0.00015217157488223165, 0.00016903078358154744, 0.00016597686044406146, 0.00021942805324215442, 0.00016393442638218403, 0.00028114084852859378, 0.0002667297376319766, 7.0848851464688778e-05, 0.00026748896925710142, 0.00017814773309510201, 0.00015267086564563215, 0.00015735109627712518, 8.8595821580383927e-05, 0.00019492331193760037, 0.00020613438391592354, 0.00021688941342290491, 0.00013171666068956256, 0.0001353157713310793, 0.00016980434884317219, 0.00023580841661896557, 7.9171972174663097e-05, 0.00014327085227705538, 0.00022916847956366837, 5.0759226724039763e-05, 0.00024215444864239544, 0.00020437076454982162, 0.00022107906988821924, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 42,34,127,-33,34,81,-66,-50, 
  /* [1][0][][] */ 7,-69,-127,-7,50,21,4,6, 
  /* [2][0][][] */ -127,-10,-58,-41,39,13,-46,-46, 
  /* [3][0][][] */ 24,54,126,-77,-41,-127,-2,-21, 
  /* [4][0][][] */ -127,6,-25,-20,48,-5,-37,-84, 
  /* [5][0][][] */ -84,17,-60,-23,26,38,-87,-127, 
  /* [6][0][][] */ -17,-127,-124,47,90,10,15,36, 
  /* [7][0][][] */ -66,-127,-59,-63,-80,-49,3,75, 
  /* [8][0][][] */ 125,52,16,26,127,-56,-117,17, 
  /* [9][0][][] */ -50,60,-77,87,-61,-48,127,-34, 
  /* [10][0][][] */ -26,127,52,65,119,-34,-11,70, 
  /* [11][0][][] */ -68,-31,-30,-2,-89,62,127,-19, 
  /* [12][0][][] */ 60,33,-127,21,-3,-39,-69,-9, 
  /* [13][0][][] */ 75,-51,-88,15,9,-127,-28,-27, 
  /* [14][0][][] */ 16,-82,46,21,127,-106,-65,13, 
  /* [15][0][][] */ -21,-27,10,127,51,94,-54,7, 
  /* [16][0][][] */ 104,28,-66,15,100,-95,-127,-18, 
  /* [17][0][][] */ 68,127,72,79,45,71,24,-90, 
  /* [18][0][][] */ 45,37,-30,-7,127,-81,20,-11, 
  /* [19][0][][] */ 14,127,23,28,-114,9,32,-33, 
  /* [20][0][][] */ -45,11,38,-127,16,34,-16,78, 
  /* [21][0][][] */ -56,107,40,-108,68,91,24,127, 
  /* [22][0][][] */ -94,-60,-67,21,-127,115,122,-32, 
  /* [23][0][][] */ 97,23,-127,5,12,-36,-69,-9, 
  /* [24][0][][] */ -38,40,37,-31,-28,76,-127,82, 
  /* [25][0][][] */ -98,-59,-127,2,-51,-82,33,112, 
  /* [26][0][][] */ 41,-8,-57,-23,110,-14,127,-33, 
  /* [27][0][][] */ 127,-60,26,55,16,29,-13,85, 
  /* [28][0][][] */ -4,90,48,28,127,-64,70,-79, 
  /* [29][0][][] */ -5,-19,-46,-30,-61,35,127,-40, 
  /* [30][0][][] */ 76,-87,-26,-67,-127,6,4,-49, 
  /* [31][0][][] */ 30,6,7,-13,-127,0,-20,-21, 
  /* [32][0][][] */ 52,-70,-75,52,-31,-127,102,-118, 
  /* [33][0][][] */ 58,127,22,42,101,-15,-6,-17, 
  /* [34][0][][] */ -112,-56,127,-11,-16,93,112,11, 
  /* [35][0][][] */ -36,82,127,-10,-47,-48,-27,26, 
  /* [36][0][][] */ -75,13,127,-68,-10,87,37,48, 
  /* [37][0][][] */ -3,-100,-15,-127,-61,-85,111,34, 
  /* [38][0][][] */ 47,-13,76,-70,53,71,-127,14, 
  /* [39][0][][] */ 0,107,-127,-53,-17,-20,-17,96, 
  /* [40][0][][] */ 85,-45,31,70,18,21,18,127, 
  /* [41][0][][] */ -13,105,83,45,-46,69,-127,60, 
  /* [42][0][][] */ 53,-127,-100,-46,-87,-17,8,-60, 
  /* [43][0][][] */ -2,-57,26,-61,127,-30,21,4, 
  /* [44][0][][] */ -41,127,95,-11,25,31,-85,-15, 
  /* [45][0][][] */ -35,21,22,95,-114,66,-127,31, 
  /* [46][0][][] */ -37,-52,56,67,-127,-103,-17,-25, 
  /* [47][0][][] */ -30,87,35,-94,-127,2,0,73, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0024726670235395432, 0.0030619041062891483, 0.0034314277581870556, 0.0027905250899493694, 0.0018524348270148039, 0.002391772111877799, 0.0018020062707364559, 0.0019847361836582422, 0.0023383593652397394, 0.0028279125690460205, 0.00189999770373106, 0.0023146735038608313, 0.0033245438244193792, 0.0031107196118682623, 0.0032128563616424799, 0.0022163763642311096, 0.0021530648227781057, 0.0016704695299267769, 0.00073776667704805732, 0.0033117441926151514, 0.0039202854968607426, 0.0019054884323850274, 0.0021165991201996803, 0.0020783578511327505, 0.0027476723771542311, 0.0020527825690805912, 0.003520438214763999, 0.0033399828244000673, 0.00088716746540740132, 0.0033494899980723858, 0.0022307613398879766, 0.0019117405172437429, 0.0019703463185578585, 0.0011093945940956473, 0.0024408246390521526, 0.002581209409981966, 0.0027158835437148809, 0.0016493524890393019, 0.001694420468993485, 0.0021262855734676123, 0.0029527868609875441, 0.00099138938821852207, 0.0017940339166671038, 0.0028696416411548853, 0.00063560571288689971, 0.0030322517268359661, 0.0025591254234313965, 0.0027683463413268328, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -5221, -4574, 31368, -2767, 2814, -11056, -2851, -15756, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 6.6507993324194103e-05, 8.7623520812485367e-05, 0.00012336124200373888, 7.7650081948377192e-05, 0.00011260605970164761, 9.9989949376322329e-05, 8.8742446678224951e-05, 6.6642351157497615e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 14,-40,-3,-72,26,-19,85,76,-86,-118,-7,-7,-39,10,-68,54,-88,24,49,127,85,-29,26,102,64,67,25,14,-98,-54,-93,-75,-47,104,51,-44,11,-26,96,4,10,4,13,-118,56,11,-14,-57, 
  /* [1][0][][] */ 6,67,-21,-8,-41,50,-35,-59,-25,54,-17,8,48,52,-23,-15,-19,-99,76,-42,127,-2,-48,16,37,-8,-97,58,13,-14,58,28,-45,-2,8,-15,-7,85,-13,-31,71,18,-3,4,89,27,-26,66, 
  /* [2][0][][] */ -24,-43,127,5,121,-61,-9,52,-42,42,9,51,4,-59,-57,-113,-74,-111,-21,12,-118,26,-70,-87,-95,15,-16,-36,-60,28,-46,-33,-13,-8,40,7,41,-42,-56,1,48,-47,50,-63,-93,-73,-81,-86, 
  /* [3][0][][] */ 58,5,81,13,32,-31,19,70,-62,-40,23,-19,-55,76,-1,26,67,24,-66,55,-127,-85,115,12,20,10,-74,-23,-40,60,109,-80,20,-94,-29,43,-26,-94,-23,81,-54,-56,41,0,-71,-81,55,4, 
  /* [4][0][][] */ 31,-7,69,-43,-9,-7,-12,20,-53,-5,-27,15,50,-87,22,-98,28,57,4,-58,11,48,24,30,37,-5,84,-33,27,28,-127,-24,-15,-20,8,34,63,-3,49,-5,-40,-7,-70,25,-19,-74,18,43, 
  /* [5][0][][] */ 13,-71,67,24,49,-20,33,-5,-84,12,-66,51,52,10,6,-49,87,91,-8,-28,100,-39,119,-127,-51,97,-8,82,33,41,-35,-76,-11,-61,-44,32,80,49,67,26,-93,50,47,13,53,-38,92,7, 
  /* [6][0][][] */ -60,59,-115,109,23,43,38,67,-14,-9,52,-58,-75,-29,-34,81,-111,37,-41,67,-3,80,-90,-108,25,-14,71,63,-36,-13,-40,-6,89,65,-40,-24,-13,12,75,56,69,50,-127,-16,-12,112,-53,-35, 
  /* [7][0][][] */ 68,76,-83,-2,37,46,102,74,58,109,-109,7,-57,-53,-71,-59,26,53,120,102,95,15,127,34,111,114,-73,124,-36,48,4,-94,8,-77,21,27,-9,104,-56,56,-77,42,1,-105,83,-29,86,-19, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0028265896253287792, 0.003723999485373497, 0.0052428524941205978, 0.0033001285046339035, 0.0047857575118541718, 0.00424957275390625, 0.0037715539801865816, 0.0028322997968643904, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -2417, 21396, -1282, -1582, -1050, -786, 4210, 1314, -4437, 590, -538, 217, 1658, -3978, -7606, 5592, 7788, 2098, 300, -9451, -9225, 885, 12613, -3715, -1940, -201, 7455, -4193, -1447, 4333, -6031, 9944, 1696, -310, 5643, 2064, 30, -573, 13280, 1208, 7045, -4032, 3150, 6302, -4304, 11246, -4095, -9008, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00025678696692921221, 0.00011238119623158127, 0.00051499868277460337, 0.00026468466967344284, 0.00016953279555309564, 0.00029022584203630686, 0.00024542762548662722, 0.00027257416513748467, 0.00010641461994964629, 0.00041460426291450858, 0.00040531708509661257, 0.0010357665596529841, 0.00032741570612415671, 0.00017377398035023361, 0.00017130858032032847, 0.0005085865268483758, 0.00016448429960291833, 0.00013123766984790564, 0.00023001783119980246, 0.00019942614017054439, 0.00020387677068356425, 0.00018676184117794037, 0.00010722035221988335, 0.00030300102662295103, 0.00020701774337794632, 0.00039460472180508077, 0.00088033179054036736, 0.00018927996279671788, 0.00023536400112789124, 0.00038513090112246573, 0.00017452209431212395, 0.00012451638758648187, 0.00018780193931888789, 0.00020722782937809825, 0.00012468217755667865, 0.00029556351364590228, 0.002152326051145792, 0.00038046456757001579, 0.00011261030158493668, 0.00014578414265997708, 0.00022096923203207552, 8.5601466707885265e-05, 0.00028275974909774959, 0.00017637599376030266, 0.00022295906092040241, 6.8784000177402049e-05, 6.4565050706733018e-05, 0.0001386564108543098, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 8,-84,10,33,-34,-100,-62,19,-41,17,-53,3,48,48,0,12,98,-8,72,38,48,33,-55,101,76,-25,-12,-34,-32,47,-26,-106,66,-18,-127,-73,-28,-24,-9,-74,-23,65,9,-3,18,63,127,51, -127,-87,-20,127,-74,58,-96,126,18,20,-25,-12,51,75,13,-33,-26,72,6,25,14,127,22,127,127,-43,15,21,67,-127,-8,-83,116,-18,-63,-127,19,27,-48,-57,-122,29,-127,-107,79,59,61,127, 27,-56,9,7,-33,43,15,127,8,-44,-33,-6,-18,22,38,-8,-60,5,-68,-25,-20,11,127,32,-32,-6,29,35,17,13,0,-42,49,-4,11,73,19,25,12,117,9,2,29,-65,27,63,6,34, 
  /* [0][1][][] */ -16,-62,-20,26,35,-113,100,-109,-25,1,-13,17,127,45,6,-29,-15,-76,33,62,115,-71,28,28,-14,127,-127,-54,127,-88,3,-127,-63,-1,-81,1,0,-75,-67,4,117,127,19,-127,-50,-67,21,113, 91,-127,127,21,127,23,-51,-72,55,127,127,-127,-117,127,127,127,127,127,83,127,127,80,-15,4,94,-86,-93,123,15,120,127,55,-127,127,113,95,-127,127,-127,-105,32,40,-86,-23,127,-127,-41,71, 28,-6,-34,-8,-48,127,-124,110,118,-76,4,57,-42,33,67,-74,-10,-51,-127,22,6,-104,-31,-15,24,-23,-37,127,-71,-41,3,-5,2,29,112,-29,47,19,-15,-81,103,-4,49,10,-46,88,87,-21, 
  /* [0][2][][] */ -10,-47,10,-31,39,-54,-9,-22,-28,-13,-20,-9,-26,26,12,-4,-51,-32,24,-10,38,-49,80,-32,-104,2,-2,-79,15,-26,-3,-32,-1,-27,-59,9,-6,-21,-3,0,-30,-10,-28,-1,-19,1,0,48, 50,-38,-29,-40,58,16,127,-117,127,-28,12,-9,-99,11,-23,-61,-29,65,-14,73,-3,-10,-26,-59,-118,73,84,-14,-87,-14,-24,-14,-1,-7,-30,-33,45,-53,2,127,-127,-14,-39,49,18,74,13,-66, 30,-8,7,-44,13,35,-9,-101,-63,-32,-6,0,25,29,21,3,7,-18,-38,9,-25,-50,-41,-37,-19,-34,1,8,-10,-19,-16,1,60,1,6,-40,-2,23,14,-16,-25,-27,3,-7,-7,14,69,-8, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.010913445614278316, 0.004776200745254755, 0.021887443959712982, 0.011249097995460033, 0.0072051435708999634, 0.012334598228335381, 0.010430674068629742, 0.011584402061998844, 0.0045226211659610271, 0.01762068085372448, 0.017225975170731544, 0.044020079076290131, 0.013915167190134525, 0.0073853940702974796, 0.0072806142270565033, 0.021614925935864449, 0.0069905826821923256, 0.0055776005610823631, 0.0097757577896118164, 0.0084756109863519669, 0.0086647626012563705, 0.0079373782500624657, 0.0045568649657070637, 0.012877543456852436, 0.0087982537224888802, 0.016770699992775917, 0.037414100021123886, 0.0080443983897566795, 0.010002969764173031, 0.016368063166737556, 0.0074171889573335648, 0.0052919462323188782, 0.0079815825447440147, 0.0088071823120117188, 0.0052989926189184189, 0.012561448849737644, 0.091473855078220367, 0.016169743612408638, 0.0047859377227723598, 0.0061958259902894497, 0.0093911923468112946, 0.003638062160462141, 0.01201728917658329, 0.0074959793128073215, 0.0094757601618766785, 0.002923320047557354, 0.0027440146077424288, 0.0058928974904119968, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3188, 4786, 12668, 2943, 2020, -1425, 8153, 15355, 4033, -295, 16010, -2279, 8392, -1573, 3059, 55214, -457, 4432, 242, 4382, 3538, 2806, 517, 18737, 7968, 4101, 46821, 1646, 6799, 5200, 622, 714, 796, 1293, 226, 209, -4375, 60, 3424, 2894, 10811, 2295, 3644, 5098, 3300, 5002, 1289, 3665, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.0002150291547877714, 0.00018104244372807443, 7.1280141128227115e-05, 0.00015831361815799028, 0.00021668362023774534, 0.0002686524239834398, 0.00011567078036023304, 6.4985732024069875e-05, 0.00014323805226013064, 0.00038089911686256528, 6.9735404395032674e-05, 0.00020450794545467943, 9.9079574283678085e-05, 0.00020592487999238074, 0.00018223808729089797, 2.1890456991968676e-05, 0.00027108448557555676, 0.00013429544924292713, 0.00031908121309243143, 0.00016838463488966227, 0.00021291003213264048, 0.0002479319809935987, 0.00027620047330856323, 5.3097268391866237e-05, 0.00010364820627728477, 0.00014020723756402731, 2.6332896595704369e-05, 0.00028113787993788719, 0.0001115742270485498, 0.00015895905380602926, 0.00041508590220473707, 0.00043982337228953838, 0.0002151238004444167, 0.00026872067246586084, 0.00028474011924117804, 0.00033469247864559293, 0.00016148215217981488, 0.00036476663080975413, 0.00018549954984337091, 0.00021048850612714887, 9.2289927124511451e-05, 0.00026254807016812265, 0.00021826264855917543, 0.0001521227095508948, 0.00018981879111379385, 0.00016204462735913694, 0.00040250224992632866, 0.00014866195851936936, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 30,113,-81,-110,-19,83,10,127, 
  /* [1][0][][] */ 59,-48,36,-127,-55,96,-64,-66, 
  /* [2][0][][] */ -48,122,127,35,127,26,79,16, 
  /* [3][0][][] */ 76,42,-122,46,-39,-78,-127,-19, 
  /* [4][0][][] */ -24,44,24,-99,-34,108,127,31, 
  /* [5][0][][] */ 5,48,-127,-78,88,79,17,-21, 
  /* [6][0][][] */ 25,127,67,41,37,-5,-24,-70, 
  /* [7][0][][] */ 127,-52,-10,34,30,-17,87,53, 
  /* [8][0][][] */ 48,118,29,81,126,127,109,-90, 
  /* [9][0][][] */ 47,58,-127,-51,12,63,24,53, 
  /* [10][0][][] */ -94,-51,39,-77,-40,-33,-47,127, 
  /* [11][0][][] */ 21,-115,-127,-33,15,-29,17,-36, 
  /* [12][0][][] */ 54,-68,-127,13,-52,30,-32,46, 
  /* [13][0][][] */ -28,-6,-121,114,-127,-13,36,-16, 
  /* [14][0][][] */ -53,-32,-127,0,27,26,2,-78, 
  /* [15][0][][] */ 10,-89,-119,9,-127,-16,-42,-14, 
  /* [16][0][][] */ 127,-68,-30,61,-77,39,43,105, 
  /* [17][0][][] */ -17,127,126,-31,-39,-20,-45,-28, 
  /* [18][0][][] */ -21,-127,53,93,-33,-120,14,-70, 
  /* [19][0][][] */ 127,-48,-52,27,-102,14,34,98, 
  /* [20][0][][] */ -47,-127,90,71,-15,-111,-27,-72, 
  /* [21][0][][] */ 10,-43,-36,-8,127,-26,37,41, 
  /* [22][0][][] */ -127,33,-98,66,36,65,-58,-107, 
  /* [23][0][][] */ -93,-47,89,-1,-127,126,121,-56, 
  /* [24][0][][] */ -91,36,-15,-59,-127,102,111,-28, 
  /* [25][0][][] */ 39,-57,-127,-64,-125,52,-6,-82, 
  /* [26][0][][] */ 12,39,-49,127,-63,-26,-73,4, 
  /* [27][0][][] */ 3,-106,43,92,33,-48,1,-127, 
  /* [28][0][][] */ -11,127,75,44,123,-78,-12,-74, 
  /* [29][0][][] */ 56,50,-40,18,25,-127,-63,-5, 
  /* [30][0][][] */ 34,1,53,-127,10,-6,16,-46, 
  /* [31][0][][] */ 10,-42,24,62,-7,34,31,127, 
  /* [32][0][][] */ -127,-57,25,-90,-52,104,59,84, 
  /* [33][0][][] */ -49,46,52,-30,18,127,-84,58, 
  /* [34][0][][] */ -1,123,-127,-61,-74,16,-42,65, 
  /* [35][0][][] */ 48,-127,19,58,-23,-71,24,-70, 
  /* [36][0][][] */ 18,-26,-82,-16,-127,-53,-15,11, 
  /* [37][0][][] */ -65,-127,52,106,-34,-70,20,-74, 
  /* [38][0][][] */ -68,2,54,-67,-127,-98,-56,109, 
  /* [39][0][][] */ 127,-98,111,96,-35,-72,-4,-27, 
  /* [40][0][][] */ -11,56,57,43,-127,-14,-103,53, 
  /* [41][0][][] */ 97,127,-44,-54,42,-25,-12,11, 
  /* [42][0][][] */ 5,-37,-7,11,127,12,38,16, 
  /* [43][0][][] */ 127,17,94,38,-90,-26,85,86, 
  /* [44][0][][] */ 52,5,-21,-30,67,-127,-98,3, 
  /* [45][0][][] */ 55,1,29,2,75,-127,-10,-52, 
  /* [46][0][][] */ 56,-40,-23,127,23,71,30,74, 
  /* [47][0][][] */ -98,-79,18,117,-104,32,127,-111, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0031691149342805147, 0.0026682163588702679, 0.0010505317477509379, 0.0023332373239099979, 0.0031934985890984535, 0.0039594187401235104, 0.0017047642031684518, 0.0009577643359079957, 0.0021110526286065578, 0.005613718181848526, 0.0010277653345838189, 0.003014052752405405, 0.0014602418523281813, 0.0030349355656653643, 0.0026858379133045673, 0.00032262312015518546, 0.0039952625520527363, 0.0019792558159679174, 0.0047026416286826134, 0.0024816647637635469, 0.0031378832645714283, 0.0036540389992296696, 0.0040706624276936054, 0.00078255130210891366, 0.0015275746118277311, 0.0020663843024522066, 0.00038809611578471959, 0.0041434299200773239, 0.0016443888889625669, 0.0023427498526871204, 0.0061175655573606491, 0.0064821480773389339, 0.0031705098226666451, 0.0039604245685040951, 0.0041965199634432793, 0.0049327216111123562, 0.0023799354676157236, 0.0053759566508233547, 0.0027339055668562651, 0.0031021945178508759, 0.0013601755490526557, 0.0038694522809237242, 0.0032167704775929451, 0.0022419954184442759, 0.0027975628618150949, 0.002388225169852376, 0.0059321066364645958, 0.0021909906063228846, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 9011, 11652, -2564, 1142, -1875, 6799, -13449, -12448, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00019699055701494217, 0.00012396764941513538, 0.00013143706019036472, 0.00012215673632454127, 0.00016777751443441957, 0.00013372917601373047, 0.00016302909352816641, 0.00013871274131815881, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -49,-7,24,11,-39,-9,4,12,-41,-10,-63,-61,-26,-63,-5,-26,51,-42,35,35,-15,31,-31,19,-10,-33,58,-24,4,-28,24,8,76,26,30,-127,18,5,-17,-47,17,-19,51,56,33,12,29,5, 
  /* [1][0][][] */ -20,44,57,-16,10,45,-52,-18,5,47,-20,-89,21,113,-20,48,-13,22,-16,-68,17,-103,-12,-2,-48,7,0,-103,-3,16,41,-72,34,74,-29,4,127,-30,16,41,-24,59,-70,-28,125,-24,-25,-15, 
  /* [2][0][][] */ -6,-35,-70,16,12,45,18,7,-16,31,-11,28,72,-86,14,-56,23,-85,20,15,-26,39,-14,24,-19,68,-28,-76,4,9,16,-93,-52,-80,39,-27,106,35,-13,-59,2,40,86,11,127,19,12,20, 
  /* [3][0][][] */ 17,33,-69,45,14,-30,-61,-98,16,-16,-20,-6,13,36,31,74,-8,14,-33,10,22,-84,18,-71,-52,-17,127,8,-32,17,-58,25,10,-77,11,-14,-22,-39,-15,110,-38,-31,1,22,42,-7,-35,47, 
  /* [4][0][][] */ -31,-70,-7,13,32,-34,-6,-9,37,-28,79,-86,-1,32,3,23,-28,-27,23,-20,5,-53,9,-34,10,-3,47,38,48,25,-8,26,-9,-5,-4,17,-63,88,44,-35,41,-17,-17,-12,-73,13,127,11, 
  /* [5][0][][] */ 57,-30,10,16,23,-54,37,-127,11,-43,-27,117,-80,53,14,-62,9,-91,27,15,-59,54,-53,-47,-64,80,-39,-5,-26,31,-45,-42,11,50,40,-1,-39,-10,-50,-58,23,-30,-55,0,-45,59,87,19, 
  /* [6][0][][] */ 51,-1,14,-17,-32,-8,-35,14,-44,5,-42,127,-38,-38,-3,52,8,47,18,41,51,-77,1,9,20,51,-56,10,-13,-47,2,60,19,14,-2,1,30,-10,13,4,-5,-13,39,58,2,-34,72,-14, 
  /* [7][0][][] */ -19,-29,-22,60,17,38,-4,18,21,-2,43,14,104,83,63,47,46,45,-21,-6,20,-14,-83,-17,6,3,-31,60,22,-35,-25,-7,6,2,36,-80,-70,39,55,43,-22,27,74,127,-51,-20,-98,57, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0083720982074737549, 0.005268624983727932, 0.0055860746651887894, 0.0051916609518229961, 0.0071305441670119762, 0.0056834900751709938, 0.0069287363439798355, 0.0058952914550900459, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 11453, 6461, 3664, -1192, 1065, -187, 2709, 43603, -5055, 994, 9584, 48944, 4271, -456, -256, 8485, 478, 13386, 890, 9814, 16982, 602, 3330, -4018, 10216, 2527, 4892, 13343, 1492, -5712, -7765, 12947, 2251, -321, -1472, 7379, -6731, 9401, -5221, 22986, 2603, -1407, 5498, 511, 310, -304, 3717, -765, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.9277237344067544e-05, 0.00010480135097168386, 0.00012809876352548599, 0.0001354666892439127, 0.00088729121489450336, 0.00015809071192052215, 6.1473467212636024e-05, 8.461496327072382e-05, 0.00014098586689215153, 7.8048913564998657e-05, 5.732462159357965e-05, 0.00011037349759135395, 9.0156347141601145e-05, 7.8557677625212818e-05, 0.00016406737267971039, 0.00016816417337395251, 0.00011744315270334482, 0.00038497816422022879, 9.1177629656158388e-05, 9.0523331891745329e-05, 0.00012103506014682353, 0.00049125816440209746, 0.00012181861529825255, 0.00024186304653994739, 0.00010415601718705148, 6.7861677962355316e-05, 5.1759216148639098e-05, 8.5957326518837363e-05, 0.00021707790438085794, 0.00045713852159678936, 0.00027569316443987191, 8.3242368418723345e-05, 7.5645330070983618e-05, 0.00011288946552667767, 0.00014553111395798624, 6.6516913648229092e-05, 8.754508598940447e-05, 4.5080163545208052e-05, 0.00014840651419945061, 5.2000083087477833e-05, 0.00017469082376919687, 0.00016853549459483474, 6.0861351812491193e-05, 0.00012108020018786192, 8.5340150690171868e-05, 0.0003570631961338222, 6.2094208260532469e-05, 0.0002666296495590359, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -86,-90,-23,-24,127,-33,4,-80,-93,-100,4,-58,93,60,54,-115,52,-36,-14,-72,-105,95,-34,-34,12,76,64,-35,79,-59,23,-100,-90,-87,52,69,7,127,116,-70,-127,-33,57,73,62,-127,80,71, -103,-120,-84,29,-93,127,14,-127,-45,49,80,-127,127,55,69,-81,-84,-38,19,-68,-38,127,-118,127,-107,88,46,-94,86,-27,-5,-78,-88,-90,77,117,99,108,127,-92,-106,-33,91,91,127,102,90,67, -66,-50,-47,125,-33,-45,-30,-86,123,22,63,-69,8,50,-13,-46,-114,-24,26,-62,-77,12,-48,-44,-126,17,9,-45,34,66,86,-98,-1,3,-15,33,51,122,84,-23,-14,94,69,37,54,22,44,-99, 
  /* [0][1][][] */ -13,-100,-10,-114,-92,-78,120,-121,-106,-127,113,-34,86,58,-101,-87,127,-127,-68,-90,-127,73,-51,-34,22,86,127,-70,-127,-61,-3,-33,-84,-127,-127,22,50,92,23,-119,25,-27,68,124,67,95,120,-127, -60,-127,-127,-107,-28,105,127,-100,122,90,127,-47,82,127,31,-127,75,-61,-127,-127,-109,82,-127,106,-81,100,109,-127,-124,127,-17,-127,-127,-102,59,127,127,101,16,-127,64,-71,127,127,83,-11,127,115, -60,-68,-114,127,85,-52,89,-72,92,37,16,-46,29,72,62,-57,-7,-20,-13,-42,-90,17,-47,-52,-127,15,31,-72,-46,58,127,-75,-71,-13,63,63,39,49,16,-84,28,127,78,7,38,-27,53,9, 
  /* [0][2][][] */ -122,-72,30,31,-44,-28,21,-52,56,-47,36,-74,13,30,-53,41,-124,-36,104,-45,-71,-7,-23,-18,47,101,118,-33,2,52,-12,1,-5,-88,-40,33,6,33,-53,-103,11,-4,23,45,37,29,39,-82, -127,-49,-55,-53,88,15,88,-29,127,16,-40,-96,-5,42,-127,6,48,-4,66,-35,-59,7,-67,67,-46,115,78,-25,44,23,-24,-11,-71,-34,-63,69,24,50,-91,-102,25,-47,63,56,34,-94,34,25, -58,-8,-55,3,-27,-15,30,-42,-26,17,-31,-95,8,22,28,-3,21,24,0,-20,-32,-1,15,-36,-44,127,76,-32,7,-27,47,-76,-100,-2,-9,71,-5,70,-87,-44,14,27,21,15,14,5,19,55, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0029442824888974428, 0.0044540571980178356, 0.0054441974498331547, 0.0057573341764509678, 0.037709876894950867, 0.0067188553512096405, 0.0026126222219318151, 0.0035961358807981014, 0.0059918994084000587, 0.0033170788083225489, 0.0024362963158637285, 0.0046908734366297722, 0.0038316445425152779, 0.0033387013245373964, 0.0069728633388876915, 0.0071469773538410664, 0.004991333931684494, 0.016361571848392487, 0.0038750492967665195, 0.0038472414016723633, 0.0051439898088574409, 0.020878471434116364, 0.0051772911101579666, 0.01027917955070734, 0.0044266306795179844, 0.0028841213788837194, 0.0021997666917741299, 0.0036531863734126091, 0.0092258108779788017, 0.01942838728427887, 0.011716959066689014, 0.0035378006286919117, 0.0032149264588952065, 0.0047978023067116737, 0.0061850724741816521, 0.0028269686736166477, 0.0037206660490483046, 0.0019159069051966071, 0.0063072764314711094, 0.0022100035566836596, 0.0074243601411581039, 0.0071627581492066383, 0.0025866073556244373, 0.0051459083333611488, 0.0036269563715904951, 0.015175185166299343, 0.0026390037965029478, 0.011331759393215179, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1193, -575, -320, 1704, 20942, 2260, -266, 6440, 1214, 1332, -236, 12921, 542, 690, -452, 254, 4338, 10960, 1033, -640, 1612, -1374, 95, 2633, -326, -902, 1625, -58, 4376, 6529, 2571, -129, 204, -332, 2965, -88, -134, -376, 2202, 493, 1660, 2048, 209, -714, 664, 1381, 1429, -1137, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00037840360892005265, 0.00037946429802104831, 0.00034198700450360775, 0.00026174003141932189, 5.5412365327356383e-05, 0.00033136116690002382, 0.00062291859649121761, 0.00015822646673768759, 0.00033088659984059632, 0.0005487761227414012, 0.00035814120201393962, 9.1577843704726547e-05, 0.00025347163318656385, 0.0003346984158270061, 0.00033780571538954973, 0.00036215817090123892, 0.00020748762472067028, 8.5619358287658542e-05, 0.00042465442675165832, 0.00034064849023707211, 0.00034136642352677882, 0.00021120088058523834, 0.00043108745012432337, 0.00030159906600601971, 0.00044058539788238704, 0.00068384548649191856, 0.00030022594728507102, 0.00082116451812908053, 0.0002026525471592322, 0.00013123214012011886, 0.00028395577101036906, 0.00081298412987962365, 0.00044229879858903587, 0.00033472417271696031, 0.00031085519003681839, 0.0003856915864162147, 0.00040319759864360094, 0.00056521251099184155, 0.00027184103964827955, 0.00073354569030925632, 0.00040788017213344574, 0.00033610875834710896, 0.0003080508322454989, 0.00035635262611322105, 0.00039405762800015509, 0.00032317906152456999, 0.00028633436886593699, 0.00023572413192596287, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -35,35,11,-16,-102,-81,-127,36, 
  /* [1][0][][] */ 66,-61,-30,-67,127,-121,94,65, 
  /* [2][0][][] */ -107,90,-85,-127,53,-11,-49,31, 
  /* [3][0][][] */ 66,-5,112,22,61,127,103,-8, 
  /* [4][0][][] */ -38,-127,32,14,-23,-106,-2,-39, 
  /* [5][0][][] */ 127,-19,40,97,-26,-1,-17,-25, 
  /* [6][0][][] */ 16,37,127,-24,58,-24,-35,37, 
  /* [7][0][][] */ 36,-2,-127,-22,-28,126,79,-48, 
  /* [8][0][][] */ 19,127,-27,-8,83,100,82,-14, 
  /* [9][0][][] */ -75,127,-61,9,33,-68,45,97, 
  /* [10][0][][] */ 15,-127,-1,-20,-68,-108,-65,-84, 
  /* [11][0][][] */ -127,-85,125,46,-5,-93,82,56, 
  /* [12][0][][] */ -25,41,-127,64,51,-54,-60,77, 
  /* [13][0][][] */ 121,-127,91,72,23,31,23,-75, 
  /* [14][0][][] */ -20,104,-72,-127,3,-103,-35,-25, 
  /* [15][0][][] */ 43,120,68,3,6,-61,127,-125, 
  /* [16][0][][] */ -127,-115,-50,125,-63,34,-18,66, 
  /* [17][0][][] */ -59,-118,-127,102,-69,96,-46,115, 
  /* [18][0][][] */ -82,-62,-25,76,3,83,1,127, 
  /* [19][0][][] */ 55,-127,114,-121,12,-109,0,-26, 
  /* [20][0][][] */ -5,59,15,41,56,127,37,-44, 
  /* [21][0][][] */ 18,108,54,-33,45,-57,97,-127, 
  /* [22][0][][] */ -3,14,121,13,-32,127,28,-46, 
  /* [23][0][][] */ -95,-33,58,-64,94,67,-40,-127, 
  /* [24][0][][] */ -103,-81,17,-101,118,127,-60,-116, 
  /* [25][0][][] */ 127,15,-52,-23,24,17,-68,-12, 
  /* [26][0][][] */ -127,-48,-110,-25,-70,-55,-28,-17, 
  /* [27][0][][] */ 67,41,-5,-61,-127,-30,90,95, 
  /* [28][0][][] */ -71,-99,18,23,-37,-127,16,11, 
  /* [29][0][][] */ 127,53,79,-90,43,-8,-75,-71, 
  /* [30][0][][] */ -96,-89,71,-53,63,82,-81,-127, 
  /* [31][0][][] */ 30,38,-13,127,13,-61,-10,18, 
  /* [32][0][][] */ -27,127,-3,55,35,87,-12,53, 
  /* [33][0][][] */ -46,127,-106,41,20,-48,-42,13, 
  /* [34][0][][] */ -127,-115,-49,89,-40,4,27,91, 
  /* [35][0][][] */ -45,127,-27,-14,74,94,51,58, 
  /* [36][0][][] */ 69,24,-20,8,-94,5,69,127, 
  /* [37][0][][] */ -67,109,42,21,-127,99,-20,-82, 
  /* [38][0][][] */ 27,68,40,-3,127,78,110,49, 
  /* [39][0][][] */ -30,-43,22,-10,18,46,-61,127, 
  /* [40][0][][] */ -49,-55,-37,127,-41,-14,19,14, 
  /* [41][0][][] */ 127,48,65,118,-29,-17,-5,-18, 
  /* [42][0][][] */ -65,25,-77,-127,45,-112,17,78, 
  /* [43][0][][] */ 23,-9,85,-1,33,127,105,5, 
  /* [44][0][][] */ -26,-14,-64,127,39,9,-29,-26, 
  /* [45][0][][] */ 34,73,93,-112,46,-55,-10,-127, 
  /* [46][0][][] */ -37,-127,-30,45,-16,46,-60,122, 
  /* [47][0][][] */ 47,26,109,-2,74,115,127,-8, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0037466166540980339, 0.0037571187131106853, 0.0033860518597066402, 0.0025915175210684538, 0.00054864404955878854, 0.0032808443065732718, 0.0061675873585045338, 0.0015666179824620485, 0.003276145551353693, 0.0054334942251443863, 0.0035459962673485279, 0.00090672256192192435, 0.0025096512399613857, 0.0033138867001980543, 0.0033446522429585457, 0.0035857688635587692, 0.0020543583668768406, 0.00084772688569501042, 0.0042045512236654758, 0.003372799139469862, 0.0033799074590206146, 0.0020911237224936485, 0.004268245305866003, 0.0029861661605536938, 0.004362285602837801, 0.0067708310671150684, 0.0029725709464401007, 0.008130442351102829, 0.0020064855925738811, 0.0012993442360311747, 0.0028114779852330685, 0.00804944708943367, 0.0043792501091957092, 0.0033141416497528553, 0.003077812260016799, 0.0038187757600098848, 0.0039921049028635025, 0.0055962326005101204, 0.0026915287598967552, 0.0072629181668162346, 0.0040384675376117229, 0.0033278507180511951, 0.0030500460416078568, 0.0035282874014228582, 0.0039016089867800474, 0.0031998322810977697, 0.0028350288048386574, 0.0023339311592280865, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -9760, -4160, 14123, -9488, 18833, 5054, -6637, 12391, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00022173042816575617, 0.00026130067999474704, 0.00017032153846230358, 0.00024347916769329458, 0.00021816784283146262, 0.00018308326252736151, 0.00016246075392700732, 0.0002440707030473277, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 10,-15,-17,-75,-19,-33,40,-31,31,12,-18,-5,95,127,-13,-87, 
  /* [1][0][][] */ 127,-47,-36,7,-35,64,-53,-47,-40,64,-29,-49,-10,2,-52,-3, 
  /* [2][0][][] */ -49,-106,52,35,49,-51,-100,-28,35,-127,13,-119,48,-26,-67,36, 
  /* [3][0][][] */ 31,9,7,7,7,66,-60,-18,127,49,9,19,5,-17,14,14, 
  /* [4][0][][] */ -62,-35,-43,-127,6,35,59,-92,16,-26,-42,-39,-108,24,-40,-3, 
  /* [5][0][][] */ 91,57,48,-30,34,-48,-127,-113,-19,-67,81,54,-56,65,43,-27, 
  /* [6][0][][] */ 100,41,-92,-78,28,-74,-26,-77,-33,8,-127,86,81,-78,17,71, 
  /* [7][0][][] */ -127,3,107,-19,-56,5,-6,-69,-57,74,67,-21,54,-19,24,22, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0094235427677631378, 0.011105278506875038, 0.0072386651299893856, 0.010347864590585232, 0.0092721330001950264, 0.0077810385264456272, 0.0069045820273458958, 0.010373004712164402, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 22894, -283, 541, 2861, 740, 348, 6489, 534, -1535, -4, -195, 2674, 5742, -485, 467, -2259, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00010850624676095322, 0.00020659285655710846, 0.00012705383414868265, 0.0001926522672874853, 0.00094952643848955631, 0.00068231846671551466, 0.00021357127116061747, 0.0011650916421785951, 0.00050878914771601558, 0.0012559903552755713, 0.00029886601259931922, 0.00018055050168186426, 7.4930445407517254e-05, 0.00047846612869761884, 0.0001257125404663384, 0.00028419881709851325, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -6,-3,14,7,-26,10,12,18,-30,-10,-15,-21,16,-6,-5,0, -4,-7,20,3,7,-4,19,-28,-26,11,-12,100,16,26,9,2, -5,-3,-3,14,-7,-15,5,13,-1,2,-10,-15,0,-2,2,-1, 
  /* [0][1][][] */ 3,-12,14,9,127,-22,-127,-18,127,127,-16,-8,94,-31,-4,-17, -127,127,127,5,-96,-90,-3,-105,7,-103,127,127,127,127,127,127, 5,7,3,5,-20,127,14,-9,9,-12,-18,-15,12,-6,-22,-7, 
  /* [0][2][][] */ 0,-22,-3,-18,-16,16,43,11,-5,-7,-9,-1,-19,-7,-31,-10, 19,-24,-4,-127,8,-15,-4,127,-5,1,-3,-28,11,-63,-32,-32, 0,-10,-1,0,-1,-4,3,0,11,1,-14,-13,6,-9,-14,-9, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0046115154400467873, 0.0087801963090896606, 0.0053997877985239029, 0.0081877214834094048, 0.040354873985052109, 0.028998535126447678, 0.0090767787769436836, 0.049516394734382629, 0.021623538807034492, 0.053379587829113007, 0.012701804749667645, 0.0076733962632715702, 0.0031845439225435257, 0.020334810018539429, 0.0053427829407155514, 0.012078450061380863, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 694, -399, -459, 2804, 90619, 31679, -23, 2834, 9251, 1883, 661, -2343, 6927, 8616, 166, 55397, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00025089175323955715, 0.001321741845458746, 0.00027931833756156266, 0.00017899397062137723, 1.7028485672199167e-05, 5.2505347412079573e-05, 0.00019329905626364052, 2.2766946131014265e-05, 0.00010320585715817288, 5.1799106586258858e-05, 0.00051730958512052894, 0.00067184068029746413, 0.00033113578683696687, 1.2655288628593553e-05, 0.0009974923450499773, 3.8341899198712781e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -86, -109, -29, 
  /* [0][1][][] */ 67, -37, 19, 
  /* [0][2][][] */ 32, 127, 22, 
  /* [1][0][][] */ 105, -95, -10, 
  /* [1][1][][] */ -127, 103, 24, 
  /* [1][2][][] */ 14, -1, -11, 
  /* [2][0][][] */ -24, -1, -47, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -13, -95, -79, 
  /* [3][0][][] */ 119, 124, 55, 
  /* [3][1][][] */ 1, -22, -17, 
  /* [3][2][][] */ -101, -127, -46, 
  /* [4][0][][] */ 23, -59, 14, 
  /* [4][1][][] */ 11, -127, 14, 
  /* [4][2][][] */ -12, -69, 10, 
  /* [5][0][][] */ -51, 37, 29, 
  /* [5][1][][] */ -127, 34, 36, 
  /* [5][2][][] */ -78, 24, 15, 
  /* [6][0][][] */ -15, 82, 127, 
  /* [6][1][][] */ -51, 55, -14, 
  /* [6][2][][] */ -31, -47, -85, 
  /* [7][0][][] */ 47, 13, -24, 
  /* [7][1][][] */ 127, 58, -15, 
  /* [7][2][][] */ 63, 23, -3, 
  /* [8][0][][] */ -19, -30, 53, 
  /* [8][1][][] */ -52, -85, 127, 
  /* [8][2][][] */ -24, -59, 97, 
  /* [9][0][][] */ -37, 41, -19, 
  /* [9][1][][] */ -29, 127, -19, 
  /* [9][2][][] */ -17, 87, -16, 
  /* [10][0][][] */ 24, 87, 14, 
  /* [10][1][][] */ -37, -127, -27, 
  /* [10][2][][] */ 11, 40, 20, 
  /* [11][0][][] */ 9, -17, 12, 
  /* [11][1][][] */ 65, -91, 36, 
  /* [11][2][][] */ -82, 127, -43, 
  /* [12][0][][] */ -43, 47, -10, 
  /* [12][1][][] */ -127, 112, 7, 
  /* [12][2][][] */ -81, 76, 4, 
  /* [13][0][][] */ 89, 36, 11, 
  /* [13][1][][] */ 62, 24, -31, 
  /* [13][2][][] */ 127, 126, 69, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -69, 82, 
  /* [15][0][][] */ -108, -35, 29, 
  /* [15][1][][] */ -127, -121, 32, 
  /* [15][2][][] */ -41, -82, 6, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.06397739052772522, 0.33704414963722229, 0.071226172149181366, 0.045643460005521774, 0.0043422635644674301, 0.013388862833380699, 0.049291256815195084, 0.0058055710978806019, 0.026317492127418518, 0.013208771124482155, 0.1319139301776886, 0.17131936550140381, 0.08443962037563324, 0.0032270983792841434, 0.25436052680015564, 0.0097771836444735527, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10099875181913376, } };
const TfArray<1, int> quant46_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.067851483821868896, } };
const TfArray<1, int> quant50_zero = { 1, { -28 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.056426417082548141, } };
const TfArray<1, int> quant53_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.079859614372253418, } };
const TfArray<1, int> quant54_zero = { 1, { -42 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.05594036728143692, } };
const TfArray<1, int> quant58_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.019930964335799217, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.056379593908786774, } };
const TfArray<1, int> quant61_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.073574058711528778, } };
const TfArray<1, int> quant62_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.049886457622051239, } };
const TfArray<1, int> quant65_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.089671209454536438, } };
const TfArray<1, int> quant66_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.10037703067064285, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.18789631128311157, } };
const TfArray<1, int> quant69_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
