/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 05.05.2024 16:32:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 35798, -41472, -43696, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00016370520461350679, 0.00013757894339505583, 0.00012961789616383612, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 45,62,80,-25,-79,94,-25,-20,-93,1,113,-45,-51,-61,-12,-60,-92,87,50,98,-72,-54,22,-22,-127,81,-37,-6,-1,-8,-26,-23, 
  /* [1][0][][] */ 61,-38,-57,20,-10,126,-4,-5,127,-33,-10,-65,-53,122,41,-50,98,-38,-11,-85,-102,10,107,77,21,36,12,-2,-42,-41,10,-17, 
  /* [2][0][][] */ -40,86,-71,66,90,-51,-21,127,106,42,126,12,-94,-95,101,126,-79,-44,12,-110,91,122,-45,-100,96,-41,-9,-114,48,-68,78,-11, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0037927641533315182, 0.0031874640844762325, 0.0030030205380171537, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 381, -16, -1218, -254, -399, -20, -920, -498, -454, -390, -213, -923, -1112, -951, -419, -345, -699, -1039, -371, -1032, -1852, -578, -586, 26, -494, -937, -1072, -1040, -1132, -1187, -202, -941, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.4530773923033848e-05, 5.3200394177110866e-05, 4.9843685701489449e-05, 5.4702475608792156e-05, 4.9622805818216875e-05, 5.8893481764243916e-05, 4.7761011956026778e-05, 5.4038453527027741e-05, 6.0258029407123104e-05, 5.5610707931919023e-05, 4.5197881263447925e-05, 4.5047414459986612e-05, 4.9841564759844914e-05, 5.8126319345319644e-05, 7.2946153522934765e-05, 5.3451913117896765e-05, 5.2388546464499086e-05, 5.0047023250954226e-05, 4.606341099133715e-05, 4.7192021156661212e-05, 4.3493695557117462e-05, 4.8251593398163095e-05, 5.5668730055913329e-05, 5.9726160543505102e-05, 5.4875123169040307e-05, 4.9107915401691571e-05, 4.8407880967715755e-05, 4.8436319048050791e-05, 4.7836660087341443e-05, 4.8770438297651708e-05, 4.6815850510029122e-05, 4.9915521231014282e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -19,-58,93,0,84,6,-61,-116,77,-76,-80,28,60,19,-15,73,-39,-17,-116,-46,-43,-62,10,94,-119,10,84,-35,91,9,2,-41,73,-35,-67,75,-89,-94,-78,39,38,-48,-84,96,42,-127,90,5,-54,-60,12,87,-59,-33,-94,95,36,68,78,-105,-48,76,-18,44,21,16,57,81,59,57,76,-96,88,-113,51,55,-85,-27,-39,37,49,14,27,-52,-33,-47,-64,77,-13,46,-7,-78,10,76,-10,21, 
  /* [1][0][][] */ -44,52,-82,8,-30,80,39,41,47,-63,-75,52,56,-25,26,14,98,-23,75,107,-47,-4,34,18,13,23,-58,103,12,6,86,-39,60,91,3,18,66,46,-3,-49,-33,-10,12,-70,-14,19,-21,-69,-12,-69,85,73,16,73,-40,-33,26,90,48,96,-34,101,-53,-56,-61,42,64,38,92,57,14,24,-85,56,-60,47,87,5,-36,51,-68,71,-7,-127,11,90,-55,-99,77,74,62,23,80,50,23,-62, 
  /* [2][0][][] */ 12,6,-82,51,-46,-76,49,50,-111,45,-60,69,48,-42,42,-124,-76,-51,3,17,-112,-42,67,-10,-38,39,61,-19,-89,40,43,54,-88,-46,-110,-122,-106,53,60,-51,-127,-89,-19,-33,-97,78,-50,-95,59,5,50,-102,-69,27,-9,-14,-89,53,-84,-24,-44,23,-58,32,50,12,12,47,-111,27,-22,-92,-1,-89,-2,-3,-72,-51,-25,-21,3,-107,-37,-60,-28,-106,-47,-53,48,72,-49,-23,-67,-100,-65,-86, 
  /* [3][0][][] */ 55,1,16,-19,-62,46,-90,38,25,8,44,-16,74,70,56,8,84,84,-41,24,82,-71,-47,-96,-75,-92,-58,91,34,-69,74,10,-53,-26,-9,-21,-50,-50,39,45,-22,-70,-75,13,67,2,-30,-63,53,-81,47,13,73,30,60,-75,-111,-86,-112,-47,-68,34,-8,62,55,-25,-45,-24,-17,-40,-8,90,22,-127,43,-45,26,82,84,-48,-78,-108,51,52,16,44,-46,-98,-76,28,0,-87,59,-75,-87,-7, 
  /* [4][0][][] */ 55,85,-27,37,-33,-21,12,2,59,76,-6,7,25,-26,-2,-82,-52,-15,-46,-15,92,-78,62,19,-20,-8,30,-66,-58,10,-68,-41,58,97,6,-94,-60,-16,-127,29,-46,-99,-90,-86,27,91,50,37,-11,-18,-18,-69,-99,23,-106,21,28,-100,27,29,-13,-76,-52,-80,-45,42,-9,-34,18,-98,-82,-86,-57,-14,74,19,38,-55,-34,-71,-18,-46,-69,-34,3,38,82,-22,-102,-111,37,33,22,87,-103,-39, 
  /* [5][0][][] */ 77,-90,63,50,29,-57,21,-3,104,-82,-9,-21,31,76,37,45,53,52,-123,69,30,54,11,-7,-109,-47,10,-68,35,29,12,-51,-22,12,-47,30,-84,-71,15,42,-76,-40,21,90,-12,-24,30,-29,-127,48,40,22,17,14,10,-5,88,51,-64,-51,38,-34,50,-54,-12,75,-22,25,68,-14,80,-58,-28,1,-9,-71,3,-65,13,69,79,25,-30,6,-50,34,-3,19,3,-125,82,78,-14,35,9,-76, 
  /* [6][0][][] */ -2,-52,81,48,-93,-69,-17,42,-19,-91,-10,-98,56,28,82,-120,20,-11,-13,72,-89,-127,78,33,-71,-92,-28,-70,-43,-116,26,-83,-101,-126,-62,-113,-25,18,-115,55,66,37,0,-33,-122,82,-98,-57,-73,1,-40,-70,35,-60,70,-45,-6,-26,-77,86,-103,-18,49,-82,-64,43,74,-57,51,-24,-113,-23,32,-76,-97,-53,-89,-106,-72,-43,10,-42,21,-35,-81,-91,-54,-99,58,70,69,-5,-61,-76,51,-40, 
  /* [7][0][][] */ 98,82,-51,-41,-58,116,-10,17,92,20,-75,-4,54,-75,46,35,58,30,14,109,37,37,-3,80,-79,83,31,66,-61,93,-16,48,35,28,63,79,-55,33,-17,-4,92,-81,92,72,61,-35,93,-111,39,-61,-92,-15,-29,88,19,36,99,-57,-19,-15,27,10,72,-92,-71,-28,42,22,-78,55,54,72,78,-25,31,38,-28,88,-74,47,65,-31,-5,-118,64,17,-94,31,59,-12,55,60,-38,-47,-22,-127, 
  /* [8][0][][] */ 18,32,-38,-74,38,52,-52,-20,25,36,26,82,16,-33,-47,-52,-31,83,-63,21,24,-2,54,96,-127,64,48,66,-48,22,-68,107,78,-14,40,7,102,-41,-30,80,67,57,-70,-63,14,-64,-2,73,-19,-88,-35,45,-62,12,-28,-64,46,93,-101,98,104,47,50,69,-26,-22,-22,76,-46,52,27,-6,63,-1,3,-2,-21,84,66,66,21,56,-93,-116,21,10,46,-60,-10,-65,-66,84,-53,-67,-55,-2, 
  /* [9][0][][] */ 12,12,55,24,68,-64,-24,-88,40,36,7,-13,-22,-61,-94,-61,-32,11,-92,-72,-8,60,-65,-92,107,-4,-47,16,-29,-67,-50,79,43,9,22,-42,-65,-7,-39,-33,46,-54,28,-71,63,23,-64,15,-23,-10,-85,-28,74,-65,-32,87,60,-54,-12,8,-93,81,21,-25,-82,13,51,22,-55,70,79,-51,6,43,-96,-70,-69,-127,-33,43,4,2,89,10,-43,-118,56,-38,92,3,-49,83,70,-18,50,-59, 
  /* [10][0][][] */ -55,100,65,-62,-16,126,110,51,28,52,26,-87,105,75,-21,-9,-17,93,-57,-36,-24,37,56,-58,-15,58,-114,-90,-40,86,-87,-57,95,104,127,68,-9,-20,-31,49,-17,89,-72,-18,-68,-101,7,-75,-8,-15,33,45,56,36,-44,-18,-92,1,10,-9,20,90,118,45,97,-57,-98,-16,33,25,-86,-54,95,19,-92,101,7,102,67,31,70,-3,77,46,-101,55,93,-78,28,-4,-12,-57,-40,-72,-54,-127, 
  /* [11][0][][] */ 85,-10,-35,78,90,25,29,61,118,67,-92,85,-27,-102,8,-84,-73,-119,40,18,10,55,4,-127,-120,-112,-41,47,54,-29,3,-38,-105,-90,28,23,-79,54,-50,-77,-43,78,-94,-17,-61,-74,-108,-106,60,77,84,44,-109,-109,-5,2,-82,-74,-43,-104,-98,62,58,-13,5,63,-75,7,65,34,-102,-90,17,85,-117,28,-84,12,-65,63,-123,-45,-90,-57,24,-97,-6,-40,-110,-24,-12,-118,-101,-50,-88,-54, 
  /* [12][0][][] */ -17,34,-73,-26,50,-19,-55,5,-90,22,-37,-13,-66,-17,12,-89,-110,-54,-68,-97,-7,-36,-8,58,-76,-70,60,-111,52,-15,-55,73,-101,-87,-67,-15,-29,-87,-40,11,75,15,-122,-59,-44,-93,-60,78,-62,-127,-92,71,8,-24,-96,47,-43,-77,24,32,24,72,-28,23,70,3,-68,74,21,60,8,37,46,79,-39,-28,-56,1,-125,-107,-76,62,16,-4,-55,7,23,78,-102,-114,54,12,59,-41,1,40, 
  /* [13][0][][] */ 67,-101,78,52,95,69,54,22,38,-59,-23,42,69,33,44,-47,-106,-46,-109,36,22,-23,78,3,-73,28,41,-26,-61,-97,71,-1,42,60,-16,37,-65,-45,-18,95,-91,59,-36,-10,-60,-15,-15,-47,24,47,-10,-120,-68,-34,79,-56,-52,37,-34,-93,-35,81,-127,20,-15,-86,-108,26,-76,-43,58,-35,-84,0,-72,-92,-115,99,25,-39,50,-76,26,-22,-96,-109,42,59,-61,-91,-112,67,71,-53,0,5, 
  /* [14][0][][] */ -45,-71,47,37,32,-20,-21,-54,-56,-22,26,48,-17,-57,-54,-73,-44,-45,-3,19,-33,24,-3,39,-127,-48,-21,24,-76,-72,-63,19,68,-22,-18,2,76,57,22,-66,-17,-102,32,63,44,-112,25,-65,46,6,36,15,49,-22,-15,2,-35,9,23,44,-3,-44,-18,31,-67,-11,40,-74,-51,-45,-57,57,6,27,25,-56,37,-56,41,30,26,-17,-61,-49,-86,-91,-74,44,55,1,34,-31,47,47,-19,13, 
  /* [15][0][][] */ 21,14,-47,61,74,-49,56,-43,36,19,-49,-25,93,0,-62,-127,91,25,-25,31,28,22,56,91,50,63,16,99,15,53,54,-62,19,16,-40,-4,-31,70,76,-42,35,68,-9,-7,41,-71,-25,-97,9,-64,-9,58,-86,-67,-16,4,61,55,-68,123,-22,-38,-5,81,-52,99,-54,13,-36,46,52,-48,25,-65,26,-81,23,92,83,68,-74,50,-50,-103,-103,-35,-81,-21,76,54,-95,-26,57,80,-95,11, 
  /* [16][0][][] */ -54,-25,95,-82,28,91,-69,-34,68,26,-122,93,-2,-42,-40,-29,95,62,-31,42,94,78,-53,59,-55,26,-28,46,-90,18,9,3,-87,65,40,63,-46,-19,-81,-45,-13,-38,33,88,51,31,85,-8,-90,-127,13,78,-75,96,10,40,13,72,9,-24,103,93,49,22,49,3,-46,75,39,49,-31,-47,27,23,65,37,-23,39,-83,0,6,-79,-29,-27,19,45,61,20,11,-55,-19,93,32,-8,-121,-6, 
  /* [17][0][][] */ 4,-110,2,45,-56,-118,-75,-103,19,-102,54,18,59,27,-126,30,4,23,69,76,-104,-36,-11,-69,23,33,-92,-2,67,-61,-46,42,-53,-46,1,-18,-67,66,-97,-50,-98,-48,-38,-31,-20,0,47,-116,61,68,-30,10,-35,50,65,-91,-124,50,-90,-118,14,-107,49,65,-94,-88,17,-114,-123,-29,68,4,-12,-118,-80,42,79,-58,16,-78,-15,-37,-86,-95,-121,54,45,-35,-3,59,-109,-127,-35,69,-7,-6, 
  /* [18][0][][] */ -107,60,94,-58,-19,-101,-102,-2,-42,60,-118,-54,-41,19,38,-89,6,-47,30,-38,60,-54,8,-83,-6,-98,-46,92,9,2,-11,39,37,-35,-109,-104,-35,6,-48,60,-52,-23,-45,-8,-103,-23,-2,-51,-13,-18,51,10,-109,-36,4,77,-58,29,-28,-120,73,102,-21,27,-86,-123,-51,72,61,-65,-91,96,-99,-72,-106,-111,34,27,-28,-97,-56,-5,-33,-84,73,-74,59,32,-127,-95,-92,96,75,-74,48,-37, 
  /* [19][0][][] */ -5,8,45,15,32,-88,72,59,62,-78,5,-30,-109,7,-73,36,54,-109,79,31,-43,49,-69,-10,48,-93,4,-81,-103,-127,-75,27,51,-95,8,-23,-15,-81,-67,-109,26,-117,-98,-15,-98,8,46,-100,-34,12,-52,29,-52,1,-13,-29,1,69,-20,-45,28,-71,78,40,-82,-22,-45,-21,-26,30,44,-65,-79,-123,-73,-90,-44,-119,-9,72,30,-123,-45,55,-100,-18,-10,-27,59,8,-23,35,-51,82,47,-62, 
  /* [20][0][][] */ -32,30,43,67,-110,86,-3,62,-14,-27,-106,-13,-36,57,10,-105,-74,-56,-43,-54,-6,-75,-104,-87,51,-106,-127,19,-15,-22,-55,98,66,10,-44,22,33,-47,-39,-106,-84,-51,-101,-120,-41,-81,-83,76,58,-126,-117,46,20,72,21,-31,73,50,94,95,87,-74,-114,-54,-43,-97,-84,-23,-116,-78,-94,59,-91,-68,-3,-24,83,63,74,75,61,-21,85,-12,23,87,-30,50,-19,73,-4,51,-12,7,1,-29, 
  /* [21][0][][] */ 93,78,53,-105,71,-72,48,30,6,-55,-72,37,13,39,-27,-104,-106,-24,26,-1,100,-26,57,-58,17,-83,-26,72,4,4,-21,-23,17,18,-73,-112,127,58,-111,-27,-11,-8,37,2,-78,-118,-40,66,-55,-73,-5,114,15,68,-105,34,-54,48,-74,121,54,-67,0,-33,55,31,-51,-71,-92,20,64,70,38,-62,52,31,-90,-14,68,109,3,62,44,-99,17,-77,49,-111,-103,55,95,-97,-59,-79,52,-89, 
  /* [22][0][][] */ 11,-64,-65,-90,41,-58,52,46,-82,63,-92,-114,66,-92,-91,-58,19,34,-94,-72,70,-59,-8,-13,67,-23,-87,56,-47,-64,-68,-107,0,22,-2,5,-31,-11,-37,-123,-23,-25,-13,49,19,-90,62,-11,-71,-86,6,-24,-82,-104,-32,10,-17,-59,-49,-60,63,-88,-51,-127,-65,-7,-111,-46,78,58,-25,-34,-67,8,48,-67,18,-61,33,74,54,-85,-76,-100,57,62,50,-22,-58,23,-44,7,8,29,-36,78, 
  /* [23][0][][] */ 40,-90,24,41,98,-68,29,-121,52,-66,41,95,22,-81,12,-5,79,-21,-127,69,58,-53,61,-7,-27,-10,82,17,59,51,73,-20,-24,36,18,44,61,-45,-106,24,-120,20,-9,-72,-59,-96,70,24,18,-110,-51,-42,65,-39,-40,71,-55,4,43,10,-76,-31,-22,17,32,29,-87,-72,53,-31,75,-67,8,-57,-14,-58,27,-33,53,90,-26,-44,-34,-78,71,-30,75,-14,-108,-17,73,19,84,-21,-56,66, 
  /* [24][0][][] */ -53,-6,-98,-59,-66,-49,-43,-54,65,107,64,38,102,43,-19,-104,-43,55,33,-19,77,-49,-44,-8,19,-22,64,68,85,53,9,-21,17,18,49,26,-8,-99,42,10,-31,-82,98,27,44,-58,49,41,-80,-49,-6,68,42,75,66,-43,9,77,-12,34,99,17,47,71,-92,94,-43,-64,-67,80,-41,-16,-18,-2,63,74,72,-18,-67,-47,-69,-64,-39,-127,0,53,-22,-104,11,-88,-2,-49,-6,13,-92,-31, 
  /* [25][0][][] */ -99,-65,-93,-35,61,-84,-113,31,27,-118,-61,-8,37,-23,-122,-22,-80,34,8,-103,35,48,-35,-74,22,-69,-94,14,68,-84,23,76,53,-119,13,43,63,-77,-21,-40,-93,84,-112,-22,64,23,36,56,-112,55,-77,-17,15,-24,-58,-16,-40,22,-113,40,78,13,64,22,-14,46,-24,-25,-100,-27,-45,-127,10,-80,43,6,42,67,-8,4,18,20,-19,56,-84,-17,-116,-96,-22,-12,93,-7,-126,-19,-44,-95, 
  /* [26][0][][] */ 31,-123,-46,-36,-107,-19,-26,-36,-112,-127,73,51,-90,-60,-10,-34,83,8,-89,-85,-10,48,66,-9,24,36,-10,23,-9,-15,-100,-18,-48,-73,-108,-111,-85,52,-69,82,-103,72,24,9,-81,43,-53,68,-38,8,-26,72,-13,-60,-24,-111,65,38,24,2,-21,-102,38,-39,79,-36,-71,32,-97,45,58,65,51,-108,-98,-15,21,-117,-108,-11,-50,48,50,-85,53,-25,-60,-9,-96,78,-9,-5,-69,85,26,53, 
  /* [27][0][][] */ -12,-11,-77,-111,-127,-83,-80,-33,18,64,13,-115,-46,28,51,-45,35,-34,33,-89,-102,-12,-47,-41,-110,18,-114,-23,35,5,-50,-32,31,39,-103,-99,-87,-80,-119,62,-105,-3,4,1,72,4,41,73,105,37,33,-79,-92,-98,-22,-53,68,-44,-95,-89,-66,-67,-51,34,15,-63,-121,71,21,-5,-124,-11,33,-59,-27,-91,21,-70,58,69,54,-48,89,-44,-86,-94,-49,15,-64,-16,-53,-67,26,-5,63,33, 
  /* [28][0][][] */ 60,-16,63,15,-111,-73,-103,-86,-38,-115,44,79,-97,-97,-27,77,58,82,-100,59,-33,6,-110,-62,-93,48,-102,-74,-102,-89,-3,-41,-65,-9,54,40,19,-127,-56,5,88,38,-99,38,-116,-10,-4,28,8,-53,-58,-17,-77,12,38,26,46,-28,64,45,-29,-43,-115,-10,45,50,-60,46,-99,8,-111,-17,49,49,-17,-107,-115,-58,-90,27,-81,-103,82,2,31,-116,60,-86,-121,-76,-49,-53,-31,29,-85,-66, 
  /* [29][0][][] */ 21,24,22,-73,-99,-11,-126,-20,66,-37,-102,-110,67,-116,-68,-64,-110,66,5,-84,-90,-55,22,-21,-37,-19,-62,-49,-114,-31,71,-27,18,-24,-97,-74,-37,69,-33,59,22,77,-67,46,-25,73,-71,-44,-1,-27,30,-102,39,-110,77,15,-105,24,-65,72,-127,59,-106,-68,-75,-79,21,53,58,-102,4,-87,71,53,27,-1,77,-78,-52,0,-31,-96,-25,-83,30,85,13,48,-57,70,36,44,-115,-9,-21,30, 
  /* [30][0][][] */ 15,-59,-73,28,-85,22,-57,-19,87,-13,-7,-43,-95,11,41,-3,-23,23,81,-99,5,-116,-118,7,-104,21,-77,105,-45,-101,-79,6,-82,-66,-127,-43,-2,-19,-16,20,77,-82,-15,81,95,-74,89,38,-65,69,28,-96,68,-51,-10,86,-92,-72,-82,-59,-105,-27,-74,-31,-88,-98,-96,69,-72,98,32,-52,-108,94,22,-103,-66,-86,-70,-80,22,25,-120,-30,-123,-5,-117,85,-44,-112,55,31,-45,-25,-8,-69, 
  /* [31][0][][] */ 49,-100,12,67,25,36,-69,-106,-49,-36,-88,-95,67,-127,-61,79,-70,-95,12,24,35,11,-43,75,23,-118,15,15,-81,-82,23,74,-2,-2,-98,-28,65,-42,-77,-112,33,-76,-46,10,-12,-64,-57,2,52,5,61,-45,-116,-68,-86,3,-122,41,-11,78,-50,-20,55,-82,41,78,-57,-86,43,-121,-122,-8,-101,-46,-15,-11,-69,-47,24,60,-85,-57,35,49,30,70,-98,2,-1,-56,-92,-66,-8,69,-20,-36, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0023175578098744154, 0.0022610167507082224, 0.0021183565258979797, 0.002324855187907815, 0.002108969260007143, 0.0025029729586094618, 0.0020298429299145937, 0.0022966342512518167, 0.002560966182500124, 0.0023634550161659718, 0.0019209098536521196, 0.0019145150436088443, 0.0021182664204388857, 0.0024703685194253922, 0.0031002114992588758, 0.0022717062383890152, 0.0022265131119638681, 0.0021269985008984804, 0.0019576949998736382, 0.0020056609064340591, 0.0018484820611774921, 0.0020506926812231541, 0.0023659209255129099, 0.002538361819460988, 0.002332192612811923, 0.0020870864391326904, 0.0020573348738253117, 0.0020585434976965189, 0.00203305808827281, 0.0020727436058223248, 0.0019896735902875662, 0.0021214096341282129, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 677, -205, 2507, 6107, 3236, -2125, 3357, -1399, -2342, -727, 6192, -2039, 4124, 4367, 1191, 2432, -569, -346, -1376, 4225, 1752, -1186, 1879, -947, -292, 2505, 923, 1728, 5599, 1599, 3452, 486, 1576, 4025, 5189, 2420, -734, 2964, 2113, -4145, -378, 1154, -86, 1521, -1449, 1038, -1162, 525, -7135, 2539, 1305, -3433, 5079, -926, 1925, 1069, 777, 2686, -14, -1975, 16, 923, 136, 3108, 4318, 3028, 2670, 3890, 3691, -1521, 3610, 3630, 3844, -1970, 6333, 5402, 142, -2760, 344, 872, 6141, 1877, -347, -1250, 1173, 280, 975, -2894, 3091, 111, 3374, 453, -385, -3899, 309, 1945, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00014914064377080649, 0.00022274910588748753, 0.00022701565467286855, 0.00012986472574993968, 0.00017912987095769495, 0.00021004922746215016, 0.00016164605040103197, 0.00020258716540411115, 0.00017890722665470093, 0.00027401655097492039, 0.0001122207468142733, 0.00023504898126702756, 0.00012530572712421417, 0.00013043709623161703, 0.00022671680198982358, 0.00025262119015678763, 0.00023904224508441985, 0.00021734088659286499, 0.00017318014579359442, 0.00013127762940712273, 0.0002240862522739917, 0.00016851347754709423, 0.00016501291247550398, 0.00018025064491666853, 0.00034744737786240876, 0.00022652358165942132, 0.00019563156820368022, 0.00018377068045083433, 0.00014364624803420156, 0.00022847179207019508, 0.00014608283527195454, 0.00027171574765816331, 0.00017821227083913982, 0.00014735430886503309, 0.00012132988194935024, 0.00019457403686828911, 0.00022362078016158193, 0.00014731475675944239, 0.00016920278721954674, 0.00012111965043004602, 0.00021088279027026147, 0.00013636857329402119, 0.00025079274200834334, 0.00013234882499091327, 0.00019008535309694707, 0.00017474002379458398, 0.00023759978648740798, 0.00020007805142085999, 0.00011150429054396227, 0.00015645159874111414, 0.00015267054550349712, 0.00017199415015056729, 0.00014852348249405622, 0.000227620083023794, 0.00017898035002872348, 0.00018971311510540545, 0.00019615676137618721, 0.00012796414375770837, 0.00029592536156997085, 0.00019061274360865355, 0.00023825555399525911, 0.00015211869322229177, 0.00033362131216563284, 0.000183512267540209, 0.00014494310016743839, 0.00013959273928776383, 0.0001462080399505794, 0.00014958155225031078, 0.00017785780073609203, 0.00015338051889557391, 0.00012158249592175707, 0.00018627782992552966, 0.00010680928971851245, 0.00013325778127182275, 0.0001045028111548163, 0.0001403704663971439, 0.00016683153808116913, 0.00021417679090518504, 0.000204749550903216, 0.00017447193386033177, 0.00013209464668761939, 0.00016179730300791562, 0.00017920044774655253, 0.00024242712242994457, 0.00018308887956663966, 0.0001758166472427547, 0.00019641486869659275, 0.00013848596427123994, 0.0001877557224361226, 0.00016729146591387689, 0.00016513238369952887, 0.00028550295974127948, 0.00017913675401359797, 0.00012560717004816979, 0.00020487161236815155, 0.00020200993458274752, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -36,111,-91,58,62,-42,127,99,-71,48,46,-84,91,125,-75,46, 
  /* [1][0][][] */ -36,-16,-36,-18,-28,63,47,-127,39,-48,-28,-83,-34,-38,-47,5, 
  /* [2][0][][] */ -30,-16,35,73,28,35,-79,127,-33,-4,68,-33,-17,-58,-43,75, 
  /* [3][0][][] */ 108,-61,58,24,-4,-36,-52,127,-3,52,39,17,13,47,42,-3, 
  /* [4][0][][] */ -51,-8,-12,78,-76,11,-16,-103,-2,14,15,17,36,44,112,127, 
  /* [5][0][][] */ 117,8,-23,-7,-86,-4,29,60,20,-8,65,90,127,24,-67,-10, 
  /* [6][0][][] */ 23,-32,-31,-56,-98,-1,-8,-41,-54,-85,-23,22,80,58,127,-25, 
  /* [7][0][][] */ -43,38,-18,-62,4,-50,-74,29,-75,58,-93,-76,-127,-42,30,68, 
  /* [8][0][][] */ 25,47,87,11,69,27,91,19,61,-21,45,3,-127,-10,-81,13, 
  /* [9][0][][] */ -20,57,35,-48,-9,-16,25,-2,-28,43,-34,-2,26,127,13,2, 
  /* [10][0][][] */ 84,40,-58,38,-67,-28,58,-67,-90,-63,-80,-112,-127,-107,9,117, 
  /* [11][0][][] */ 27,-4,66,7,-24,-35,25,116,-89,15,-11,23,-19,-6,47,127, 
  /* [12][0][][] */ -50,-24,9,-8,-4,8,127,33,-55,17,19,5,-26,90,-43,102, 
  /* [13][0][][] */ -12,15,28,38,79,-13,94,119,-25,127,-86,-36,38,68,-83,-28, 
  /* [14][0][][] */ -83,127,11,-5,9,-7,34,-17,-35,33,96,2,-89,-3,-14,36, 
  /* [15][0][][] */ -13,-11,-127,-25,92,-26,-76,-37,-31,-27,-31,-67,-5,-54,-51,47, 
  /* [16][0][][] */ 127,-16,-4,-41,37,-24,37,2,-63,-9,124,57,41,-8,-56,12, 
  /* [17][0][][] */ 6,14,-35,-92,-22,-42,127,-90,-2,-18,-29,43,30,68,-17,70, 
  /* [18][0][][] */ 14,127,2,-56,77,-108,-25,-95,-54,91,-4,32,7,81,-22,-48, 
  /* [19][0][][] */ -77,-110,101,-75,17,-94,43,-3,21,16,91,127,43,-7,44,1, 
  /* [20][0][][] */ -31,69,50,-11,20,9,30,-3,47,-14,85,-13,-127,-18,-68,0, 
  /* [21][0][][] */ -42,34,21,22,55,39,53,44,-127,37,-73,6,-8,8,-69,-48, 
  /* [22][0][][] */ -6,-100,66,28,31,-121,127,1,24,-51,-28,-78,43,-85,-59,-46, 
  /* [23][0][][] */ -87,-102,65,99,49,-13,47,-11,25,-29,96,17,-13,86,77,127, 
  /* [24][0][][] */ -1,2,25,75,39,17,-30,-127,58,4,-49,4,-6,4,-23,-11, 
  /* [25][0][][] */ -8,29,12,-38,-32,3,23,-29,-35,42,-19,3,29,127,6,14, 
  /* [26][0][][] */ -61,73,-2,28,30,-68,2,-19,2,24,22,94,16,1,-75,127, 
  /* [27][0][][] */ -25,-127,-39,-7,-73,88,10,-57,8,-28,78,-18,13,-39,-100,-21, 
  /* [28][0][][] */ -25,1,33,60,31,13,-50,-113,-127,30,89,-12,69,3,-40,-23, 
  /* [29][0][][] */ -103,91,-36,-50,-58,18,-127,-55,-43,-47,13,10,13,-66,-103,58, 
  /* [30][0][][] */ 35,57,-16,98,-86,-78,-73,-29,-23,22,-19,-113,127,26,24,74, 
  /* [31][0][][] */ 127,43,-71,-24,-63,9,73,38,-23,3,55,20,31,-2,-10,-7, 
  /* [32][0][][] */ -47,-37,127,-16,-33,56,88,24,-17,-20,7,33,-7,70,51,46, 
  /* [33][0][][] */ -13,3,-52,-39,-43,15,127,24,-14,-14,30,-36,75,104,-40,67, 
  /* [34][0][][] */ -93,-45,86,-6,8,-52,107,-7,-127,12,64,-31,45,53,-64,-18, 
  /* [35][0][][] */ -3,4,-61,16,-84,90,-16,5,-42,89,11,127,-46,45,1,62, 
  /* [36][0][][] */ -24,-81,127,-65,-60,18,-42,4,14,29,-25,79,-10,-60,-48,20, 
  /* [37][0][][] */ 64,-17,86,-45,110,-84,-29,4,-74,127,-62,13,-113,-12,79,-19, 
  /* [38][0][][] */ 48,58,50,-54,-21,-47,-114,49,-62,56,-127,-83,-84,-86,-59,25, 
  /* [39][0][][] */ -101,30,-73,-9,-84,-122,106,24,-127,-28,15,110,57,-31,11,110, 
  /* [40][0][][] */ 127,64,28,-123,-74,37,28,-20,-40,-46,-61,-105,-9,63,9,24, 
  /* [41][0][][] */ 127,-71,-65,-25,-21,2,-72,-37,51,-48,1,-75,120,-90,68,0, 
  /* [42][0][][] */ -32,-127,-29,118,28,-102,-105,36,18,6,5,43,-108,65,-83,1, 
  /* [43][0][][] */ -99,-25,-42,-122,-30,-6,8,95,54,-127,-46,46,-43,-74,-49,89, 
  /* [44][0][][] */ -21,32,0,-67,-17,-45,-13,111,127,-72,59,103,113,0,-18,-29, 
  /* [45][0][][] */ 45,79,-49,74,127,-98,-68,-46,122,-69,56,-39,-62,-12,-49,50, 
  /* [46][0][][] */ -4,-35,-31,-1,71,-2,16,17,-19,127,-15,-83,64,50,-51,94, 
  /* [47][0][][] */ 85,-31,-68,-21,55,-17,-52,-28,6,127,-33,29,2,-110,-60,4, 
  /* [48][0][][] */ 8,0,14,-108,2,-37,72,-127,-23,-2,-32,42,34,62,-10,8, 
  /* [49][0][][] */ -31,123,-67,10,11,-57,38,60,-15,47,29,-54,27,51,127,-109, 
  /* [50][0][][] */ 22,71,-3,-17,-127,-4,-106,-67,83,78,33,25,-81,-66,11,13, 
  /* [51][0][][] */ 127,-25,-85,-17,-53,68,-75,-46,45,-17,-27,64,-14,-91,4,46, 
  /* [52][0][][] */ 4,-37,46,41,-60,-86,-127,-4,-41,-47,-56,-75,-2,-46,16,48, 
  /* [53][0][][] */ 30,97,42,-127,-9,113,112,-14,-6,-26,4,-42,72,-116,-1,68, 
  /* [54][0][][] */ 7,113,5,5,0,-75,-68,57,12,-8,-30,127,95,99,31,101, 
  /* [55][0][][] */ -15,8,59,68,72,1,93,107,-80,-2,-23,-20,127,51,3,-12, 
  /* [56][0][][] */ 127,34,4,25,-50,116,-40,-71,-20,36,-72,-9,-69,108,-13,37, 
  /* [57][0][][] */ -62,-37,-61,-20,-86,-87,92,-5,-127,-32,74,105,5,18,-15,90, 
  /* [58][0][][] */ 59,-45,51,26,15,-53,-19,25,25,-16,-127,-29,20,-31,-23,31, 
  /* [59][0][][] */ 72,10,-127,93,8,40,95,-40,-53,-48,40,-109,-97,-49,39,98, 
  /* [60][0][][] */ -16,14,-15,-1,-38,-15,-6,18,-42,-72,57,127,-34,-123,-46,9, 
  /* [61][0][][] */ -26,19,70,-72,-64,46,7,93,-35,-70,63,81,94,3,17,127, 
  /* [62][0][][] */ 85,31,-29,-127,-38,10,7,-19,-14,24,-28,62,56,-23,-93,-65, 
  /* [63][0][][] */ -1,-32,-14,-18,-82,-53,-39,4,-68,-23,-19,4,127,-8,40,-1, 
  /* [64][0][][] */ 28,10,-2,44,-61,-49,-32,-62,71,127,-1,-17,27,-58,-11,56, 
  /* [65][0][][] */ -28,12,-22,-29,-58,86,29,-13,50,-100,91,-61,48,66,-127,51, 
  /* [66][0][][] */ -96,122,-96,-85,59,-44,-127,-91,-85,104,117,-32,-123,-38,59,-2, 
  /* [67][0][][] */ 0,-22,-127,-100,64,74,16,-27,-28,3,56,7,29,26,18,54, 
  /* [68][0][][] */ 94,65,-39,-42,-54,55,-8,52,-64,100,126,-12,-9,-54,-127,-27, 
  /* [69][0][][] */ 59,-120,82,-85,13,-116,-27,127,1,52,49,89,-38,45,-52,-10, 
  /* [70][0][][] */ 33,29,127,45,125,15,125,53,-11,6,-51,109,-82,96,-91,57, 
  /* [71][0][][] */ 3,16,81,-78,-127,-62,6,-4,-18,-12,13,-91,-70,-5,5,19, 
  /* [72][0][][] */ -71,-92,29,-127,68,0,25,49,-56,0,-93,8,21,108,-82,106, 
  /* [73][0][][] */ 16,7,60,4,127,-113,-40,26,-36,101,-88,40,-84,-62,121,-12, 
  /* [74][0][][] */ -120,5,-127,-88,75,-55,-39,48,-69,14,-117,-39,-74,-69,-45,78, 
  /* [75][0][][] */ 94,-30,37,-63,-16,0,-127,-28,-4,-91,73,17,0,-21,-13,-6, 
  /* [76][0][][] */ 42,-41,-53,119,28,85,47,-48,127,-95,54,53,15,-102,-11,-7, 
  /* [77][0][][] */ -50,-43,127,-13,10,-46,-23,-78,0,26,17,89,43,28,16,-3, 
  /* [78][0][][] */ -62,-7,31,-49,-7,-76,33,8,21,-7,30,-79,-87,-73,-127,-43, 
  /* [79][0][][] */ -127,-81,1,-10,98,24,7,39,17,3,12,65,-44,-64,-75,-2, 
  /* [80][0][][] */ -18,-95,22,127,-42,-29,-69,88,-20,37,77,40,-66,-21,-27,95, 
  /* [81][0][][] */ 127,64,-44,70,2,44,40,106,10,-17,124,40,97,40,33,-11, 
  /* [82][0][][] */ -49,19,5,-4,46,-127,-118,-88,26,94,-55,-56,-23,95,-53,-39, 
  /* [83][0][][] */ 97,-11,67,-13,-16,0,-127,4,15,-97,2,-57,0,12,22,-25, 
  /* [84][0][][] */ 27,-38,-82,22,127,47,33,53,-105,41,-61,-29,26,-11,-50,18, 
  /* [85][0][][] */ 20,93,7,-54,60,-27,48,-93,127,-26,37,-23,90,-99,12,0, 
  /* [86][0][][] */ 110,-15,127,81,25,-66,71,59,-55,-64,-86,-42,30,10,-55,12, 
  /* [87][0][][] */ 21,48,5,-99,118,-31,-56,27,32,-92,122,-31,-123,-127,-9,26, 
  /* [88][0][][] */ -61,-35,32,-5,4,34,-55,-43,4,3,-73,-127,-68,-41,-25,-11, 
  /* [89][0][][] */ -101,10,76,-72,5,-6,-127,63,112,30,-113,-26,-48,-108,-61,11, 
  /* [90][0][][] */ -18,-12,-33,-89,127,17,-58,59,48,78,21,-13,22,11,-78,-25, 
  /* [91][0][][] */ -34,-20,-6,47,-13,-23,0,64,-30,-21,36,5,5,34,22,127, 
  /* [92][0][][] */ -51,75,14,-11,-10,58,-127,86,-46,-16,66,32,-30,127,87,35, 
  /* [93][0][][] */ 11,100,-64,-76,59,59,-120,-13,112,71,80,36,-127,11,2,39, 
  /* [94][0][][] */ 38,127,97,34,-122,-48,-1,-1,39,-7,30,-28,-58,-26,50,-34, 
  /* [95][0][][] */ -30,38,27,3,117,48,-67,127,26,-61,-110,97,-37,3,110,-37, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015328822191804647, 0.002289437223225832, 0.0023332892451435328, 0.0013347624335438013, 0.0018411143682897091, 0.0021589065436273813, 0.0016614139312878251, 0.0020822107326239347, 0.001838825992308557, 0.0028163690585643053, 0.0011534158838912845, 0.0024158565793186426, 0.0012879045680165291, 0.0013406452490016818, 0.0023302175104618073, 0.0025964654050767422, 0.0024568997323513031, 0.0022338510025292635, 0.0017799625638872385, 0.0013492844300344586, 0.0023031805176287889, 0.0017319980543106794, 0.0016960189677774906, 0.0018526337807998061, 0.0035710982047021389, 0.0023282316979020834, 0.0020107205491513014, 0.0018888131016865373, 0.0014764101943001151, 0.0023482555989176035, 0.0015014538075774908, 0.0027927211485803127, 0.0018316832138225436, 0.0015145221259444952, 0.0012470404617488384, 0.0019998510833829641, 0.0022983963135629892, 0.0015141154872253537, 0.001739082857966423, 0.0012448796769604087, 0.0021674740128219128, 0.001401609624736011, 0.0025776724796742201, 0.0013602941762655973, 0.0019537159241735935, 0.0017959951655939221, 0.0024420740082859993, 0.0020564219448715448, 0.0011460520327091217, 0.0016080249333754182, 0.0015691628213971853, 0.001767772831954062, 0.0015265389811247587, 0.0023395016323775053, 0.0018395775696262717, 0.0019498900510370731, 0.0020161184947937727, 0.0013152280589565635, 0.0030415498185902834, 0.0019591364543884993, 0.0024488139897584915, 0.0015634908340871334, 0.0034289925824850798, 0.0018861570861190557, 0.0014897393994033337, 0.001434747944585979, 0.0015027405461296439, 0.0015374139184132218, 0.0018280399963259697, 0.0015764600830152631, 0.0012496368726715446, 0.0019145818660035729, 0.0010977963684126735, 0.0013696365058422089, 0.0010740901343524456, 0.0014427414862439036, 0.0017147109610959888, 0.0022013301495462656, 0.0021044360473752022, 0.0017932396149262786, 0.0013576817000284791, 0.001662968541495502, 0.0018418398685753345, 0.0024916897527873516, 0.0018818054813891649, 0.0018070607911795378, 0.0020187713671475649, 0.00142337242141366, 0.0019297717371955514, 0.0017194381216540933, 0.0016972468001767993, 0.0029344274662435055, 0.0018411851488053799, 0.0012910028453916311, 0.0021056905388832092, 0.0020762779749929905, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 3915, 10570, -3502, 5640, 6491, 1976, -3265, 8038, 14552, -3908, -5368, 4497, -18930, 11216, 2814, 11334, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.5796251874417067e-05, 8.8733868324197829e-05, 6.151925481390208e-05, 6.9478395744226873e-05, 7.2762311901897192e-05, 7.0150766987353563e-05, 7.7775672252755612e-05, 5.2048711950192228e-05, 8.7393273133784533e-05, 6.9688860094174743e-05, 4.9350368499290198e-05, 6.7809123720508069e-05, 6.9049288867972791e-05, 7.0317088102456182e-05, 6.860828580101952e-05, 9.0855326561722904e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -84,29,52,14,0,7,-73,10,-20,-3,-27,-36,50,31,31,-33,21,26,75,-6,2,-67,103,66,41,16,16,43,-64,-73,-93,10,-20,-22,16,38,-23,42,27,10,7,-21,-72,14,-49,12,-21,76,-10,-11,-15,13,-1,30,43,-33,-68,55,0,127,75,16,-32,9,-13,-55,-60,3,-63,-43,-7,8,32,-8,-38,-39,-46,9,-63,-7,-58,68,65,-54,-26,42,29,26,36,-7,-14,-20,-21,-30,-93,26, 
  /* [1][0][][] */ 59,18,2,-5,3,-5,-44,13,21,-7,51,-53,20,6,-64,-48,1,31,-66,-4,6,-75,32,60,-9,-54,-12,-32,43,-96,64,-67,53,23,-7,62,35,56,-8,-36,28,2,6,-11,10,59,-127,-34,-64,-42,-7,-18,9,-27,-15,41,33,20,-16,41,29,19,-18,-87,6,-1,-64,8,-3,5,-72,12,-26,-41,18,-59,1,38,-25,-75,-42,-26,-41,-30,-28,-23,3,-10,-43,23,-43,35,22,42,-80,26, 
  /* [2][0][][] */ 56,-25,16,-3,-21,-60,72,5,-46,4,-4,-47,-69,-31,24,-39,-74,-65,-20,67,28,-20,-17,8,33,-58,7,-38,-24,29,-25,92,-52,96,-37,15,18,-21,-25,-24,-63,71,56,-7,-57,-9,-1,-29,35,-5,-43,-58,45,-35,-6,50,21,-5,21,-44,1,37,-8,4,37,19,12,-2,10,15,-28,-52,16,40,15,35,29,-93,127,78,87,-35,-30,20,-20,73,-10,79,4,-14,-19,33,-26,38,18,23, 
  /* [3][0][][] */ -2,-22,-49,27,35,4,-39,-93,-19,98,62,103,55,-24,-60,73,-16,-33,51,-4,19,124,14,-69,20,28,-37,25,70,-89,127,16,-1,47,-13,-18,42,60,80,-40,-78,-33,-43,32,-16,58,30,-32,6,-60,-17,-77,36,-106,-21,-98,7,115,-34,16,-30,-12,-51,-7,22,14,-75,20,35,6,-2,-83,-35,-83,57,-44,32,-10,-84,-61,-62,35,-60,40,-35,-96,40,-51,-4,76,15,-39,93,63,-90,88, 
  /* [4][0][][] */ 42,-4,-30,5,43,27,-69,2,-3,81,86,-20,11,-31,2,-15,-10,13,-13,30,32,-56,33,67,-47,-3,-127,9,-38,-89,21,25,-60,-40,17,65,50,29,14,20,-31,-36,30,-10,-2,2,-39,10,-15,28,-6,-1,27,-14,-68,-17,52,-5,-13,-10,25,-7,33,-11,-39,-7,-39,30,-9,35,-53,67,33,-78,-61,-63,29,-45,-43,-14,-67,78,-61,22,-38,6,20,-58,35,34,2,-7,-41,-11,13,41, 
  /* [5][0][][] */ -75,33,39,-27,34,-25,89,-13,-28,26,-19,-33,6,-18,0,-35,-9,-57,30,22,-127,-18,-78,44,-59,-14,50,27,37,-27,-38,36,51,99,-8,39,-9,22,38,-11,-16,57,45,-17,14,40,23,29,-3,8,10,55,28,-9,29,-43,27,-43,-35,-36,51,75,-67,9,63,-11,-45,-66,-79,-6,-48,0,14,43,-7,-20,25,-24,19,-7,85,-3,23,-101,-72,52,24,3,-29,15,24,-13,-33,32,2,68, 
  /* [6][0][][] */ -11,6,-49,1,-42,-87,96,75,-82,39,-22,64,-127,-33,40,36,9,-56,-3,12,-30,-4,-50,-56,-46,46,55,27,25,69,56,-57,0,5,-4,-67,22,-19,-3,83,24,-2,-48,-8,6,-68,-52,44,1,-48,-7,68,53,18,-17,-24,16,-21,8,-4,-78,23,-64,20,-25,43,13,14,16,23,7,-37,-19,33,50,21,31,-24,81,-30,1,-23,-27,37,21,-30,2,15,-46,30,43,40,-30,7,-4,79, 
  /* [7][0][][] */ 22,73,-10,-72,-25,-2,22,-15,-60,73,-40,-40,-13,6,17,-3,-41,-20,-14,56,15,116,14,15,-6,1,13,14,45,14,110,-21,54,16,-2,-15,16,-13,7,9,-66,9,27,-52,19,-38,82,-29,39,-67,-127,-68,-67,4,-4,-36,2,3,-106,-16,-23,115,47,-47,-58,-31,-44,35,16,-18,-86,33,8,26,-38,2,-49,47,-20,-80,-20,-28,55,-49,45,-70,3,-17,-23,92,-89,60,70,6,-34,24, 
  /* [8][0][][] */ 22,52,-59,54,-5,-24,-105,21,-54,-46,7,-25,-22,33,42,68,4,-45,-4,0,33,-12,7,8,-28,62,-17,8,-11,-49,-48,-21,-1,-28,-30,-40,-43,29,61,-13,-11,-45,14,4,-21,-13,4,-40,1,-24,62,50,-13,-38,-64,82,-3,50,14,-9,-12,15,4,40,2,-63,-59,3,-50,13,-14,-6,-2,-46,-120,10,-29,14,-69,-38,-48,-9,-35,-31,-26,6,18,32,24,54,-48,-35,-85,-127,-4,-32, 
  /* [9][0][][] */ 5,23,-68,63,-31,-13,52,22,23,57,-16,96,15,-25,32,127,11,18,77,9,56,27,49,-97,-23,-1,27,-20,17,-45,39,42,-18,-16,6,-123,27,-16,-9,-54,-22,31,68,-29,-17,16,12,-11,50,83,-2,-27,-84,-90,12,-22,12,13,61,-25,-66,49,-46,-46,108,-34,-49,36,-58,33,35,40,-15,70,-14,-38,-38,28,-82,-15,44,-49,79,1,12,-18,-8,-38,-48,27,-2,2,91,31,-61,-2, 
  /* [10][0][][] */ 55,18,-23,-6,-46,-37,85,-23,11,2,-15,30,-88,2,3,-6,-75,-10,34,22,49,36,33,-15,-32,76,56,-13,-63,-74,4,-23,62,-60,58,-29,84,-103,65,126,9,-58,14,8,-10,-76,-12,80,-4,93,-127,-66,-27,37,2,47,-19,-98,43,20,-10,46,-19,-48,-85,-66,28,73,68,-25,-2,66,115,15,33,-114,25,-54,30,-9,-26,36,37,41,-27,-65,-3,24,-59,-15,31,97,49,85,-31,9, 
  /* [11][0][][] */ -58,-17,65,-80,-8,-8,-1,-46,37,-9,10,-1,-9,10,9,-11,-52,-6,37,-1,-33,67,-31,-82,56,19,-17,18,11,-59,74,-41,5,-32,27,-61,-42,10,-108,0,-98,65,-26,35,1,16,19,-12,-12,-31,-97,-51,-1,34,65,-56,-27,-68,-1,-50,-28,-35,14,-110,-21,-38,80,97,127,15,64,-14,-54,-25,13,-22,79,42,-4,49,54,-23,-5,84,75,6,17,5,-39,-69,-2,59,39,25,83,51, 
  /* [12][0][][] */ 35,-4,27,-53,-23,122,16,51,28,79,10,127,28,58,-7,3,-56,44,32,59,106,5,91,-77,54,32,-52,-63,7,125,30,-5,8,-10,11,-80,19,-18,-15,-34,34,-19,61,68,-9,63,8,-3,-113,22,7,46,-26,-9,39,-3,-94,59,17,60,52,-64,0,-90,-47,126,-46,-65,11,-67,79,23,-16,3,-1,53,-32,40,-84,-19,-17,38,117,46,5,53,-19,-66,43,-50,-106,89,91,7,-44,-77, 
  /* [13][0][][] */ -41,51,18,-62,-106,-5,28,-14,-32,-42,-7,-41,65,-91,-67,-56,-13,-74,-63,3,-93,-31,25,59,2,-7,115,11,27,14,48,33,0,2,-105,60,-44,-83,30,-55,127,2,1,55,41,-75,41,-1,28,-4,-40,44,46,-15,9,80,33,-56,-47,-10,63,62,14,-92,-55,45,-45,-2,-87,-60,-65,-23,-63,21,-41,-108,-120,-22,66,91,1,38,40,-77,81,24,-9,-22,-57,-29,-6,75,-59,37,-6,-1, 
  /* [14][0][][] */ 12,15,-91,0,102,96,-126,-21,44,-50,83,-2,36,-29,-44,-65,-65,21,35,127,10,-22,19,26,6,-4,-37,80,-9,-31,-38,18,74,13,-34,1,-33,83,116,-24,53,-9,44,5,3,-24,59,-58,40,-36,-18,-40,23,1,-15,0,27,85,-69,15,-4,-45,-36,-109,39,-40,-61,9,-75,28,-33,15,-6,-40,-2,-28,47,-4,-74,-32,8,-9,7,-14,-45,11,30,-17,-11,65,57,24,9,-35,-69,-59, 
  /* [15][0][][] */ -81,-9,37,-83,-19,-29,-14,-72,-42,52,11,95,-25,-4,-2,88,-83,-12,17,-50,11,-18,-10,-73,37,-9,50,-46,-44,-64,-29,20,-53,26,73,-117,7,-46,-3,18,-6,17,27,6,16,-16,39,100,-65,17,-12,-46,-16,45,-5,-59,-127,-70,54,-10,-51,23,-40,17,-115,8,12,10,65,-68,76,3,27,-52,-22,-61,-9,16,50,-9,1,69,53,18,22,-48,-110,-8,-33,-14,-56,59,36,-2,-8,50, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0027963407337665558, 0.0037711893673986197, 0.0026145682204514742, 0.0029528317973017693, 0.0030923981685191393, 0.002981407567858696, 0.0033054661471396685, 0.0022120701614767313, 0.0037142140790820122, 0.00296177645213902, 0.0020973905920982361, 0.0028818876016885042, 0.002934594638645649, 0.0029884763062000275, 0.0029158520046621561, 0.0038613514043390751, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -1136, 3378, -4491, -2335, -1861, 1980, -10184, 1076, 407, -3970, 1532, -1388, -1036, 11139, 6029, -2371, 13950, 1864, -3275, 2057, -3358, -1535, -2809, -267, 223, -2989, -1564, -3510, 2200, -8593, -1118, 530, 16512, -4834, -7361, -17, -2314, -1350, 234, 8646, 1096, 1985, -2239, -5846, 10261, 7527, 3751, 11418, -1336, 6106, 9192, -6846, 293, -4363, -2110, 13470, -1313, 3175, 15241, -2136, 9025, 10474, 8187, -9278, -454, 3352, -5051, 7336, 496, -1377, -3668, 2744, 13668, -898, -4300, 11813, -4182, -663, 8779, 3180, 4233, 15552, 2681, 1977, 15652, -2314, 936, -3289, 2181, -6186, 24966, -853, 5808, 2841, -4365, -5399, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00035279235453344882, 0.00013522990047931671, 0.0001053198502631858, 0.00021107342035975307, 0.00027025086455978453, 0.00034357263939455152, 0.00019620050443336368, 0.00024461274733766913, 0.00021567806834354997, 0.00019800038717221469, 0.00017552159260958433, 0.00055059982696548104, 0.00021927394845988601, 9.7870477475225925e-05, 0.00017628421483095735, 0.00014711340190842748, 9.5260125817731023e-05, 0.00028295468655414879, 0.00015515326231252402, 8.2784041296690702e-05, 0.00016813795082271099, 0.00033134149271063507, 0.00018963559705298394, 0.00032744996133260429, 0.00057228078367188573, 0.00018092813843395561, 0.000344824482453987, 0.00014944953727535903, 9.3285059847403318e-05, 0.00012335769133642316, 0.00034212801256217062, 0.00022451262339018285, 0.00011570873175514862, 0.00011970725608989596, 0.00015175234875641763, 0.00040451949462294579, 0.00017387091065756977, 0.00035216525429859757, 0.00045824155677109957, 0.00010455847950652242, 0.00016256826347671449, 0.0002620452141854912, 0.00016056523600127548, 0.00012092309043509886, 9.2971873527858406e-05, 0.00013569937436841428, 0.00020177825354039669, 0.00011379336501704529, 0.00020032566681038588, 6.426547042792663e-05, 0.00020257435971871018, 0.00013550318544730544, 0.00054873764747753739, 0.0001490300492150709, 0.00024127351935021579, 0.00013095064787194133, 0.00020826952822972089, 0.0002052954223472625, 0.00010146752902073786, 8.9686494902707636e-05, 0.00013112404849380255, 0.00012130950199207291, 0.0001093498503905721, 8.8568194769322872e-05, 0.00021433604706544429, 0.00036236975574865937, 0.0001873894507298246, 0.00018526497296988964, 0.0002161683514714241, 0.0002158930292353034, 0.00028294508229009807, 0.00014966560411266983, 8.2374295743647963e-05, 0.00017676630523055792, 0.00025210890453308821, 0.00013384157500695437, 8.9134518930222839e-05, 0.00025095997261814773, 0.00020984229922760278, 0.00020811817375943065, 0.00022422500478569418, 7.0453505031764507e-05, 0.00024210881383623928, 0.00022921961499378085, 0.00011174798419233412, 0.00016619850066490471, 0.00014012516476213932, 0.00022086514218244702, 0.00032579436083324254, 0.00012384071305859834, 4.6780060074524954e-05, 0.0002294481237186119, 0.00021645530068781227, 0.00029110308969393373, 0.00016018397582229227, 0.000219834124436602, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 29,80,31,-13,-24,-2,52,28,58,-62,-34,31,-55,-26,10,-127,-5,-14,-7,33,61,62,59,109,14,-39,-23,5,-60,43,33,-5,-49,17,4,127,-20,23,-19,-30,32,-36,47,22,-49,-42,-26,-34,32,-65,-22,-1,6,79,-26,-46,-74,-99,-76,-88,-117,18,-64,58,-65,8,58,-20,-46,45,33,15,-95,-33,31,-4,39,-45,-67,20,-42,-48,39,-44,-127,-64,-54,10,-82,75,-126,4,73,-27,73,18, -35,-48,4,7,-36,72,-6,-39,47,61,-34,32,-66,5,-67,127,-74,52,-3,66,127,17,110,127,-12,-25,1,55,-51,94,-3,-127,120,118,50,43,91,55,-29,-127,127,-7,101,113,-1,-53,109,-87,19,-127,-127,-5,-5,127,-31,-127,34,5,-127,-18,-19,-127,-70,127,-27,46,108,-42,46,127,127,5,-94,59,-35,-127,45,-55,-18,127,-55,-119,127,-78,-83,-33,118,26,127,127,-110,19,127,-58,93,55, 31,-111,54,-46,-7,-14,67,27,20,65,-127,9,-42,34,-84,-74,-10,9,-20,13,75,33,76,98,5,-59,15,19,-45,31,-35,-65,-96,-49,12,61,2,10,10,12,-1,51,18,63,-38,-3,-20,-24,21,-84,-27,-5,-2,21,68,-44,76,-113,-32,-62,-105,-62,-127,1,28,26,43,-25,-32,69,-23,45,-6,-127,1,28,26,-18,-73,-10,0,-127,6,3,-45,-46,-31,-43,-100,26,-62,56,35,5,39,-5, 
  /* [0][1][][] */ 80,-26,40,127,27,-62,104,19,-40,-127,13,127,8,-127,-29,28,-71,-46,88,35,-85,26,-127,-64,7,59,-90,127,-112,44,127,60,-42,83,53,55,-91,-8,-37,-60,68,-127,39,59,-127,-127,31,-101,-127,-94,-48,53,105,-17,100,2,-127,-29,-35,57,-53,-81,-1,48,-92,-33,127,-108,-94,67,-26,-127,-122,112,127,-87,127,96,-30,-103,127,-100,-59,127,-20,3,-92,75,-13,0,-125,0,-38,-77,127,11, -127,-17,-127,84,-116,-127,-127,-127,58,-10,87,58,-61,-56,34,104,-127,-127,127,127,37,-127,-96,11,-127,127,13,92,-108,5,-81,45,-122,94,127,-95,62,110,127,-24,-59,3,28,47,-8,-24,-127,-127,-7,-61,-30,79,5,29,51,-1,11,23,48,28,59,-54,-116,69,16,-127,20,127,16,60,-68,-114,-57,125,-86,-100,90,127,127,-120,-109,-3,-93,52,-28,-127,127,127,86,114,-127,-127,-122,-51,-7,127, 65,-31,124,41,30,-11,62,8,-77,105,-60,19,34,-33,-127,56,-21,-40,14,2,-95,21,-60,-96,20,-6,127,-27,127,127,-8,-94,-1,-127,29,66,-127,-27,-32,-81,-5,70,49,127,-7,51,-17,-72,120,-51,-35,80,34,-27,-127,9,76,-9,-112,122,-127,-69,-51,65,127,-26,52,-72,-127,-11,-29,-60,-42,-90,36,-33,41,8,-67,-35,-103,-65,-36,123,-94,11,-61,4,-44,-60,-52,37,-29,127,71,-15, 
  /* [0][2][][] */ 27,-127,50,0,48,61,76,31,-82,-76,47,36,34,-46,-8,35,-57,44,11,85,-34,31,46,-41,64,94,-2,-7,-66,10,31,12,-82,30,-17,-25,78,51,-4,-94,-22,-25,10,-30,-58,-58,-5,48,-11,8,-39,93,86,16,-31,-66,-45,13,29,89,-61,12,40,35,-20,32,14,-22,36,27,53,69,-91,-75,46,12,0,-43,-63,-16,-47,-79,-22,-33,-97,63,-73,-12,-117,61,-40,82,-69,-15,-13,-16, -31,-16,120,32,127,59,24,-23,-127,14,28,30,127,-62,-39,0,-26,66,-48,-11,-2,-6,53,20,48,-24,-10,42,-49,8,-3,-4,-101,58,8,-5,97,127,37,-74,-42,-31,-127,-4,-15,20,-66,-3,-20,-45,-48,127,127,-46,-23,-120,27,127,-14,92,99,-64,58,52,-4,-5,40,-21,119,-35,69,81,-127,32,3,-110,35,-68,-48,-46,2,-90,-31,-73,-22,125,71,-19,87,42,14,73,-99,-24,20,-5, 46,46,69,-18,22,16,74,88,-24,103,7,-2,33,-48,-26,96,-19,22,-38,26,-12,43,28,-67,49,62,22,60,-13,38,-20,-79,-127,-7,-16,-35,68,94,-16,-57,-3,-23,27,2,-77,-7,-39,58,9,23,44,16,9,10,25,-22,19,11,0,127,-64,29,23,17,34,24,-7,-12,32,-29,55,76,2,12,22,8,15,-15,-91,20,2,-55,-34,18,-127,111,-95,-12,-91,111,-17,74,-41,-19,10,-10, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.014993675053119659, 0.0057472707703709602, 0.0044760936871170998, 0.0089706201106309891, 0.011485661379992962, 0.014601836912333965, 0.008338521234691143, 0.010396040976047516, 0.009166317991912365, 0.00841501634567976, 0.0074596675112843513, 0.02340049110352993, 0.0093191424384713173, 0.0041594952344894409, 0.0074920789338648319, 0.0062523195520043373, 0.0040485551580786705, 0.012025574222207069, 0.0065940134227275848, 0.0035183215513825417, 0.0071458625607192516, 0.014082012698054314, 0.0080595128238201141, 0.013916622847318649, 0.024321932345628738, 0.0076894457451999187, 0.014655039645731449, 0.0063516050577163696, 0.0039646150544285774, 0.0052427016198635101, 0.014540440402925014, 0.0095417862758040428, 0.0049176211468875408, 0.0050875581800937653, 0.0064494744874536991, 0.01719207875430584, 0.0073895137757062912, 0.014967023395001888, 0.019475266337394714, 0.0044437353499233723, 0.0069091510958969593, 0.011136921122670174, 0.0068240226246416569, 0.0051392312161624432, 0.003951304592192173, 0.0057672234252095222, 0.0085755754262208939, 0.0048362179659307003, 0.0085138408467173576, 0.0027312824968248606, 0.0086094103753566742, 0.0057588852941989899, 0.023321349173784256, 0.0063337772153317928, 0.01025412417948246, 0.0055654025636613369, 0.0088514545932412148, 0.008725055493414402, 0.0043123699724674225, 0.0038116758223623037, 0.0055727716535329819, 0.0051556536927819252, 0.0046473685652017593, 0.003764148335903883, 0.0091092819347977638, 0.015400714240968227, 0.007964051328599453, 0.0078737614676356316, 0.0091871544718742371, 0.0091754533350467682, 0.012025166302919388, 0.0063607878983020782, 0.0035009074490517378, 0.0075125675648450851, 0.010714628733694553, 0.0056882668286561966, 0.0037882169708609581, 0.010665798559784889, 0.0089182974770665169, 0.0088450219482183456, 0.0095295626670122147, 0.0029942737892270088, 0.010289624333381653, 0.009741833433508873, 0.0047492892481386662, 0.0070634358562529087, 0.0059553193859755993, 0.009386768564581871, 0.013846259564161301, 0.0052632302977144718, 0.0019881525076925755, 0.0097515452653169632, 0.0091993501409888268, 0.012371880933642387, 0.0068078190088272095, 0.0093429498374462128, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 4895, 2545, 2798, -1189, 7690, 7992, 5878, 1005, -1232, 14532, 284, -4207, 1550, 3700, 251, -564, 3229, 5022, 217, -382, 3925, 7210, 8571, -2301, -2744, -1035, 7401, -1010, 1105, 1586, 8895, -1103, 6993, 1452, 2992, -3736, -237, -4785, -401, 1171, 1983, 1557, 706, -233, 717, 2336, 2604, 4961, 1697, 2541, 6691, 571, -8169, 1182, 680, 2642, 3052, 2681, 3874, 893, -757, 3886, 2563, 3849, 3139, 8029, -3454, 2268, 5487, -1938, 7644, 1950, 1563, 4068, 2778, 1784, -366, 2087, 4535, 4281, 1768, 1445, 14602, 1765, 1930, 2242, 357, -540, 15650, -417, 362, -878, 8671, 2581, -1022, -799, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00014270030078478158, 0.0001494340249337256, 0.00011452168837422505, 0.00023918988881632686, 0.00011100077972514555, 9.8680982773657888e-05, 0.00013161246897652745, 0.00029270153027027845, 0.00013358391879592091, 6.7224347731098533e-05, 0.00021122787438798696, 0.00012938889267388731, 0.00025381706655025482, 0.0001580549287609756, 0.00022731052013114095, 0.00018695270409807563, 0.00018668745178729296, 0.00011860912491101772, 0.00014964908768888563, 0.00017666867643129081, 0.00014339984045363963, 0.00012086717470083386, 9.2815484094899148e-05, 0.00017015902267303318, 0.00023058251827023923, 0.0001440747146261856, 0.0001202693601953797, 0.00014555496454704553, 0.00018040866416413337, 0.00015949219232425094, 9.0784255007747561e-05, 0.00025747806648723781, 0.00011533639917615801, 0.00026372075080871582, 0.00018798423116095364, 0.00018074701074510813, 0.00020540806872304529, 0.00013654654321726412, 0.00019830735982395709, 0.00024094160471577197, 0.00021970228408463299, 0.00019142661767546088, 0.00031351804500445724, 0.00019909359980374575, 0.0002714306756388396, 0.00021985963394399732, 0.00023717286239843816, 0.00012733104813378304, 0.00028860883321613073, 0.00018924108007922769, 0.00011720779002644122, 0.00026931185857392848, 8.5144303739070892e-05, 0.00025106497923843563, 0.00022198187070898712, 0.00016314025560859591, 0.00016487587708979845, 0.0001370892277918756, 0.00018194814037997276, 0.00020581652643159032, 0.00019884688663296402, 0.00016097734624054283, 0.00020209599460940808, 0.00015749373415019363, 0.00015596873709000647, 9.7540672868490219e-05, 0.0001535763731226325, 0.00015042762970551848, 0.00014018257206771523, 0.000145521349622868, 0.00010139915684703737, 0.00013528400450013578, 0.00022496073506772518, 0.00012899158173240721, 0.00020398425112944096, 0.00021711707813665271, 0.00016057999164331704, 0.00018815764633473009, 0.00012240989599376917, 0.00014031989849172533, 0.00025553599698469043, 0.00024829938774928451, 6.6986627643927932e-05, 0.0001291022781515494, 0.00015623903891537338, 0.00022624019766226411, 0.00027165710343979299, 0.00029848617850802839, 6.0318147006910294e-05, 0.00024585233768448234, 0.00032395307789556682, 0.0002039915561908856, 0.00010217923409072682, 0.0002024145214818418, 0.00020040421804878861, 0.00019134079047944397, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -22,103,-100,-46,-5,-26,-83,-17,59,-45,63,-45,111,-62,-6,-127, 
  /* [1][0][][] */ -119,46,-81,-98,-60,9,-33,49,-38,-9,127,-19,77,100,28,59, 
  /* [2][0][][] */ -58,-32,-69,-34,-55,-23,51,-52,-127,101,48,52,-13,58,-98,126, 
  /* [3][0][][] */ -52,-82,-9,-30,-83,26,-27,-127,-33,10,42,-27,-14,-11,-72,-16, 
  /* [4][0][][] */ 63,13,-2,19,-22,-42,-93,42,23,45,-3,8,6,-9,-7,-127, 
  /* [5][0][][] */ -59,30,-38,-39,56,-106,-73,-1,79,-3,-25,-13,36,-120,-33,-127, 
  /* [6][0][][] */ -47,-50,-2,-20,-82,50,46,-20,-32,-31,54,10,-24,20,-127,8, 
  /* [7][0][][] */ -13,70,127,-89,7,50,-3,-53,15,68,-74,-23,8,2,3,17, 
  /* [8][0][][] */ -62,27,-3,-9,127,-1,98,76,-63,9,-44,2,16,103,-115,-65, 
  /* [9][0][][] */ 49,33,30,-3,-127,-65,6,-63,69,-2,85,7,4,-126,-4,-16, 
  /* [10][0][][] */ -17,-60,-6,-19,-127,36,25,-37,-30,-37,-33,45,-12,55,-43,46, 
  /* [11][0][][] */ 100,-45,-45,96,-127,3,59,4,88,109,-53,37,22,-68,3,70, 
  /* [12][0][][] */ 13,-15,127,23,13,-20,22,25,54,-33,64,11,4,57,-71,85, 
  /* [13][0][][] */ -7,-54,-22,-12,4,21,92,43,-112,5,40,31,18,127,75,-69, 
  /* [14][0][][] */ 82,-51,127,18,78,37,71,42,51,25,15,-3,17,-41,27,-71, 
  /* [15][0][][] */ -2,114,-5,-30,54,127,-56,81,-60,-7,-17,16,-39,104,-23,-32, 
  /* [16][0][][] */ -35,68,75,-95,3,93,34,-43,-46,-24,-27,25,73,17,89,127, 
  /* [17][0][][] */ 46,77,52,-78,44,-86,-48,-1,-10,70,-13,27,-20,-56,127,-103, 
  /* [18][0][][] */ -79,-6,-70,-109,100,94,-33,-60,16,56,122,60,-27,127,-54,-12, 
  /* [19][0][][] */ 39,108,98,72,56,-59,-49,-37,-37,106,35,127,85,58,-83,23, 
  /* [20][0][][] */ 127,-20,32,-13,-68,-33,-47,66,-18,-31,-124,-51,94,-76,56,-38, 
  /* [21][0][][] */ -77,-43,-45,77,-1,-36,-127,97,-9,11,54,62,-24,37,-85,78, 
  /* [22][0][][] */ 120,61,-75,-58,122,70,-127,104,66,67,48,49,-46,5,38,18, 
  /* [23][0][][] */ -71,19,-12,54,-5,83,87,127,0,92,-52,-80,8,25,-4,-47, 
  /* [24][0][][] */ 25,-47,10,-23,127,15,11,-9,19,-9,39,47,-42,10,-7,-26, 
  /* [25][0][][] */ 127,-33,66,28,-1,-11,-49,86,119,10,-24,22,111,-48,97,35, 
  /* [26][0][][] */ 25,-15,86,51,59,-3,-41,-7,-9,7,14,127,7,-59,11,-25, 
  /* [27][0][][] */ -70,-10,-31,-6,-26,72,-13,-68,0,-79,107,-15,77,-54,127,89, 
  /* [28][0][][] */ -53,-1,-70,-127,-14,-104,-7,-72,-61,95,-64,3,-43,8,2,98, 
  /* [29][0][][] */ 83,78,-79,107,-10,122,-82,50,80,15,13,98,-127,-15,34,70, 
  /* [30][0][][] */ -75,84,-74,-33,127,-32,-10,30,-65,73,-25,44,-19,103,-47,61, 
  /* [31][0][][] */ 32,-82,55,41,66,-51,-62,50,-14,-39,29,-48,-65,38,34,127, 
  /* [32][0][][] */ -72,37,-10,55,-102,52,32,47,13,-127,1,-56,32,28,67,17, 
  /* [33][0][][] */ -58,16,30,95,-23,30,-23,-19,-32,-39,25,-10,-20,15,25,127, 
  /* [34][0][][] */ 54,45,-127,-103,48,1,-35,92,49,-3,-25,-58,-55,-49,-44,76, 
  /* [35][0][][] */ 75,1,25,-22,5,22,-87,-35,-28,-127,-24,31,36,5,42,-12, 
  /* [36][0][][] */ 53,28,-114,-38,97,127,-50,60,-41,-11,117,64,3,-17,-79,80, 
  /* [37][0][][] */ 62,19,71,-36,94,-101,9,23,-127,88,-100,-45,-23,47,106,43, 
  /* [38][0][][] */ -66,82,40,-68,83,5,59,-88,3,13,-95,60,-35,-91,-127,3, 
  /* [39][0][][] */ 66,31,-127,-90,-49,-11,26,-56,7,15,-19,-65,63,4,-114,-42, 
  /* [40][0][][] */ -35,2,-83,-63,-23,-8,19,-127,-16,-7,-8,-20,52,71,67,20, 
  /* [41][0][][] */ -48,-113,-17,127,-71,-61,-104,-50,26,-80,41,-41,-107,-78,44,-10, 
  /* [42][0][][] */ -89,71,-5,-127,45,49,-4,-10,82,50,-29,53,78,-26,-74,-30, 
  /* [43][0][][] */ 15,24,6,3,97,18,3,58,28,51,-18,-115,-127,-63,-32,-24, 
  /* [44][0][][] */ 73,20,32,-33,-15,9,21,64,-21,-71,62,-31,127,20,-61,-1, 
  /* [45][0][][] */ -4,-60,-59,5,0,-56,30,15,38,-34,37,70,-72,127,4,-16, 
  /* [46][0][][] */ -6,-54,23,72,28,-12,-45,51,27,-16,44,-10,34,60,17,127, 
  /* [47][0][][] */ -83,-69,43,97,43,8,90,-22,-24,-98,-127,23,69,-21,-115,21, 
  /* [48][0][][] */ -117,55,6,-17,40,32,-36,-107,-6,-79,65,-78,64,-127,-18,2, 
  /* [49][0][][] */ -54,18,23,-46,-1,25,127,94,-44,-45,11,29,-45,45,-45,19, 
  /* [50][0][][] */ 63,59,-76,30,62,-114,-47,19,-40,22,7,-7,24,-90,-127,-44, 
  /* [51][0][][] */ -27,54,-2,127,-25,79,-28,-27,40,-36,-7,-78,-38,-28,-30,67, 
  /* [52][0][][] */ -127,2,-15,44,8,92,73,11,33,-36,-52,-93,-104,-43,-87,-28, 
  /* [53][0][][] */ 7,-97,-127,-90,-45,-20,-52,84,53,-56,-24,80,6,31,83,98, 
  /* [54][0][][] */ 65,25,-14,2,-39,120,59,-9,-25,-42,11,-8,-57,-9,-127,19, 
  /* [55][0][][] */ -10,-20,-89,-14,46,-63,96,79,-50,-64,-127,-45,35,-35,-29,63, 
  /* [56][0][][] */ 32,-58,-127,-89,-61,61,-96,5,-45,-1,0,59,113,42,10,18, 
  /* [57][0][][] */ -70,-41,46,-34,102,9,63,26,-31,-2,-3,59,-40,101,-127,60, 
  /* [58][0][][] */ 28,3,27,-3,43,-9,-73,-35,23,-127,-54,-22,-108,-31,-22,61, 
  /* [59][0][][] */ -81,-35,27,53,47,34,-86,-46,51,127,-109,-23,-28,22,-19,30, 
  /* [60][0][][] */ -5,-86,30,43,-127,-106,68,40,22,16,-48,92,-23,-62,24,81, 
  /* [61][0][][] */ 17,16,-64,-22,-61,-13,-127,-84,-43,22,46,81,49,-31,112,36, 
  /* [62][0][][] */ 6,-43,67,-51,47,-37,53,89,-67,127,10,90,1,61,43,87, 
  /* [63][0][][] */ 8,-127,13,-20,-80,37,54,-26,-7,-29,-14,-37,-45,125,116,37, 
  /* [64][0][][] */ -35,-34,-121,-100,3,14,-15,-68,3,-100,69,49,38,-35,-47,127, 
  /* [65][0][][] */ -28,-11,30,2,57,-26,90,42,-47,22,-96,16,24,127,-121,13, 
  /* [66][0][][] */ -32,-97,8,-127,-31,-122,13,13,-8,-31,14,86,-36,-20,-68,54, 
  /* [67][0][][] */ -51,-80,-45,5,-81,112,-9,-124,-99,25,-91,-127,34,4,-4,-39, 
  /* [68][0][][] */ 39,27,21,-43,-88,41,-61,-66,-127,-46,-8,19,8,19,56,-70, 
  /* [69][0][][] */ 39,-27,92,8,-12,-70,-87,76,-32,127,-67,-15,4,29,94,-18, 
  /* [70][0][][] */ 43,-31,7,71,-127,12,-35,-74,106,122,-26,42,70,-55,-4,25, 
  /* [71][0][][] */ 116,-79,32,58,-106,-50,10,-45,64,-72,-13,-8,86,-76,127,47, 
  /* [72][0][][] */ 8,-31,53,127,17,11,-116,51,79,12,23,9,-42,-56,-38,54, 
  /* [73][0][][] */ 19,-26,68,-127,79,-59,-92,36,-45,70,-41,21,17,-27,19,-86, 
  /* [74][0][][] */ 63,-13,3,46,-127,2,73,14,-73,-39,-11,-19,27,-39,-28,29, 
  /* [75][0][][] */ 63,102,-53,-7,57,24,-45,10,0,-29,36,59,-127,4,12,44, 
  /* [76][0][][] */ -107,-79,15,-81,-68,-16,112,27,-80,-4,101,46,-43,-116,-46,127, 
  /* [77][0][][] */ -99,86,2,22,-31,-35,75,85,38,-57,5,127,-56,64,-52,85, 
  /* [78][0][][] */ 113,64,-21,14,-66,-32,-127,-95,-70,26,-105,-87,83,-77,29,-9, 
  /* [79][0][][] */ -39,11,42,-14,-19,-127,-92,-58,-28,44,67,99,-23,101,-60,31, 
  /* [80][0][][] */ 47,73,22,-88,-18,15,127,22,25,50,-51,7,99,-45,-34,38, 
  /* [81][0][][] */ 39,-46,8,-127,57,8,-31,111,28,-20,20,-19,-44,31,-59,-33, 
  /* [82][0][][] */ 46,29,49,-16,88,-125,56,10,4,127,-11,42,30,-53,12,-66, 
  /* [83][0][][] */ -66,50,34,-20,76,55,127,105,-10,56,-85,-45,-80,97,-90,-43, 
  /* [84][0][][] */ 10,-51,14,90,-16,-86,-100,92,-14,72,-67,-83,-121,13,20,-127, 
  /* [85][0][][] */ -78,43,-15,-34,-47,22,-25,-28,-9,52,-9,-34,-127,-47,-77,18, 
  /* [86][0][][] */ -14,40,65,107,5,-41,45,59,22,-7,-56,-52,62,50,-127,-55, 
  /* [87][0][][] */ -15,29,127,-52,-97,-58,-16,25,20,10,-11,43,-55,18,-4,-15, 
  /* [88][0][][] */ -47,-127,-114,22,27,38,14,-9,-5,-110,-115,-25,110,-8,-18,74, 
  /* [89][0][][] */ 23,20,2,-127,23,-64,-25,42,47,-77,45,-85,-14,12,24,-3, 
  /* [90][0][][] */ 6,49,-3,-3,-14,40,38,75,-6,-42,6,127,26,10,-42,70, 
  /* [91][0][][] */ -111,-36,-29,55,97,43,-48,-44,-82,10,34,127,-106,-88,-84,31, 
  /* [92][0][][] */ -15,67,-40,-50,-92,35,-43,38,4,59,127,107,-27,7,-22,52, 
  /* [93][0][][] */ 80,42,63,-19,-127,-66,38,47,-49,-52,-19,-54,32,-36,-21,17, 
  /* [94][0][][] */ -31,-127,43,-102,-22,-4,-18,24,64,-21,-8,40,33,46,-37,46, 
  /* [95][0][][] */ -16,-26,-46,-58,106,127,-8,30,102,59,-72,36,-45,104,-63,30, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0017312358831986785, 0.0018129292875528336, 0.001389373792335391, 0.0029018446803092957, 0.0013466582167893648, 0.0011971947969868779, 0.0015967185609042645, 0.003551046596840024, 0.00162063620518893, 0.00081556383520364761, 0.0025626104325056076, 0.0015697423368692398, 0.0030793012119829655, 0.0019175177440047264, 0.0027577246073633432, 0.0022681048139929771, 0.0022648866288363934, 0.0014389624120667577, 0.0018155383877456188, 0.0021433392539620399, 0.0017397226765751839, 0.0014663570327684283, 0.0011260347673669457, 0.0020643642637878656, 0.0027974203694611788, 0.0017479101661592722, 0.0014591043582186103, 0.001765868510119617, 0.0021887125913053751, 0.0019349546637386084, 0.0011013919720426202, 0.0031237162183970213, 0.0013992578024044633, 0.0031994523014873266, 0.002280619228258729, 0.0021928173955529928, 0.0024920047726482153, 0.0016565787373110652, 0.0024058590643107891, 0.0029230965301394463, 0.0026654216926544905, 0.0023223820608109236, 0.0038035917095839977, 0.0024153976701200008, 0.0032929889857769012, 0.0026673306711018085, 0.002877374179661274, 0.0015447766054421663, 0.0035013940650969744, 0.0022958673071116209, 0.0014219614677131176, 0.0032672837842255831, 0.0010329681681469083, 0.0030459128320217133, 0.0026930775493383408, 0.0019792127422988415, 0.0020002692472189665, 0.0016631624894216657, 0.0022073895670473576, 0.0024969601072371006, 0.0024124046321958303, 0.0019529723795130849, 0.0024518226273357868, 0.0019107094267383218, 0.0018922081217169762, 0.0011833605822175741, 0.0018631840357556939, 0.0018249836284667253, 0.0017006909474730492, 0.0017654608236625791, 0.0012301716487854719, 0.0016412616241723299, 0.0027292170561850071, 0.0015649221604689956, 0.0024747310671955347, 0.0026340580079704523, 0.0019481517374515533, 0.0022827230859547853, 0.0014850733568891883, 0.0017023569671437144, 0.0031001553870737553, 0.003012361004948616, 0.00081267982022836804, 0.0015662651276215911, 0.0018954875413328409, 0.0027447394095361233, 0.0032957361545413733, 0.0036212257109582424, 0.00073177798185497522, 0.0029826734680682421, 0.0039301891811192036, 0.0024748195428401232, 0.0012396355159580708, 0.0024556871503591537, 0.0024312981404364109, 0.0023213408421725035, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -31430, -8425, -632, -4828, 8288, -7702, 26339, -9072, 8589, -11071, 24080, 19092, -1377, -23502, -1319, 16634, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.3941941082011908e-05, 5.9125832194695249e-05, 5.770110510638915e-05, 6.7614200816024095e-05, 8.0870777310337871e-05, 0.00013500811473932117, 5.7242756156483665e-05, 5.891502951271832e-05, 0.00011201889719814062, 0.00012083809997420758, 8.0535188317298889e-05, 7.5814532465301454e-05, 7.7329255873337388e-05, 5.9510100982151926e-05, 6.7173299612477422e-05, 7.1382928581442684e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 17,51,20,-16,-44,-107,-10,23,-9,-70,16,-21,67,-37,50,27,-56,-55,43,15,100,25,-84,-11,-11,69,114,61,13,85,72,-41,6,25,21,-9,28,38,-17,50,127,11,7,-16,-6,6,-3,-24,18,-17,69,6,-51,27,67,14,-17,-67,11,47,-31,24,-27,-21,57,46,78,3,15,-23,25,-13,13,42,15,44,78,-11,53,36,39,30,47,34,-54,-3,-16,57,44,16,-113,-23,19,-23,88,89, 
  /* [1][0][][] */ 47,38,-34,-49,-49,-68,88,-18,-48,-12,-54,-70,37,-14,-19,-61,10,13,-18,8,-3,-66,68,-72,-39,-1,-10,43,-36,13,-42,4,-8,15,4,12,-24,51,-86,124,50,-10,-38,-36,76,-61,-23,45,-31,-3,34,-110,8,68,111,7,18,15,-85,44,-78,-6,33,1,55,53,94,-8,-45,-127,1,-23,44,52,-25,34,-33,10,96,-5,71,-27,47,-47,-38,-61,-33,7,-23,-15,33,-13,73,-66,-49,75, 
  /* [2][0][][] */ 24,-19,28,-5,93,72,-34,-5,-41,38,-1,-16,8,-16,-34,54,13,-34,-87,-8,-13,-42,-26,80,-5,11,-65,25,-35,-14,-24,76,-23,-17,-23,18,-38,21,-30,-20,79,42,-3,34,31,79,-3,-8,-127,2,-30,39,-40,61,23,-41,71,21,70,27,-21,2,-5,33,40,-11,-55,4,18,-12,-32,-25,7,39,37,52,-61,-17,-37,-47,14,50,89,-10,5,-65,-6,-75,-53,-26,4,98,-22,-39,91,-14, 
  /* [3][0][][] */ 22,-27,-21,-127,-36,-26,99,-26,25,88,-58,-7,23,-23,-40,36,51,38,-24,30,-31,-1,27,-22,-13,60,35,-30,-48,-5,-73,53,27,-15,9,-26,-1,-63,-4,94,-5,-9,-41,55,67,-56,-8,33,42,-8,16,-43,92,62,23,-26,-4,-23,-30,-16,-58,22,69,23,-14,-6,52,-61,-28,-26,-32,15,21,-49,9,-55,32,-39,115,18,8,-51,-50,-46,-37,-61,55,80,-50,48,-45,-5,24,-97,-53,30, 
  /* [4][0][][] */ -51,113,17,-17,-38,22,-51,-26,5,-21,21,-10,57,5,4,17,3,-38,-67,-48,45,-58,-53,-3,-29,-34,-4,-3,-58,127,-102,-7,21,-24,-5,-45,62,63,-44,27,48,-20,28,-31,-39,-14,76,-51,76,2,-57,-7,-55,37,55,7,-20,77,-54,78,-45,-49,-23,42,65,41,-77,8,-6,-35,4,-55,8,59,56,83,-24,10,-49,70,22,49,16,-66,43,-78,-46,-66,-37,-57,-47,-31,8,4,23,-35, 
  /* [5][0][][] */ 20,-27,45,-16,-29,-18,-16,-11,33,1,3,-27,-31,-15,39,-25,-10,-9,-59,-44,-21,22,-4,9,45,-47,67,-3,-8,37,37,71,-11,-76,19,12,-46,-46,-30,3,-56,-1,-12,31,15,3,-102,24,-30,27,49,-24,19,-49,0,20,-22,-66,-8,-71,24,8,-5,48,-58,-25,99,-10,-29,-2,12,24,-9,19,40,2,2,-6,127,28,-52,2,-30,26,31,84,17,82,7,-35,3,20,17,4,-32,15, 
  /* [6][0][][] */ 28,-84,59,21,-5,124,-44,-127,-39,-65,-58,55,-15,29,-12,51,2,30,-1,-54,-85,-11,-47,-28,28,-35,7,68,-70,37,0,-22,31,34,-17,4,-10,-47,22,-44,-80,26,29,-13,3,9,-90,-25,43,12,-34,-73,28,2,-33,-13,9,-14,18,-95,-32,-58,-14,2,14,-114,-48,-35,-90,3,-30,-42,-43,-67,8,-71,50,-14,-48,24,-58,79,-25,-100,47,-15,-20,16,-46,41,-39,67,34,-13,64,-112, 
  /* [7][0][][] */ -5,2,-74,77,-19,3,22,-14,-106,-18,54,45,18,-59,17,-68,-28,12,-35,-8,-69,-54,-31,-75,45,77,-11,42,14,43,-36,12,-29,-127,19,48,12,56,-35,6,-5,-52,8,-52,22,51,114,50,42,38,-53,18,17,-51,28,-59,-43,60,-105,-13,46,10,0,-21,60,-35,111,-13,-63,-73,51,-20,-19,-22,-80,-10,25,-75,95,-19,12,-24,-109,-38,46,1,-111,48,10,17,-30,43,66,-27,107,-4, 
  /* [8][0][][] */ 0,-29,12,-8,-23,-33,12,16,7,-14,28,24,18,20,-56,6,35,-16,0,11,-17,-68,-30,-16,-28,-14,29,7,-25,38,18,-26,-16,26,11,-8,-41,-9,10,1,14,42,10,-30,22,-19,24,8,22,-6,35,8,1,14,-42,19,-14,86,-47,-27,-11,-58,-44,-13,-59,2,-8,9,-10,19,45,-18,-56,-127,49,-104,15,16,-47,16,-10,1,17,61,50,-50,-29,36,-5,66,-10,-18,-28,-13,-10,-45, 
  /* [9][0][][] */ -10,-18,-39,-5,0,14,-2,42,-40,3,50,58,-28,32,-6,-22,-18,55,-21,-28,4,32,-19,-6,-23,16,-6,3,40,0,8,-11,-1,-9,-4,46,-14,-20,26,29,-9,-51,-2,12,2,45,-4,27,-19,8,-14,33,121,27,-2,-13,12,-17,16,30,-35,15,68,33,19,25,75,-22,32,-13,-8,24,2,-127,-31,-107,-10,12,47,6,16,14,2,-54,22,2,-27,-4,7,82,24,18,55,10,-26,35, 
  /* [10][0][][] */ 25,25,4,20,-19,26,-66,-22,44,0,-42,28,24,-2,26,-93,-39,30,-5,-15,12,-20,4,-72,17,-12,-92,42,-12,41,-8,6,27,3,-13,-20,24,-6,2,-24,17,-22,62,-40,-56,-8,35,11,29,-8,26,-21,-37,-37,-19,24,-18,21,-24,-20,5,-43,-19,26,-29,-46,-127,-48,-69,-35,42,-20,-19,60,8,26,37,-47,-109,15,-19,32,-25,-25,-4,15,-89,-123,-4,28,12,30,59,-30,32,27, 
  /* [11][0][][] */ 21,-46,-23,31,-16,65,-14,10,41,-12,-31,-20,6,-7,37,-11,-31,68,-4,-77,7,26,30,-33,26,23,61,-6,33,-56,-36,13,12,81,-90,-26,37,8,67,-31,-69,34,4,8,-70,-1,21,-28,60,-18,-20,-7,-26,-24,-89,60,-30,17,-11,-20,41,14,-31,-58,-17,-64,-127,-70,-27,-48,-91,15,42,30,-31,8,16,18,-127,-39,-4,2,-38,-9,-23,14,43,80,38,-48,8,2,-33,27,99,22, 
  /* [12][0][][] */ 13,26,-59,-41,33,-12,-25,45,23,-49,33,3,-7,-17,33,0,-15,-21,-30,7,19,48,-11,34,-36,-57,-106,-25,74,-25,44,3,3,-51,99,-12,44,-10,-3,45,-23,-60,12,58,28,-14,21,-31,-55,13,-34,127,83,-21,21,-72,4,-14,-52,-14,3,49,109,-14,-13,-6,24,-1,124,36,20,11,28,-10,-23,22,-26,-62,15,-52,33,-36,-10,-56,-2,8,-9,-76,-5,28,-64,13,5,43,1,65, 
  /* [13][0][][] */ 14,-2,-63,29,36,64,-14,-16,5,50,-48,65,-42,-28,80,-57,12,73,47,-8,-42,-55,12,31,64,84,11,21,8,41,37,-11,18,58,-34,40,21,-55,-91,-55,-26,-19,32,31,30,6,-26,14,-43,26,16,44,-42,-42,43,37,3,-52,-1,-31,29,19,-15,-21,-8,41,127,21,19,-11,-88,1,23,61,-87,71,19,-79,109,-49,-45,-39,23,-31,41,31,-53,-16,3,-27,29,32,55,-14,75,46, 
  /* [14][0][][] */ -9,73,22,-4,-97,-78,30,36,-62,-22,65,-6,-71,13,50,-20,-22,36,-44,47,-8,13,-119,8,-57,2,-70,-127,26,17,16,71,-54,40,23,-27,-37,-69,1,0,47,-25,37,-29,-7,39,-82,59,1,-38,77,20,4,62,-7,22,-34,4,18,92,19,63,9,43,51,-9,-16,-94,69,68,69,8,-42,36,22,21,41,26,24,20,-22,93,16,-102,94,-29,5,-2,-110,-15,-30,-20,-18,-15,18,48, 
  /* [15][0][][] */ 63,-52,8,29,51,20,-22,-42,-9,14,-71,-6,32,62,9,-34,-26,22,-95,-1,-14,-33,19,3,72,-28,83,16,33,-29,-35,46,61,14,-25,-105,50,54,83,16,32,19,-4,26,-61,-127,26,-56,-3,-21,6,23,-38,-59,-42,45,-14,-2,-13,-37,31,-69,-72,31,-5,16,-71,31,-34,-47,-36,-12,-5,-88,-77,-93,-25,-10,-101,12,40,-16,11,-11,-54,1,-24,11,63,83,18,-55,-10,-28,34,-51, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0031425324268639088, 0.0025128477718681097, 0.0024522969033569098, 0.0028736034873872995, 0.0034370080102235079, 0.005737844854593277, 0.0024328171275556087, 0.0025038886815309525, 0.0047608031891286373, 0.005135619081556797, 0.0034227455034852028, 0.0032221176661550999, 0.0032864932436496019, 0.0025291792117059231, 0.0028548650443553925, 0.0030337744392454624, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 8374, 1860, -5143, 20209, -2476, -3222, 1742, 10, -940, -5352, 5615, -7675, 10914, -3443, -2507, -8071, -1675, -1117, -15295, 204, 74, 4112, -6476, -902, -111, 9531, -18816, -11538, -230, -3160, 630, -5122, 16093, -1720, -2789, -430, -2103, 12096, 1560, 11188, 9040, 4222, 1322, -183, 753, -1196, 14980, 4193, -3072, -1751, -2180, -3498, -1634, -5884, 2736, 2054, 2349, 6713, 138, 7463, -722, 4532, -49, 10847, 11655, -1396, 12257, 16209, 321, 254, 6335, -795, -550, -2530, -1571, -2507, 10894, 11270, 9233, 6588, 8930, -2920, 13654, 10028, -1378, -112, 10778, -8224, 8922, 1593, -3778, -418, 544, -546, 26973, -748, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00011097788956249133, 0.00041119300294667482, 0.00015791419718880206, 9.034565300680697e-05, 0.00030954877729527652, 0.00057720724726095796, 0.00012181603233329952, 0.00020923721604049206, 0.00021456519607454538, 0.00019242726557422429, 0.00025507822283543646, 0.00012467813212424517, 0.00010169476445298642, 0.00011554520460776985, 0.00020146023598499596, 0.00015232773148454726, 0.0001918314810609445, 0.00043534659198485315, 7.1940317866392434e-05, 0.00034968045656569302, 0.00029019193607382476, 0.00019445805810391903, 0.0001178551246994175, 0.00016671828052494675, 0.0023651591036468744, 0.00013971634325571358, 0.00011864245607284829, 0.00010184462007600814, 0.00058531272225081921, 0.00014574889792129397, 0.00012596973101608455, 0.00017540925182402134, 6.783464050386101e-05, 0.00029888979042880237, 0.0001819645258365199, 0.00016673466598149389, 0.0003509897505864501, 0.00011739710316760466, 0.00019732718646991998, 0.00012093006080249324, 0.00030217858147807419, 0.00017741871124599129, 0.00028133022715337574, 0.00024119821318890899, 0.00029578548856079578, 0.00027178789605386555, 0.00015033385716378689, 0.00024360429961234331, 0.00022114267630968243, 0.0004000016488134861, 0.00020857146591879427, 0.00019934118608944118, 0.00015671167057007551, 0.00016353206592611969, 0.0002093477378366515, 0.00020723753550555557, 0.00011921249097213149, 0.0003325708385091275, 0.0007144185365177691, 0.00027115596458315849, 0.00044248841004446149, 0.00029462637030519545, 0.00017876981291919947, 7.9695309977978468e-05, 0.00022017161245457828, 0.00059279939159750938, 0.00014501444820780307, 8.829012222122401e-05, 0.00024464318994432688, 0.00053628778550773859, 0.00021239979832898825, 0.00031545863021165133, 0.00039383934927172959, 0.00019582087406888604, 0.0002002412365982309, 0.00020824857347179204, 8.3299266407266259e-05, 0.00019947132386732846, 0.00015319195517804474, 0.00017136773385573179, 0.00012302967661526054, 0.00026218837592750788, 9.644826059229672e-05, 0.00026482198154553771, 9.4414841441903263e-05, 0.00045477101230062544, 0.0001597337395651266, 0.00023565634910482913, 0.00014028513396624476, 0.00020888807193841785, 0.0001604214048711583, 0.00022877367155160755, 0.00035107144503854215, 0.00019445252837613225, 8.5769133875146508e-05, 0.00032182084396481514, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -29,-23,-43,-93,90,14,26,-48,12,3,-39,36,-115,11,5,-61,-15,25,22,-23,-29,17,13,63,17,-54,-59,74,9,0,32,12,41,17,-13,-66,21,-127,-44,42,-43,27,19,-5,-28,36,-95,-46,-20,29,-16,54,-64,3,31,-5,-27,-14,13,-48,-13,-36,-25,-127,-41,-17,-67,-72,-18,23,-2,1,67,-6,-61,1,-42,28,127,-52,-114,20,-127,-51,-64,-47,25,-4,-91,-3,15,-30,-4,2,-115,-13, 5,32,21,-79,-31,14,118,-73,12,-27,-66,68,-64,16,-85,35,-1,81,88,-28,-10,127,57,127,51,-56,117,127,83,36,127,-23,-103,-7,-31,-62,-22,-107,127,9,-78,-88,-7,-27,74,-35,-25,-20,8,41,23,120,-106,19,-87,0,-73,-20,-9,-2,24,-127,-127,-75,-77,-1,-11,-102,-23,18,-28,86,-127,-18,-17,-25,-127,-51,-20,-127,-127,4,-19,-99,83,61,-41,32,-111,5,54,-41,10,127,-94,-84, 21,11,-13,-99,85,30,14,-45,-2,31,-48,71,-4,-6,7,-13,-7,-9,92,-23,-42,-18,46,77,15,-46,-7,50,-19,13,60,33,43,9,25,97,2,-60,-12,7,-36,1,14,19,-35,-41,-72,-27,-6,21,2,75,9,2,-10,-15,50,-25,27,-35,11,-38,-48,-21,-54,-40,127,-59,-26,33,-62,2,-12,1,1,15,-2,32,-48,-29,-31,10,-103,-31,26,-47,-8,-4,-127,-31,57,57,16,16,-127,-5, 
  /* [0][1][][] */ -49,-9,15,-90,33,86,-66,-27,15,-18,-40,-27,-127,17,7,86,-17,38,108,18,48,-34,86,-21,61,37,127,39,-10,-16,-8,-2,-39,0,57,-12,17,-85,-79,-103,-43,-1,46,-21,-69,127,-111,-101,41,85,7,-44,-108,99,50,-18,-7,-34,41,-35,5,-14,84,-112,-40,34,-34,-86,-14,-6,-37,-2,86,118,-18,-35,-67,-57,-71,30,-73,5,-43,-80,-10,23,-127,60,-117,127,71,-56,127,16,-72,-3, 39,127,127,121,-127,-127,127,-28,127,127,-81,-125,-75,127,-39,97,127,-127,104,127,127,-82,127,-104,-127,-127,117,80,-127,127,-16,127,-100,127,127,-89,127,44,-10,-33,127,-13,-127,-93,127,-18,113,127,127,-127,127,-127,87,127,-127,127,-127,127,-127,127,-91,115,107,-83,127,127,-7,127,-107,-127,69,-127,14,127,127,59,23,-127,93,-26,8,127,44,127,127,71,-50,127,62,39,-56,-40,-89,12,-105,-16, -127,-22,67,-125,24,54,-87,-3,-19,5,-15,127,-99,16,18,127,-15,45,64,19,21,-72,98,-19,61,13,63,13,7,-2,46,7,-127,-25,56,127,9,1,-68,-127,-63,-15,16,2,-62,-78,-94,-94,65,95,-11,-16,127,31,66,-56,68,-23,46,-32,-25,-52,-103,-39,-39,-1,-70,-97,-25,-19,-127,0,20,-70,-14,127,-63,-74,-52,5,-29,-9,-61,-79,-1,40,-113,39,-62,-81,127,127,-47,11,-67,2, 
  /* [0][2][][] */ -56,-61,-27,-87,57,16,-26,36,-6,10,34,-6,-4,27,1,-59,2,2,21,-39,-28,-33,-17,-24,3,-7,47,13,11,-11,-43,31,4,8,-9,-11,7,-66,2,-23,-45,-13,17,48,-8,44,-127,-28,-44,9,-33,46,-1,47,29,-3,-37,-55,0,-71,-12,6,27,-80,-77,-14,124,28,33,33,31,-12,2,13,-28,-9,18,0,-46,-30,19,6,-78,-13,5,6,9,-1,-82,10,-56,-6,-20,-33,-85,5, -92,-76,79,-127,-25,10,45,127,-40,74,127,-51,-62,10,127,121,9,-15,127,-47,-71,-42,103,20,18,13,109,14,18,25,-118,-16,-121,-24,-57,-18,-95,-52,45,-91,-39,-127,-41,127,35,-19,-77,-10,-3,8,-19,24,64,54,-48,-57,-65,-75,33,-62,127,23,92,-67,-81,-43,-28,-39,127,34,17,11,40,-1,52,5,-10,-45,-8,53,-6,-14,-104,-57,69,-127,-35,26,-43,-20,-13,-31,13,-102,-55,127, -57,-17,32,-64,20,20,-44,12,-13,-19,7,95,75,-6,4,22,12,5,-5,-23,-56,-29,-5,-34,-8,34,24,12,23,4,-70,31,-69,9,-17,-1,8,-44,14,-32,-61,-8,8,23,-9,-6,-29,19,-39,17,-35,-12,33,-2,20,-13,22,-45,-12,-60,-14,9,-19,-66,-7,-29,-58,-23,38,17,-94,7,-40,-32,-4,20,3,-21,103,3,1,-3,-76,29,10,16,21,8,32,-23,-71,36,-12,-5,-38,2, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0047165602445602417, 0.017475701868534088, 0.0067113535478711128, 0.003839690238237381, 0.013155822642147541, 0.024531306698918343, 0.005177181214094162, 0.0088925817981362343, 0.0091190207749605179, 0.008178158663213253, 0.0108408248052001, 0.0052988207899034023, 0.0043220273219048977, 0.0049106711521744728, 0.008562060073018074, 0.0064739282242953777, 0.0081528378650546074, 0.018502229824662209, 0.0030574633274227381, 0.01486141886562109, 0.012333156540989876, 0.0082644671201705933, 0.005008842796087265, 0.0070855268277227879, 0.10051926225423813, 0.0059379446320235729, 0.0050423042848706245, 0.0043283961713314056, 0.024875789880752563, 0.0061943279579281807, 0.0053537134081125259, 0.0074548930861055851, 0.0028829721268266439, 0.012702815234661102, 0.0077334921807050705, 0.0070862229913473129, 0.014917063526809216, 0.0049893767572939396, 0.0083864051848649979, 0.0051395273767411709, 0.012842589057981968, 0.0075402953661978245, 0.011956534348428249, 0.010250924155116081, 0.012570883147418499, 0.011550985276699066, 0.0063891890458762646, 0.010353182442486286, 0.0093985637649893761, 0.017000069841742516, 0.0088642872869968414, 0.0084720002487301826, 0.0066602458246052265, 0.0069501125253736973, 0.0088972784578800201, 0.0088075948879122734, 0.005066530779004097, 0.014134259894490242, 0.03036278672516346, 0.01152412872761488, 0.018805757164955139, 0.012521619908511639, 0.0075977169908583164, 0.0033870507031679153, 0.0093572931364178658, 0.025193974375724792, 0.0061631137505173683, 0.0037523300852626562, 0.010397335514426231, 0.022792231291532516, 0.0090269912034273148, 0.013406991027295589, 0.016738172620534897, 0.0083223870024085045, 0.0085102524608373642, 0.0088505642488598824, 0.0035402188077569008, 0.008477531373500824, 0.0065106581896543503, 0.0072831283323466778, 0.0052287611179053783, 0.011143005453050137, 0.0040990510024130344, 0.011254933662712574, 0.0040126307867467403, 0.019327767193317413, 0.0067886840552091599, 0.010015394538640976, 0.0059621180407702923, 0.0088777430355548859, 0.0068179094232618809, 0.009722881019115448, 0.014920536428689957, 0.0082642324268817902, 0.0036451881751418114, 0.013677385635674, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1267, 13148, -96, 1310, 5798, 13030, -38, 2100, 11182, -345, 37555, 3802, 1572, 754, 1500, -5, 1537, 3146, -385, 11300, 932, 7101, -1555, 39, -6114, 1861, 2782, 2280, 7915, 991, 2484, 5376, 1420, 9728, 2297, 7018, 4199, 1939, 2048, 4074, 37093, 1434, 2070, 3235, 4305, 10238, 7892, 11671, 1262, -1311, 1771, 2115, 2987, -2482, 7478, 210, 2544, 18537, 3041, 2881, 2746, 21592, 2933, -623, 12150, 10299, 1422, 2667, 10201, 4294, 3606, 2793, -2529, 3235, 1702, 2414, 165, 14739, 3393, 3840, 1990, 756, 3012, 8122, -86, 8302, 6129, 2022, -1242, 2278, 1871, 11179, 3423, 2260, 5350, 3060, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00022468707174994051, 6.4647712861187756e-05, 0.00036327919224277139, 0.00022691418416798115, 0.00012300707749091089, 6.4913918322417885e-05, 0.00027691308059729636, 0.00017759358161129057, 7.2584451118018478e-05, 0.00020073853374924511, 2.9302073016879149e-05, 0.00012401270214468241, 0.00021457175898831338, 0.00037496586446650326, 0.00016007621889002621, 0.00020356997265480459, 0.00037351003265939653, 0.00018480794096831232, 0.00019851679098792374, 8.0461497418582439e-05, 0.00018629214901011437, 0.00011394079774618149, 0.00013407616643235087, 0.00019238107779528946, 0.00010969467257382348, 0.00014966112212277949, 0.00020959647372364998, 0.00014821543300058693, 0.00012844205775763839, 0.00026491150492802262, 0.00014960790576878935, 0.00013345625484362245, 0.0002745862293522805, 9.4235489086713642e-05, 0.00015432390500791371, 0.00010849461250472814, 0.00015230872668325901, 0.00016126820992212743, 0.0001821227342588827, 0.00011540164996404201, 2.8495805963757448e-05, 0.00020862102974206209, 0.00015818719111848623, 9.5426010375376791e-05, 0.00011235457350267097, 8.0605619587004185e-05, 9.0911438746843487e-05, 7.5686213676817715e-05, 0.00022365976474247873, 0.00021372668561525643, 0.00026820652419701219, 0.00027049155323766172, 0.00017510783800389618, 0.00014035003550816327, 0.00010328862117603421, 0.00025251141050830483, 0.00012934699770994484, 5.4527565225725994e-05, 0.00012419368431437761, 0.00012173699360573664, 0.00018233369337394834, 5.1076927775284275e-05, 0.00020197346748318523, 0.00025141105288639665, 7.2755123255774379e-05, 8.324677764903754e-05, 0.00027230475097894669, 0.00017848356219474226, 8.6276195361278951e-05, 0.0001345436176052317, 0.00015512193203903735, 0.00013147493882570416, 0.00021332594042178243, 0.00017455444321967661, 0.00018362081027589738, 0.00021890732750762254, 0.00024403675342909992, 6.1779224779456854e-05, 0.0001803241902962327, 0.00019737771071959287, 0.00014804220700170845, 0.00022007706866133958, 0.00017403902893420309, 0.00010974787437589839, 0.0001201499835588038, 9.6665527962613851e-05, 0.00012593962310347706, 0.00025010012905113399, 0.00018187120440416038, 0.0002187793143093586, 0.00015763769624754786, 7.373662811005488e-05, 0.00016012940614018589, 0.00019271590281277895, 0.00011735378939192742, 0.00016610196325927973, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 34,-2,15,35,-127,-6,74,50,52,76,-31,36,52,16,35,80, 
  /* [1][0][][] */ -77,-11,-54,-17,127,96,17,-39,-97,-25,-104,-47,-64,52,-108,-12, 
  /* [2][0][][] */ -34,54,63,-14,35,77,-2,45,55,-29,65,-8,43,-127,1,23, 
  /* [3][0][][] */ 127,-29,40,-26,5,26,-30,34,87,57,-23,10,-51,31,-13,14, 
  /* [4][0][][] */ -88,-29,-13,33,-56,8,-80,-37,-22,24,-39,-69,-20,45,-73,127, 
  /* [5][0][][] */ -110,6,11,16,96,52,39,-27,-84,-12,-50,-7,-39,62,-127,-5, 
  /* [6][0][][] */ -117,48,-55,-9,-34,-99,127,9,-33,-25,-91,60,49,-18,-77,-3, 
  /* [7][0][][] */ -30,117,71,-97,69,52,111,29,55,38,-32,42,41,92,-127,-24, 
  /* [8][0][][] */ -8,-2,-70,88,-78,55,-70,-42,65,-45,110,44,127,18,-81,17, 
  /* [9][0][][] */ -31,-127,-29,93,-75,-75,-30,95,77,37,35,63,-68,-6,20,-34, 
  /* [10][0][][] */ -92,-51,-20,69,-62,48,81,-42,65,-75,0,-65,47,127,-119,69, 
  /* [11][0][][] */ -53,-53,-55,26,26,68,-3,-30,-14,8,21,-47,-4,89,-127,78, 
  /* [12][0][][] */ -42,-61,-31,47,-78,-127,-25,31,55,71,-45,70,-56,-47,-9,-9, 
  /* [13][0][][] */ -72,-20,-21,-2,8,-10,21,11,-14,127,-13,-23,27,27,17,-11, 
  /* [14][0][][] */ -35,11,-124,-19,-29,126,-28,-124,127,-58,84,0,81,-83,-90,-76, 
  /* [15][0][][] */ 1,-127,57,-66,-58,-33,8,72,2,-49,-81,-19,91,-34,-16,-33, 
  /* [16][0][][] */ -6,-37,23,-59,-4,2,-47,9,59,-127,45,-14,-2,-34,-38,-80, 
  /* [17][0][][] */ -36,-26,-2,-80,48,-13,-70,-38,35,-11,-22,63,86,-39,-38,-127, 
  /* [18][0][][] */ 29,-8,-20,-95,41,-20,77,-11,35,97,-7,76,0,91,-47,-127, 
  /* [19][0][][] */ -65,7,-10,-114,-76,47,-29,-46,-16,-11,3,-127,-31,-36,-86,-36, 
  /* [20][0][][] */ 19,47,99,-112,52,-10,-65,127,-97,-126,31,-101,-70,57,-23,-38, 
  /* [21][0][][] */ 13,-43,-127,-11,55,27,90,36,-75,-52,1,21,66,-35,-43,32, 
  /* [22][0][][] */ 82,-21,96,8,-19,7,53,35,67,117,33,15,21,-14,127,-16, 
  /* [23][0][][] */ -113,-81,22,127,94,78,30,-8,18,41,-10,-70,55,104,100,115, 
  /* [24][0][][] */ 33,32,-16,5,2,-127,-21,-32,23,91,-85,2,-41,-91,34,-37, 
  /* [25][0][][] */ 76,-53,94,127,25,-32,-18,31,-122,73,30,-69,-29,37,87,0, 
  /* [26][0][][] */ -17,35,22,47,-52,110,-3,28,-56,-26,-79,28,-1,20,59,-127, 
  /* [27][0][][] */ 61,19,-42,-88,-45,16,-88,5,-99,-28,-68,-63,-92,28,-30,127, 
  /* [28][0][][] */ -52,-1,15,-3,8,-3,-127,-2,-36,-38,0,13,48,-47,-46,-35, 
  /* [29][0][][] */ -27,-90,-24,77,-37,31,127,10,53,39,-97,65,30,-7,-33,66, 
  /* [30][0][][] */ 46,-68,-98,38,-127,38,75,-49,-45,-6,0,-19,25,64,3,72, 
  /* [31][0][][] */ -127,0,-11,97,-14,3,-46,-8,-45,-46,14,-5,-43,-32,-14,91, 
  /* [32][0][][] */ -127,-59,-78,-35,-107,-21,4,-31,100,53,-69,-59,18,41,13,-14, 
  /* [33][0][][] */ -29,30,-109,48,-127,-117,53,0,-113,43,-24,-87,-47,107,64,105, 
  /* [34][0][][] */ -1,54,53,82,-53,-50,102,-15,-42,-127,-35,-8,-35,59,38,108, 
  /* [35][0][][] */ 26,14,-54,47,-101,18,127,-25,44,36,8,-50,36,87,49,57, 
  /* [36][0][][] */ 1,24,-47,41,127,-5,39,51,-63,24,-84,-90,20,-19,-14,-1, 
  /* [37][0][][] */ -86,61,25,-43,39,-114,-84,-15,42,-4,-16,43,56,-101,39,-127, 
  /* [38][0][][] */ 27,100,33,-14,-94,-78,-127,-91,-12,-74,80,91,-51,-48,86,21, 
  /* [39][0][][] */ 9,-30,-52,61,-72,63,56,-54,-48,8,34,-42,31,78,70,127, 
  /* [40][0][][] */ 107,27,79,111,-26,-86,-70,95,-75,76,-33,-61,-112,-30,127,0, 
  /* [41][0][][] */ -29,2,3,76,-79,127,1,50,-55,19,-121,35,27,55,29,-117, 
  /* [42][0][][] */ 5,-107,34,-10,127,31,64,45,-17,-111,-68,-42,-67,-31,0,52, 
  /* [43][0][][] */ -13,-127,-59,-56,93,2,10,75,-55,-69,-115,-122,14,-98,-57,59, 
  /* [44][0][][] */ -32,-83,-89,-104,24,57,35,43,-108,-94,-92,127,9,62,4,49, 
  /* [45][0][][] */ 14,-109,-121,6,-127,69,-78,-51,14,-56,55,-42,54,-27,-11,61, 
  /* [46][0][][] */ -38,-87,7,-11,127,-79,-98,80,-18,-17,24,73,-122,-56,67,-87, 
  /* [47][0][][] */ -68,-38,8,127,-44,-14,82,14,-41,114,64,109,-22,119,-18,123, 
  /* [48][0][][] */ 48,4,-92,-118,37,-50,29,50,63,-84,-1,3,-54,9,-58,-127, 
  /* [49][0][][] */ 50,21,29,24,8,-36,40,13,-27,127,-57,27,-16,-37,56,51, 
  /* [50][0][][] */ -12,-5,19,3,-127,-1,-1,-63,34,13,11,43,-7,-55,1,11, 
  /* [51][0][][] */ -5,0,15,-127,-12,58,-1,-8,42,8,39,-59,26,17,-36,12, 
  /* [52][0][][] */ -2,-30,23,-40,127,-116,11,-33,55,-1,103,-101,6,27,-59,113, 
  /* [53][0][][] */ -41,-66,51,-47,-34,-127,-14,-84,-1,107,-96,79,-90,-24,20,-81, 
  /* [54][0][][] */ 70,82,38,18,-127,-33,-102,-88,7,10,77,88,-47,-31,67,7, 
  /* [55][0][][] */ 37,24,-25,54,-38,28,30,8,23,127,14,38,-3,-24,6,19, 
  /* [56][0][][] */ 4,-57,-81,81,-76,74,54,-4,35,-22,55,21,-18,20,29,127, 
  /* [57][0][][] */ 68,74,92,-68,121,-3,20,-62,69,-37,-3,123,5,-79,127,-38, 
  /* [58][0][][] */ 27,-71,8,-127,91,62,-46,75,69,107,-31,32,-10,-1,21,-1, 
  /* [59][0][][] */ -46,45,-22,-57,14,-51,-20,15,-17,-12,-110,-125,-127,-94,29,-5, 
  /* [60][0][][] */ 41,-29,24,-21,21,-28,5,-53,25,127,-4,36,-30,-61,-39,-15, 
  /* [61][0][][] */ 48,42,-14,-6,-126,-96,-8,-68,-127,-55,-16,25,-4,-33,114,115, 
  /* [62][0][][] */ -39,48,-61,58,-38,127,-47,17,-104,-6,-51,45,-10,44,39,-67, 
  /* [63][0][][] */ 39,-53,-74,-96,-18,-45,53,-2,1,-127,-34,6,12,40,33,-17, 
  /* [64][0][][] */ 6,46,10,-29,56,-84,-23,127,-94,-1,-91,-44,-75,55,95,34, 
  /* [65][0][][] */ -59,9,-24,-5,45,1,-39,-32,-127,-55,14,-10,-94,51,-33,41, 
  /* [66][0][][] */ -22,49,-5,25,-37,127,-10,15,-40,7,-32,44,-23,43,41,-67, 
  /* [67][0][][] */ 16,-25,-39,-1,35,-94,28,-55,20,34,8,115,-58,-24,-7,-127, 
  /* [68][0][][] */ 63,-127,-11,73,-31,-28,-28,91,105,43,65,41,-28,17,22,-18, 
  /* [69][0][][] */ 2,106,56,-127,41,41,16,101,82,29,30,30,9,-100,24,-68, 
  /* [70][0][][] */ 64,12,15,-17,113,12,-84,-31,-127,-116,-30,30,-24,51,-126,-4, 
  /* [71][0][][] */ -73,-85,20,-25,95,7,16,14,-81,78,-93,-25,2,127,-20,70, 
  /* [72][0][][] */ 18,31,32,26,-39,-4,-100,-60,-20,53,-8,50,17,89,-127,14, 
  /* [73][0][][] */ -1,-52,-6,-34,60,-127,3,-58,77,111,127,-5,37,-38,-109,126, 
  /* [74][0][][] */ -5,-28,-18,47,-80,9,80,23,27,31,18,90,127,37,-40,25, 
  /* [75][0][][] */ -33,44,-27,46,-63,127,-39,15,-17,47,-24,39,-16,62,50,-59, 
  /* [76][0][][] */ -86,69,-29,71,-117,-2,14,51,35,6,-37,-47,68,-38,-127,40, 
  /* [77][0][][] */ 109,104,-110,127,51,91,67,16,47,-2,83,-9,60,29,88,3, 
  /* [78][0][][] */ -14,-44,2,-62,40,-105,38,-39,39,24,116,-24,5,-3,-61,127, 
  /* [79][0][][] */ -23,81,-4,5,13,-29,-53,-13,-107,13,22,25,127,33,-97,-75, 
  /* [80][0][][] */ -27,42,109,26,67,4,-78,-89,-18,127,-83,-21,-3,-124,102,5, 
  /* [81][0][][] */ 83,53,-12,6,19,-39,57,101,-78,127,-75,-41,-14,21,101,79, 
  /* [82][0][][] */ 52,76,-16,-15,9,-75,87,-58,-17,-14,-127,0,104,-48,85,-39, 
  /* [83][0][][] */ -11,-24,35,59,46,38,5,-94,86,-35,87,32,22,-24,-79,-127, 
  /* [84][0][][] */ -127,-118,-27,44,-35,109,83,-5,36,39,82,106,87,116,-55,23, 
  /* [85][0][][] */ 73,40,54,-33,57,-2,-61,49,-3,127,-29,45,-17,64,53,-16, 
  /* [86][0][][] */ -66,61,-39,-17,57,96,-2,13,127,50,114,-7,-30,54,-19,-35, 
  /* [87][0][][] */ 16,-47,26,-34,36,-127,21,-29,38,-2,51,-26,24,-38,-24,57, 
  /* [88][0][][] */ -60,50,27,-13,67,-17,97,45,-30,-98,107,-51,86,74,125,-127, 
  /* [89][0][][] */ -14,62,-50,39,-19,123,-11,37,-32,43,-43,27,-13,73,12,-127, 
  /* [90][0][][] */ 37,-103,-10,88,127,-10,-3,67,-21,-109,-116,3,53,5,-74,44, 
  /* [91][0][][] */ -11,79,-18,-37,26,-38,-51,23,-73,56,-97,-127,-119,-32,-34,1, 
  /* [92][0][][] */ 57,79,48,69,-127,-54,19,-8,-3,-14,15,-33,-19,-57,22,5, 
  /* [93][0][][] */ -12,-122,-127,66,-47,-52,-46,97,90,47,2,56,-56,32,1,-16, 
  /* [94][0][][] */ 62,-18,127,-60,20,-25,-4,32,19,105,-10,60,-7,17,80,-5, 
  /* [95][0][][] */ -98,-31,-14,12,127,27,24,40,9,6,-45,-12,1,49,-80,51, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.003757186233997345, 0.0010810301173478365, 0.0060747046954929829, 0.0037944277282804251, 0.0020569073967635632, 0.0010854816064238548, 0.004630502313375473, 0.0029696954879909754, 0.0012137471931055188, 0.0033567221835255623, 0.00048998522106558084, 0.0020737233571708202, 0.0035880394279956818, 0.0062701278366148472, 0.0026767724193632603, 0.0034040689934045076, 0.0062457835301756859, 0.0030903329607099295, 0.0033195705618709326, 0.001345466123893857, 0.0031151517760008574, 0.001905302400700748, 0.0022420033346861601, 0.0032169700134545565, 0.0018342991825193167, 0.0025026127696037292, 0.0035048434510827065, 0.002478437963873148, 0.0021477905102074146, 0.0044298139400780201, 0.0025017228908836842, 0.0022316370159387589, 0.0045915930531919003, 0.0015757929068058729, 0.0025805830955505371, 0.001814231975004077, 0.0025468855164945126, 0.0026967048179358244, 0.0030454313382506371, 0.0019297305261716247, 0.00047650295891799033, 0.003488532267510891, 0.0026451845187693834, 0.0015957006253302097, 0.00187877775169909, 0.0013478760374709964, 0.0015202085487544537, 0.001265614409931004, 0.0037400077562779188, 0.0035739082377403975, 0.0044849123805761337, 0.0045231226831674576, 0.0029281291645020247, 0.0023469140287488699, 0.0017271781107410789, 0.0042224610224366188, 0.0021629226393997669, 0.00091180246090516448, 0.0020767496898770332, 0.0020356692839413881, 0.0030489589553326368, 0.00085410138126462698, 0.0033773726318031549, 0.0042040608823299408, 0.0012166011147201061, 0.0013920412166044116, 0.0045534428209066391, 0.0029845775570720434, 0.0014426986454054713, 0.0022498199250549078, 0.002593927551060915, 0.0021985059138387442, 0.0035672071389853954, 0.0029188753105700016, 0.0030704820528626442, 0.0036605382338166237, 0.0040807491168379784, 0.0010330637451261282, 0.0030153563711792231, 0.0033005229197442532, 0.0024755413178354502, 0.0036800985690206289, 0.0029102566186338663, 0.0018351888284087181, 0.0020091314800083637, 0.0016164276748895645, 0.0021059450227767229, 0.004182139877229929, 0.0030412252526730299, 0.00365839758887887, 0.0026359958574175835, 0.0012330136960372329, 0.0026776618324220181, 0.0032225688919425011, 0.0019623739644885063, 0.0027775343041867018, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -9332, 5704, -19682, -2057, 16512, -17815, -34047, -7957, -13105, 9621, -18292, -7094, 918, -7974, -7093, -1024, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.0001033140579238534, 0.0001225257437909022, 0.00015528437506873161, 0.00019220791000407189, 0.00010463174839969724, 0.00012750568566843867, 0.00011854536569444463, 0.0001281775621464476, 9.9059776403009892e-05, 9.210909774992615e-05, 0.00017202668823301792, 0.00012769474415108562, 0.00011873242328874767, 6.9601170253008604e-05, 0.00012120173050789163, 9.5014082035049796e-05, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 53,43,44,-39,75,61,-41,49,16,126,-4,53,-45,55,3,47,36,85,37,-50,-72,114,-3,49,74,50,37,52,-55,-46,-22,76,-24,12,-77,56,51,-127,-49,17,12,-5,76,2,10,-71,-49,-4, 
  /* [1][0][][] */ -52,-9,-78,-54,13,103,-50,7,-7,-33,-48,46,68,-4,-11,-21,-33,-31,-9,28,-72,53,-114,-58,-43,-24,48,60,-15,-19,40,-47,18,-66,-48,62,24,-44,127,-30,-3,46,-50,-4,37,44,41,36, 
  /* [2][0][][] */ 22,21,35,-25,-35,-71,13,30,101,71,-51,18,108,-32,127,89,-70,-11,-30,26,84,-91,-16,-69,5,-70,21,-73,50,31,-45,15,33,-30,74,36,-54,2,20,-33,27,30,66,-27,30,-88,103,-64, 
  /* [3][0][][] */ 36,-5,-11,-11,36,108,24,-15,33,-41,31,-13,-27,-20,1,49,-19,-67,39,-117,17,8,-33,-40,-16,84,127,58,-9,-59,16,42,64,-27,82,29,-23,-59,11,37,22,16,6,-3,31,31,-13,-24, 
  /* [4][0][][] */ 85,-27,20,-34,104,63,53,-2,88,-9,-103,-2,25,4,27,1,-113,-119,-25,-87,-26,7,-51,-35,-70,127,-96,110,-45,-57,24,54,34,-80,7,-38,-33,7,-33,17,-25,-3,-15,52,-84,91,-46,-74, 
  /* [5][0][][] */ -13,-1,-68,5,-22,68,14,-18,39,56,45,96,55,-24,24,-6,-36,127,-13,38,18,-4,-64,-32,41,7,-56,-35,-14,33,32,-12,-34,6,38,10,-37,14,-80,6,82,-42,42,48,-12,19,-29,38, 
  /* [6][0][][] */ 65,14,-14,67,-10,-36,87,-34,-8,69,123,73,29,38,-46,44,33,-40,-80,60,54,-72,-40,52,-76,67,90,-9,88,33,-13,4,100,-42,-98,1,69,30,11,1,0,31,81,-7,81,127,28,-5, 
  /* [7][0][][] */ -91,-27,-17,16,-64,-65,26,42,76,116,-61,-62,-106,15,-8,-21,-87,86,12,127,-59,48,9,17,-25,-79,-35,-86,18,45,-6,6,-8,-7,-13,-15,-6,-47,117,27,15,35,41,-3,50,66,-45,6, 
  /* [8][0][][] */ 36,-88,65,-80,49,-70,66,-36,-14,-119,33,18,-23,16,49,18,5,6,-36,107,7,58,-3,24,75,-29,-67,-40,-127,-9,-59,-101,9,-85,11,100,8,42,114,22,6,-13,116,116,12,-77,-17,94, 
  /* [9][0][][] */ 40,-58,30,-58,27,52,-23,33,27,-41,-50,-29,9,-29,127,1,-7,-113,46,33,-73,36,51,-32,-18,-72,-20,54,32,77,-41,-28,-70,6,-14,109,-31,-41,-72,-21,-35,2,20,101,66,62,-71,14, 
  /* [10][0][][] */ -4,22,-14,-12,27,10,-61,-46,59,31,58,-15,-35,-14,48,-54,-61,127,-2,45,0,-3,26,27,-43,43,15,97,35,13,-22,-9,75,-3,2,37,2,-37,-38,25,-80,3,63,-18,10,35,31,37, 
  /* [11][0][][] */ -15,44,-17,48,27,68,-2,3,15,-5,-127,-68,71,10,-3,-41,12,31,-44,-53,-16,-10,115,-10,39,4,-19,21,-21,15,-10,53,33,-25,-57,12,37,80,96,9,28,-42,69,4,-52,-16,61,1, 
  /* [12][0][][] */ -50,-1,22,41,-60,-38,7,-6,-16,-22,-112,42,65,-99,15,45,70,105,93,-127,-28,42,-35,-96,9,-12,56,-36,-6,2,-18,84,66,80,29,-24,-60,-33,36,-15,-18,14,83,1,40,-7,-45,-38, 
  /* [13][0][][] */ -53,-104,-51,-87,-6,42,55,4,-127,4,95,-66,47,39,107,-7,82,31,29,-98,47,-75,101,-22,-74,20,-20,-3,-38,-75,-74,28,39,-42,-65,46,22,-26,56,-63,12,42,66,49,54,0,78,-50, 
  /* [14][0][][] */ 94,20,-45,7,-43,15,-82,-24,-16,52,48,54,-6,-60,31,-38,51,-118,11,11,91,-36,31,0,-1,110,-84,-3,-62,-36,-108,0,127,45,84,-4,-62,6,-26,65,-9,-32,85,3,-30,-42,-57,68, 
  /* [15][0][][] */ -87,24,35,15,107,-3,-2,42,-1,80,-8,32,56,-19,-27,-21,4,39,11,-45,38,-52,-60,-50,37,-71,-27,83,-32,2,28,12,-64,-1,127,-17,-105,16,57,-7,-61,-42,16,12,-36,-26,-15,9, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0043908474035561085, 0.0052073439583182335, 0.0065995859913527966, 0.0081688361242413521, 0.0044468492269515991, 0.0054189916700124741, 0.0050381780602037907, 0.0054475460201501846, 0.0042100404389202595, 0.0039146365597844124, 0.0073111341334879398, 0.0054270266555249691, 0.0050461278297007084, 0.0029580495320260525, 0.0051510734483599663, 0.0040380982682108879, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 13856, 634, 7889, -710, 19950, -2227, 29850, 599, 6032, 39339, 9024, 30013, 5704, 9810, 49062, 24406, 2192, 2571, 8890, 75787, 1272, 14327, 1741, 12681, 12630, 37857, -392, -4164, -8013, 12155, 24065, -30, 1072, -4972, 3691, 17005, 4111, 34007, 5539, 12192, 24947, -1249, 506, 15996, 5923, 6510, 31684, 23601, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.7880056526046246e-05, 0.00011723778879968449, 0.00012485508341342211, 0.00016718752158340067, 0.00010072193254018202, 0.000134754300233908, 6.5889311372302473e-05, 0.00038687163032591343, 6.2721286667510867e-05, 4.9029116780729964e-05, 4.5719487388851121e-05, 9.2535214207600802e-05, 4.9565329391043633e-05, 0.00011299887410132214, 3.849441054626368e-05, 6.8551889853551984e-05, 7.2170842031482607e-05, 4.7539164370391518e-05, 0.00018888515478465706, 2.7174550268682651e-05, 7.262689177878201e-05, 7.9363315308000892e-05, 9.3694972747471184e-05, 0.00010045697126770392, 5.0339695008005947e-05, 6.0011199821019545e-05, 7.1915739681571722e-05, 4.3083819036837667e-05, 0.00024531668168492615, 0.00010151992319151759, 6.6333574068266898e-05, 0.0004538504290394485, 0.00011832713062176481, 0.00017785663658287376, 7.3190538387279958e-05, 5.6646596931386739e-05, 9.0561879915185273e-05, 5.0851911510108039e-05, 6.7926848714705557e-05, 9.6746938652358949e-05, 5.4170221119420603e-05, 0.00027560724993236363, 0.00024917398695833981, 9.0547087893355638e-05, 0.00024092565581668168, 3.5959415981778875e-05, 6.6889020672533661e-05, 0.0001077385968528688, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -114,49,-127,51,-127,71,-31,16,-112,-67,83,-70,86,-80,-50,-66,57,96,46,-107,127,-80,103,-55,-93,-53,73,90,-55,-10,-107,16,95,-71,114,-73,-76,-94,81,-40,31,-98,112,-79,89,49,-76,-11, -111,36,-4,98,-96,71,-10,55,-127,-127,103,-109,66,-82,-94,-29,27,119,109,-127,119,-79,116,-127,-110,-81,51,76,33,20,-83,-31,101,-127,127,-123,-56,-99,103,-64,-61,81,77,-127,-44,52,-127,-8, -65,81,13,18,6,44,-16,30,-85,-30,21,-37,22,10,-84,18,48,69,70,-49,-14,-56,79,-55,-41,-55,59,24,111,36,-49,-41,11,-65,42,-60,13,-48,32,-62,-127,-27,39,-67,-89,88,-21,-90, 
  /* [0][1][][] */ -32,64,-27,127,-75,127,-127,44,-119,-95,90,-89,127,-123,-95,-120,127,123,-29,-120,125,-127,127,-86,-89,-52,105,127,-127,-127,-98,40,80,58,80,-127,-127,-127,127,-39,-88,-56,47,-44,127,83,-68,-100, -127,111,-24,57,-91,71,-102,127,-104,-88,127,-127,98,-127,-127,-127,117,127,-34,-90,77,-43,112,-79,-127,-127,127,91,35,-100,-127,37,127,59,118,-56,-116,-76,105,-127,-114,127,127,-118,-40,127,-69,-86, -53,72,-62,57,-63,65,-41,45,-56,6,61,-93,116,-44,-116,-12,106,70,-31,-38,21,-76,78,-82,-98,-86,91,37,123,-31,-59,-2,13,19,84,-98,-17,-12,85,-84,-122,-45,28,-41,-97,104,49,-127, 
  /* [0][2][][] */ -64,127,26,59,-79,57,-70,-86,-39,-11,54,-72,71,-21,-34,-48,43,72,-119,-82,53,-15,35,-35,-33,-47,38,35,-60,-71,-116,127,59,98,63,-79,-28,-75,-15,-47,-61,-36,124,-93,57,65,-94,-11, -70,114,-18,58,-97,73,-56,41,-35,-53,50,-72,57,-18,-108,-63,90,66,-106,-51,-13,31,56,-39,-35,-42,57,48,40,-117,-116,83,67,101,102,-52,8,-77,23,20,-45,70,108,-108,-51,117,-66,-7, -41,91,-39,15,-61,38,-30,18,-2,-12,51,-70,70,38,-54,-9,72,67,-127,-40,23,-33,102,7,-40,-42,20,19,89,-65,-33,-5,-4,79,61,-85,-17,-16,24,14,-31,-6,76,-91,-82,86,3,-92, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0037349024787545204, 0.0049826060421764851, 0.005306340754032135, 0.0071054692380130291, 0.0042806821875274181, 0.0057270573452115059, 0.0028002958279103041, 0.016442043706774712, 0.002665654756128788, 0.0020837374031543732, 0.0019430782413110137, 0.0039327465929090977, 0.0021065264008939266, 0.0048024519346654415, 0.0016360124573111534, 0.0029134552460163832, 0.0030672606080770493, 0.0020204144529998302, 0.0080276187509298325, 0.0011549183400347829, 0.0030866428278386593, 0.0033729407005012035, 0.0039820363745093346, 0.0042694211006164551, 0.0021394370123744011, 0.0025504759978502989, 0.0030564188491553068, 0.0018310622544959188, 0.010425958782434464, 0.0043145967647433281, 0.002819176996126771, 0.019288642331957817, 0.0050289030186831951, 0.0075589069165289402, 0.0031105978414416313, 0.002407480264082551, 0.0038488798309117556, 0.0021612062118947506, 0.0028868908993899822, 0.0041117449291050434, 0.0023022342938929796, 0.011713308282196522, 0.010589893907308578, 0.0038482511881738901, 0.010239340364933014, 0.0015282751992344856, 0.0028427832294255495, 0.0045788902789354324, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 3584, -1546, 609, -1632, 4158, -1016, 4913, -4829, 309, 114, 2051, 4612, 684, -195, 658, 4129, -1609, 4921, 12942, 678, -598, 1828, -1008, 5613, 875, 2631, 751, -692, 13017, 106, 3348, -2253, -795, 6165, -1570, 2154, 1752, 2890, 597, 4197, 2289, 11724, -4088, 1649, 22545, 69, 3156, 6626, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00015791413898114115, 0.00025452597765251994, 0.00029079816886223853, 0.00023727990628685802, 0.00021343652042560279, 0.00022035608708392829, 0.00016375959967263043, 0.00011777072359109297, 0.00033957327832467854, 0.00027089021750725806, 0.00018162968626711518, 0.00016995485930237919, 0.0002590648946352303, 0.00030504100141115487, 0.00030021727434359491, 0.00018901925068348646, 0.00027748063439503312, 0.00014926788571756333, 8.5911786300130188e-05, 0.00033818816882558167, 0.00026322720805183053, 0.00020816738833673298, 0.00024527023197151721, 0.00014613335952162743, 0.00027926923939958215, 0.00016875265282578766, 0.00027909531490877271, 0.00029582763090729713, 7.9762176028452814e-05, 0.00021604124049190432, 0.00015329485177062452, 0.00015616873861290514, 0.00018482544692233205, 0.00014057883527129889, 0.0002055189834209159, 0.0002300029736943543, 0.0002209228987339884, 0.00012092590623069555, 0.00018717112834565341, 0.0001665080344537273, 0.00024886857136152685, 7.4735391535796225e-05, 0.00012389480252750218, 0.00027249561389908195, 4.974917828803882e-05, 0.00028927240055054426, 0.00019883202912751585, 0.00013041867350693792, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 45,31,127,-24,61,73,-71,-56, 
  /* [1][0][][] */ 19,-81,-127,12,54,13,28,9, 
  /* [2][0][][] */ -127,-13,-53,-19,66,24,-119,-57, 
  /* [3][0][][] */ 25,37,127,-84,-32,-108,19,-26, 
  /* [4][0][][] */ -127,6,-18,-21,43,15,-50,-54, 
  /* [5][0][][] */ -67,21,-58,-11,-14,9,-52,-127, 
  /* [6][0][][] */ -29,-127,-124,40,83,15,20,28, 
  /* [7][0][][] */ -43,-127,-65,-69,-62,-63,28,63, 
  /* [8][0][][] */ 70,34,-17,1,79,-50,-127,19, 
  /* [9][0][][] */ -35,81,-66,105,-73,-41,127,-31, 
  /* [10][0][][] */ -24,127,44,69,117,-19,-7,67, 
  /* [11][0][][] */ -77,-23,-45,8,-118,90,127,-11, 
  /* [12][0][][] */ 47,43,-127,35,-9,-33,-71,-9, 
  /* [13][0][][] */ 58,-39,-53,-4,21,-127,-38,-29, 
  /* [14][0][][] */ 17,-108,60,15,99,-127,-52,3, 
  /* [15][0][][] */ -26,-47,-24,127,48,64,-48,13, 
  /* [16][0][][] */ 97,30,-31,33,76,-110,-127,-28, 
  /* [17][0][][] */ 68,127,59,93,55,73,28,-96, 
  /* [18][0][][] */ 41,-4,11,-32,127,-8,40,1, 
  /* [19][0][][] */ 9,127,32,13,-96,12,17,-20, 
  /* [20][0][][] */ -56,22,68,-115,-7,48,-8,127, 
  /* [21][0][][] */ -28,88,31,-118,85,58,-9,127, 
  /* [22][0][][] */ -74,-44,-40,20,-127,112,102,-20, 
  /* [23][0][][] */ 104,61,-127,27,11,-31,-80,-12, 
  /* [24][0][][] */ -43,44,-5,-4,-26,51,-127,78, 
  /* [25][0][][] */ -102,-57,-127,13,-46,-70,65,99, 
  /* [26][0][][] */ 62,-12,-66,-48,127,-24,125,-46, 
  /* [27][0][][] */ 127,-45,11,81,-5,20,-19,119, 
  /* [28][0][][] */ 50,36,75,-15,127,-107,86,-60, 
  /* [29][0][][] */ -9,-24,-40,-45,-103,-8,127,-42, 
  /* [30][0][][] */ 20,-127,-59,-57,-121,18,17,-54, 
  /* [31][0][][] */ 7,18,-1,-13,-127,-5,-15,-17, 
  /* [32][0][][] */ 39,-56,-62,74,-21,-79,90,-127, 
  /* [33][0][][] */ 88,127,63,33,62,-38,-32,-33, 
  /* [34][0][][] */ -97,-19,127,-9,-8,95,85,20, 
  /* [35][0][][] */ -29,81,127,8,-20,-40,-57,24, 
  /* [36][0][][] */ -92,-4,113,-19,-7,127,81,18, 
  /* [37][0][][] */ -2,-122,-17,-127,-71,-103,96,31, 
  /* [38][0][][] */ 47,-12,71,-48,61,65,-127,3, 
  /* [39][0][][] */ -24,127,-112,-86,-10,-7,-4,120, 
  /* [40][0][][] */ 97,-73,25,54,3,4,24,127, 
  /* [41][0][][] */ -37,127,120,-15,35,61,-101,62, 
  /* [42][0][][] */ 56,-127,-122,-31,-109,6,11,-108, 
  /* [43][0][][] */ -10,-88,26,-39,127,-31,9,22, 
  /* [44][0][][] */ 17,126,127,-1,9,50,-49,-11, 
  /* [45][0][][] */ -37,38,6,67,-127,37,-112,18, 
  /* [46][0][][] */ -33,-54,57,39,-106,-127,-38,-3, 
  /* [47][0][][] */ -26,53,48,-115,-127,23,9,68, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0017184336902573705, 0.0027697710320353508, 0.0031644876580685377, 0.0025820978917181492, 0.0023226323537528515, 0.0023979316465556622, 0.0017820444190874696, 0.0012815899681299925, 0.0036952621303498745, 0.0029478478245437145, 0.0019765079487115145, 0.0018494616961106658, 0.0028191637247800827, 0.0033194792922586203, 0.003266987157985568, 0.0020569218322634697, 0.0030195652507245541, 0.0016243443824350834, 0.00093489856226369739, 0.0036801893729716539, 0.0028644585981965065, 0.0022652933839708567, 0.0026690491940826178, 0.0015902342274785042, 0.0030390291940420866, 0.0018363791750743985, 0.0030371365137398243, 0.0032192186918109655, 0.00086797808762639761, 0.0023509771563112736, 0.0016681661363691092, 0.0016994400648400187, 0.0020112844649702311, 0.0015297895297408104, 0.0022364731412380934, 0.0025029098615050316, 0.0024040997959673405, 0.0013159249210730195, 0.0020368103869259357, 0.0018119530286639929, 0.0027082066517323256, 0.00081327621592208743, 0.0013482326176017523, 0.002965318039059639, 0.00054137432016432285, 0.0031478842720389366, 0.0021637051831930876, 0.0014192259404808283, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2362, -1441, 20554, -2434, 6713, -16509, -392, -4311, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 6.9060064561199397e-05, 0.00010294537787558511, 0.00017323553038295358, 8.7508749857079238e-05, 0.00013469776604324579, 8.7922686361707747e-05, 6.3098625105340034e-05, 7.0136055001057684e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -43,-42,-20,-80,7,-10,70,74,-80,-74,-17,7,-63,-19,-48,62,-84,14,9,127,60,-35,7,83,64,57,60,-1,-102,-57,-74,-58,-63,106,25,-45,38,-37,83,3,17,20,12,-93,42,-29,-19,-100, 
  /* [1][0][][] */ -9,61,-15,-33,-73,33,-11,-55,-25,68,-10,23,69,44,-51,-17,-16,-102,79,-42,127,23,-63,21,55,-1,-100,41,44,-5,69,26,-19,-22,-17,-10,-5,97,-18,-27,79,46,-11,10,100,37,-23,68, 
  /* [2][0][][] */ -25,-22,100,-7,74,-30,-6,21,-21,1,-11,42,18,-39,-33,-127,-44,-82,-18,20,-82,11,-42,-32,-32,23,-24,-50,-27,14,-28,-26,2,3,25,3,15,-37,-34,18,29,-27,16,-45,-48,-30,-43,-39, 
  /* [3][0][][] */ 41,7,63,-14,10,-33,9,79,-51,-13,53,-36,-80,66,-40,79,57,15,-39,32,-91,-51,117,4,10,-24,-32,-24,-59,73,127,-68,2,-112,-18,57,-14,-69,-11,66,-62,-60,75,4,-87,-83,80,2, 
  /* [4][0][][] */ 23,-26,74,-27,-2,-5,4,-3,-67,-9,-27,11,52,-69,53,-103,51,48,-18,-21,11,30,18,16,-1,14,62,-8,36,13,-127,-13,-38,-33,-11,7,48,-11,40,-11,-65,-1,-70,33,-17,-106,2,24, 
  /* [5][0][][] */ 13,-28,73,31,29,13,5,15,-67,-7,-48,20,28,14,-10,-35,93,82,-3,-22,99,-32,127,-92,-6,43,-5,63,19,28,-18,-60,-24,-41,-44,41,36,31,68,3,-57,39,37,19,54,-11,93,-3, 
  /* [6][0][][] */ -60,45,-122,107,37,16,48,40,-10,-7,67,-73,-98,-7,-21,31,-117,22,-19,101,9,62,-101,-80,7,-20,34,85,-19,-34,-39,10,36,80,-31,-29,-10,-14,80,30,77,78,-127,-71,-39,116,-49,-49, 
  /* [7][0][][] */ 18,76,-100,22,22,79,101,55,34,72,-121,-9,-50,-6,-47,-110,33,33,127,107,86,-11,101,13,126,104,-109,101,-77,39,-13,-97,13,-75,-19,19,3,88,-47,93,-61,33,-24,-107,63,11,72,-56, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0029350526165217161, 0.0043751783668994904, 0.0073625100776553154, 0.0037191219162195921, 0.0057246549986302853, 0.0037367141339927912, 0.0026816914323717356, 0.0029807824175804853, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -2027, 8441, -2414, -1528, 46, -1633, 2698, -184, -2895, -271, -79, -17, 1168, -1065, -3758, 3550, 8477, 4502, 323, -8444, -7108, -5001, 15591, -5147, -3203, -387, 15071, -5765, -813, -1154, -6848, 8880, 10130, 2270, 3960, 1533, -30, -456, 14231, -1771, 5113, -2762, 1130, 12759, -5109, 8116, 2946, 5423, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00025958786136470735, 0.00016130830044858158, 0.00066535465884953737, 0.0002366821572650224, 0.00025689342874102294, 0.000386113824788481, 0.0001620343973627314, 0.00032419338822364807, 0.00010470674897078425, 0.00023460070951841772, 0.00039934029337018728, 0.0022564518731087446, 0.00039041248965077102, 0.00038947060238569975, 0.00035431198193691671, 0.00091928709298372269, 0.00016676774248480797, 8.0486213846597821e-05, 0.00017981328710447997, 0.00023504890850745142, 0.00026918589719571173, 0.00021471598302014172, 8.8907218014355749e-05, 0.00047451158752664924, 0.00019615971541497856, 0.00044048274867236614, 0.00047762846224941313, 0.00023678668367210776, 0.00023129444161895663, 0.00043114673462696373, 0.00017544848378747702, 0.00012941799650434405, 8.5912040958646685e-05, 0.00027916693943552673, 0.00014180470316205174, 0.00042705226223915815, 0.0041716406121850014, 0.0003554132126737386, 0.00015523502952419221, 0.00015161778719630092, 0.00020396322361193597, 0.00010145648411707953, 0.00035491061862558126, 0.00014660315355286002, 0.00023651075025554746, 0.00011657323193503544, 6.3057668739929795e-05, 0.00021193917200434953, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -4,-42,16,25,-29,-101,-52,34,-45,0,-39,10,57,-1,-2,2,71,-13,71,13,1,13,-72,18,-18,-22,-64,-35,-58,79,-10,-127,4,-19,-59,-50,-10,-36,-3,-28,-14,66,24,-30,9,66,117,-28, -127,-77,-16,127,-71,78,-107,127,26,4,9,7,52,21,-3,-46,-57,74,-23,25,0,127,26,127,112,-32,-63,50,92,-126,-11,-23,53,-11,-29,-122,22,11,-38,-49,-127,3,-89,-127,56,38,38,127, 0,36,16,19,-13,43,26,48,18,-37,-21,3,-30,10,10,-8,-79,28,-79,-5,-7,21,127,10,-45,4,-22,11,48,41,3,15,-6,-26,-46,72,4,6,-11,86,24,-18,43,-105,12,8,-11,-60, 
  /* [0][1][][] */ -10,-5,-19,10,40,-94,123,-97,-37,12,-4,24,127,18,34,-24,-26,-55,52,49,60,-41,42,2,-68,127,-127,-27,127,-89,24,-112,-88,-7,-81,5,13,-69,-55,19,125,127,6,-118,-49,-62,-16,71, 85,-127,127,14,127,71,-82,-44,0,127,127,-127,-117,127,127,127,127,127,72,127,127,94,9,14,127,-103,-110,109,30,127,127,34,-127,127,127,127,-127,127,-127,-116,49,34,-127,-22,127,-127,-35,62, 39,45,-34,6,-31,127,-127,94,82,-82,31,50,-55,18,33,-51,14,-23,-127,42,30,-52,-33,-11,84,-17,-32,127,-85,-38,16,-20,-24,9,82,-37,29,5,-32,-78,118,-2,52,8,-30,56,127,-123, 
  /* [0][2][][] */ 9,36,12,-29,-3,-38,-32,-35,28,-3,-48,-4,-19,0,5,-5,-66,-23,33,-27,-1,-20,81,-8,-121,6,13,-24,32,24,12,-3,-39,-30,-58,15,5,-4,13,94,-31,-8,1,-20,0,16,-37,5, 54,-50,-31,-26,22,58,110,-91,127,-23,-20,12,-81,-18,-44,-63,-14,85,-17,51,7,19,-26,-5,-45,58,91,-24,-95,18,-23,-19,-48,-18,-32,-17,53,-27,-2,127,-124,-4,-16,30,41,68,-1,-124, 8,40,9,-19,-13,39,-3,-36,-32,-21,-27,4,11,9,-16,17,45,-2,-41,9,0,-1,-40,-9,49,-29,7,-17,-33,8,-15,-1,25,-29,-28,-74,-11,7,2,19,-6,-10,16,-8,0,1,91,-81, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.011032484471797943, 0.0068556023761630058, 0.028277572244405746, 0.010058991611003876, 0.010917969979345798, 0.016409836709499359, 0.0068864617496728897, 0.013778218999505043, 0.0044500366784632206, 0.0099705299362540245, 0.01697196252644062, 0.095899201929569244, 0.016592530533671379, 0.016552500426769257, 0.015058259479701519, 0.039069700986146927, 0.007087628822773695, 0.0034206639975309372, 0.0076420647092163563, 0.0099895782768726349, 0.011440400965511799, 0.009125429205596447, 0.0037785565946251154, 0.02016674168407917, 0.0083367880433797836, 0.018720516934990883, 0.020299209281802177, 0.010063434019684792, 0.0098300138488411903, 0.018323736265301704, 0.0074565601535141468, 0.0055002644658088684, 0.0036512617953121662, 0.011864594183862209, 0.006026699673384428, 0.018149720504879951, 0.17729471623897552, 0.015105061233043671, 0.0065974886529147625, 0.0064437557011842728, 0.0086684366688132286, 0.0043119005858898163, 0.015083701349794865, 0.0062306337058544159, 0.010051706805825233, 0.0049543622881174088, 0.0026799507904797792, 0.0090074148029088974, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 3526, 4346, 13617, 1154, 1721, -2023, 4657, 16299, 4759, -285, 7144, -2464, 7400, -2299, 2873, 27915, -757, 2333, -163, 3871, 3185, 3724, 642, 26040, 6289, 4394, 73546, 1510, 4436, 5552, 683, 897, 621, 1235, -282, 373, -2964, -188, 5554, 1506, 5515, 1250, 3880, 5641, 4768, 3898, 1893, 14440, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00020129101176280528, 0.00017737627786118537, 7.0766116550657898e-05, 0.00017745920922607183, 0.00026047049323096871, 0.00024642300559207797, 0.00016145240806508809, 6.2545477703679353e-05, 0.00012705833069048822, 0.00034563231747597456, 0.00013915677845943719, 0.00020369100093375891, 9.860166028374806e-05, 0.00020461338863242418, 0.00020438125648070127, 4.1041650547413155e-05, 0.00031355433748103678, 0.00020017444330733269, 0.00030398007947951555, 0.00018555260612629354, 0.00022288772743195295, 0.00018851496861316264, 0.0003133875725325197, 4.1155373764922842e-05, 0.0001402362686349079, 0.00014213807298801839, 1.6675392544129863e-05, 0.00025939135230146348, 0.00017139413102995604, 0.00014986572205089033, 0.00043354349327273667, 0.00041639214032329619, 0.00028813036624342203, 0.00024836574448272586, 0.00029510987224057317, 0.00025858933804556727, 0.00018844632722903043, 0.00029948013252578676, 0.00014077337982598692, 0.00028193349135108292, 0.00015475611144211143, 0.00033485915628261864, 0.00019921197963412851, 0.00015584011271130294, 0.00014836144691798836, 0.00020348213729448617, 0.00034347092150710523, 7.3518545832484961e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 34,127,-95,-101,-22,47,-25,74, 
  /* [1][0][][] */ 43,-75,71,-127,-114,123,-92,-69, 
  /* [2][0][][] */ -38,127,125,64,115,-1,46,19, 
  /* [3][0][][] */ 82,23,-122,67,-36,-127,-127,-40, 
  /* [4][0][][] */ -40,13,9,-53,-43,80,127,23, 
  /* [5][0][][] */ 16,70,-127,-65,41,79,45,-26, 
  /* [6][0][][] */ -28,127,66,75,52,27,43,-93, 
  /* [7][0][][] */ 127,-16,-40,33,19,21,78,22, 
  /* [8][0][][] */ 58,127,61,42,114,97,113,-122, 
  /* [9][0][][] */ 58,78,-86,-92,10,127,24,57, 
  /* [10][0][][] */ -58,-44,13,-61,-20,-33,-48,127, 
  /* [11][0][][] */ 27,-105,-127,-18,16,-58,35,-13, 
  /* [12][0][][] */ -13,-127,-111,-3,-110,34,-17,16, 
  /* [13][0][][] */ -3,11,-120,127,-118,-22,0,-37, 
  /* [14][0][][] */ -57,-24,-127,3,26,3,-19,-58, 
  /* [15][0][][] */ 26,-81,-125,46,-127,-45,-55,39, 
  /* [16][0][][] */ 127,-69,4,66,-96,24,43,86, 
  /* [17][0][][] */ -17,121,127,-42,-64,-33,-22,-32, 
  /* [18][0][][] */ -6,-127,92,117,-1,-89,56,-81, 
  /* [19][0][][] */ 127,-44,-99,45,-87,8,43,90, 
  /* [20][0][][] */ -37,-127,79,77,-4,-105,-5,-70, 
  /* [21][0][][] */ 5,-85,-42,-53,127,-24,64,22, 
  /* [22][0][][] */ -125,59,-90,50,54,82,-114,-127, 
  /* [23][0][][] */ -127,-56,67,-37,-114,117,115,-61, 
  /* [24][0][][] */ -25,33,23,-34,-42,87,127,-10, 
  /* [25][0][][] */ -42,-123,-127,-34,-59,15,-13,-49, 
  /* [26][0][][] */ -4,72,-7,127,-85,8,-75,25, 
  /* [27][0][][] */ 15,-127,27,93,5,-87,-4,-126, 
  /* [28][0][][] */ 17,127,60,12,72,-5,25,-52, 
  /* [29][0][][] */ 70,24,-12,12,60,-127,-71,37, 
  /* [30][0][][] */ 28,1,39,-127,30,-31,20,-25, 
  /* [31][0][][] */ 45,-52,9,58,9,43,17,127, 
  /* [32][0][][] */ -79,-10,47,-21,-63,127,37,104, 
  /* [33][0][][] */ -73,41,30,-53,20,127,-124,85, 
  /* [34][0][][] */ 6,127,-73,-66,11,79,-65,43, 
  /* [35][0][][] */ 27,-127,11,49,-8,-66,70,-93, 
  /* [36][0][][] */ -18,-24,-88,-3,-127,-36,-14,28, 
  /* [37][0][][] */ -69,-127,87,98,-62,-105,-17,-39, 
  /* [38][0][][] */ -79,17,53,-73,-127,-77,-52,85, 
  /* [39][0][][] */ 79,-122,59,33,-14,-127,-47,-39, 
  /* [40][0][][] */ -8,48,17,22,-127,-21,-60,18, 
  /* [41][0][][] */ 87,127,-50,-88,19,7,-11,16, 
  /* [42][0][][] */ -14,-46,-24,-2,127,33,58,15, 
  /* [43][0][][] */ 116,27,50,28,-90,-20,46,127, 
  /* [44][0][][] */ 73,56,-40,5,89,-127,-121,15, 
  /* [45][0][][] */ 48,19,28,19,93,-127,-7,-67, 
  /* [46][0][][] */ 51,-26,-5,127,32,52,31,51, 
  /* [47][0][][] */ -108,-42,77,126,-12,19,127,-67, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0028786889743059874, 0.0025366812478750944, 0.0010120355291292071, 0.0025378672871738672, 0.0037250225432217121, 0.0035241276491433382, 0.0023089519236236811, 0.00089447101345285773, 0.0018170777475461364, 0.0049429330974817276, 0.0019900992047041655, 0.0029130117036402225, 0.0014101152773946524, 0.0029262027237564325, 0.0029228830244392157, 0.00058694201288744807, 0.0044841817580163479, 0.0028627209831029177, 0.0043472587130963802, 0.0026536120567470789, 0.003187546506524086, 0.0026959772221744061, 0.0044817966409027576, 0.00058856839314103127, 0.0020055372733622789, 0.0020327351521700621, 0.00023847697593737394, 0.0037095898296684027, 0.0024511299561709166, 0.0021432493813335896, 0.0062001622281968594, 0.0059548784047365189, 0.0041205901652574539, 0.0035519108641892672, 0.0042204046621918678, 0.0036981198936700821, 0.0026949956081807613, 0.0042829043231904507, 0.0020132185891270638, 0.0040319678373634815, 0.0022131872829049826, 0.004788864403963089, 0.0028489565011113882, 0.0022286898456513882, 0.002121736528351903, 0.0029100247193127871, 0.0049120225012302399, 0.0010513983434066176, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 5691, 10658, -8162, 6562, -2890, 3664, -12833, -17369, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00019947941473219544, 0.00013778553693555295, 0.00013162723917048424, 0.00013436362496577203, 0.00016850129759404808, 0.00015615162556059659, 0.00018738453218247741, 0.00011582247680053115, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -41,-15,39,8,-29,-16,6,9,-38,-4,-56,-62,-24,-57,-16,-25,44,-40,59,36,-13,38,-32,10,-6,-46,58,-8,-2,-26,17,3,79,38,33,-127,21,8,-17,-32,7,-20,47,49,38,10,32,2, 
  /* [1][0][][] */ -2,31,49,-14,-1,32,-41,-24,13,25,-8,-84,13,89,-22,43,-16,11,-11,-47,6,-46,-28,29,-71,1,-3,-85,-4,-7,34,-47,35,70,-35,12,109,-19,14,38,-18,38,-70,-17,127,-11,-22,-19, 
  /* [2][0][][] */ -14,-14,-48,17,9,44,35,8,1,54,-9,31,69,-93,10,-57,38,-81,39,35,-25,53,-13,22,-12,57,-30,-67,24,18,23,-80,-54,-78,44,-18,101,41,3,-64,17,24,84,30,127,16,25,28, 
  /* [3][0][][] */ 4,0,-72,46,12,-41,-79,-91,11,-28,-27,-2,5,22,28,83,-16,2,-32,8,10,-92,47,-46,-90,-19,127,-7,-36,2,-47,18,5,-96,6,-9,-35,-24,-7,89,-55,-34,6,21,34,18,-35,47, 
  /* [4][0][][] */ -30,-52,-5,9,30,-29,-6,-4,30,-29,65,-74,5,26,2,13,-19,-20,13,-16,8,-40,1,-19,20,-5,39,49,36,18,-14,31,-3,1,6,-2,-63,84,36,-26,35,-27,-15,-27,-73,8,127,8, 
  /* [5][0][][] */ 43,-33,-5,13,26,-37,25,-127,17,-25,-11,110,-78,60,20,-52,7,-93,15,11,-43,62,-51,-30,-69,59,-24,-9,-3,56,-37,-34,9,50,41,3,-28,17,-33,-42,21,-36,-42,-2,-26,56,84,29, 
  /* [6][0][][] */ 50,-14,38,-12,-40,-24,-37,17,-45,2,-47,127,-41,-39,-11,53,27,55,15,40,39,-78,-15,18,26,45,-67,15,5,-40,9,35,16,15,-12,2,13,10,-8,-2,10,-24,38,61,2,-48,87,-17, 
  /* [7][0][][] */ -22,-3,4,66,26,21,15,29,24,-4,63,1,115,102,54,54,29,47,13,1,30,-23,-87,-31,18,3,-27,64,28,-23,-36,-20,37,14,44,-93,-63,38,38,58,-39,27,84,127,-66,-23,-108,59, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0084778750315308571, 0.0058558853343129158, 0.0055941576138138771, 0.0057104537263512611, 0.0071613052859902382, 0.0066364440135657787, 0.0079638427123427391, 0.0049224551767110825, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 8815, 3614, 2445, 785, 736, -2006, -414, 24699, 560, -3151, 13773, 58713, -279, 9059, -825, 8794, -3264, 14093, -2380, 6392, 12668, 2880, 5991, -8062, 19326, 3342, 1722, 12681, 3963, -1398, -5272, 11431, 3582, 740, 310, 5670, -11872, 10827, 4406, 14637, -3354, -2459, 12228, 3380, 73, 1423, 4099, 277, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010604020644677803, 0.00012241343210916966, 0.00018557142175268382, 0.00016978775965981185, 0.00065416371216997504, 0.00014274254499468952, 0.0002036351797869429, 0.00011011926835635677, 0.00020062272960785776, 8.6186781118158251e-05, 4.3553995055845007e-05, 4.6820572606520727e-05, 8.8999528088606894e-05, 5.2867322665406391e-05, 0.00019963743397966027, 0.00026120967231690884, 9.0150475443806499e-05, 0.00068109406856819987, 0.00011877901124535128, 0.00012316429638303816, 9.9677214166149497e-05, 0.00020223247702233493, 0.00012076981511199847, 0.0002025104477070272, 6.9720212195534259e-05, 6.4766289142426103e-05, 6.5421110775787383e-05, 0.00011472613550722599, 0.00019718236580956727, 0.00095048401271924376, 0.00024304204271174967, 7.25950812920928e-05, 9.8198186606168747e-05, 0.0001317617716267705, 0.00021026749163866043, 7.607880252180621e-05, 8.3804559835698456e-05, 5.4018713854020461e-05, 0.00011462693510111421, 8.5706444224342704e-05, 0.00012188947584945709, 0.00020404666429385543, 5.5671403970336542e-05, 9.5436109404545277e-05, 8.8219785538967699e-05, 0.00045407336438074708, 6.9167181209195405e-05, 0.00023476245405618101, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -15,-37,-16,-19,127,-34,14,-75,-85,-89,-17,-44,84,47,82,-127,60,-25,2,-18,-61,108,0,18,-27,103,44,-25,38,-70,9,-51,-98,-88,42,61,6,97,81,-38,-127,-7,57,66,42,-127,71,61, -35,-115,-89,61,-87,99,34,-70,-58,54,127,-127,120,81,127,-57,-68,-65,46,-60,-110,21,-96,86,-55,127,92,-127,70,-49,-16,-127,-15,-76,66,127,127,110,109,-39,-89,-56,38,79,75,97,88,52, 7,-12,-35,85,-52,-23,-13,-2,76,38,88,-104,36,45,-22,-5,-70,-6,55,-55,-27,-9,-75,0,-71,88,3,-50,11,41,107,-88,2,12,-3,26,61,68,-11,6,-15,78,68,28,30,13,11,-127, 
  /* [0][1][][] */ -59,-113,-3,-81,-82,-54,56,-65,-127,-127,123,-76,85,53,-119,-77,127,-127,-50,-65,-107,116,-39,12,-26,121,100,-45,-90,-65,-6,-21,-105,-127,-127,48,36,71,-27,-80,75,-5,108,127,75,102,127,-119, -127,-127,-115,-109,-43,127,127,-127,85,89,93,-92,127,127,74,-89,54,-82,-127,-127,-127,110,-127,127,-127,125,127,-101,-127,127,-37,-100,-127,-112,39,92,127,127,-19,-127,110,-97,127,107,127,-10,115,98, -34,-48,-127,127,73,-44,34,-1,58,68,25,-37,7,67,80,-29,2,-6,9,-30,-40,-98,-92,-22,-102,68,18,-74,-48,34,127,-82,-65,18,62,29,82,76,-47,-54,65,127,77,22,36,-61,33,28, 
  /* [0][2][][] */ -52,-9,47,32,-44,-21,-3,-14,25,-15,23,-61,34,7,-23,-26,-53,-22,127,-36,-44,-13,-89,-17,-13,76,70,3,20,57,-35,5,6,-86,-46,19,27,24,-81,-18,9,-8,49,56,30,44,6,-48, -75,-40,5,-84,93,59,71,-41,88,28,-35,-77,10,72,-99,-42,49,1,86,-62,-59,127,-68,37,-70,56,103,-44,30,9,-48,-63,-79,-50,-77,42,23,10,-127,-36,18,-30,87,81,46,-107,2,-15, -41,-5,-29,-53,-5,2,-11,2,-69,33,18,-24,6,42,40,-33,42,27,22,-39,-47,2,-21,-39,-52,8,24,-18,4,-48,26,-59,-80,23,17,14,17,12,-78,-16,19,66,22,24,29,0,-10,23, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0045067085884511471, 0.0052025709301233292, 0.0078867850825190544, 0.0072159795090556145, 0.027801956981420517, 0.006066557951271534, 0.0086544947698712349, 0.0046800686977803707, 0.0085264658555388451, 0.0036629382520914078, 0.0018510448280721903, 0.0019898742903023958, 0.0037824797909706831, 0.0022468611132353544, 0.0084845907986164093, 0.01110141072422266, 0.0038313951808959246, 0.028946496546268463, 0.0050481078214943409, 0.0052344826981425285, 0.0042362813837826252, 0.0085948798805475235, 0.0051327170804142952, 0.0086066937074065208, 0.0029631089419126511, 0.0027525671757757664, 0.0027803971897810698, 0.0048758606426417828, 0.0083802500739693642, 0.040395569056272507, 0.010329286567866802, 0.0030852910131216049, 0.0041734226979315281, 0.0055998754687607288, 0.008936367928981781, 0.0032333489507436752, 0.0035616937093436718, 0.0022957953624427319, 0.0048716445453464985, 0.0036425236612558365, 0.0051803025417029858, 0.0086719831451773643, 0.002366034546867013, 0.0040560346096754074, 0.0037493407726287842, 0.019298117607831955, 0.0029396051540970802, 0.0099774040281772614, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1228, -696, -419, 1772, 12700, 1631, -362, 2651, 2438, 925, 174, 2709, 1475, 392, -695, 624, 2532, 23172, 2181, -881, 1099, -2074, 218, 3105, -449, -509, 1950, 98, 4563, 18297, 3650, -66, 494, -53, 3083, 51, 679, -399, 1952, 1137, 1568, 2749, 249, -575, 759, 1876, 709, -21, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00043641607044264674, 0.00035952203324995935, 0.00034732042695395648, 0.00029081120737828314, 7.7226468420121819e-05, 0.00037099476321600378, 0.00057644775370135903, 0.00029316116706468165, 0.00025140465004369617, 0.00059994874754920602, 0.00040884970803745091, 0.00028456497238948941, 0.00020159302221145481, 0.0004149228916503489, 0.00037241089739836752, 0.00030260140192694962, 0.00024033787485677749, 4.6395580284297466e-05, 0.00029285450000315905, 0.00033536579576320946, 0.00040007670759223402, 0.00016539086936973035, 0.00041521954699419439, 0.00024746512644924223, 0.00040320251719094813, 0.00096686632605269551, 0.00030684095690958202, 0.00059414398856461048, 0.00019579031504690647, 5.7590641517890617e-05, 0.00022845846251584589, 0.00080379447899758816, 0.00043889787048101425, 0.00047043288941495121, 0.00025352835655212402, 0.00040564534720033407, 0.00034387610503472388, 0.00070528080686926842, 0.00031280241091735661, 0.00055415916722267866, 0.00034185138065367937, 0.00027527997735887766, 0.00033911879290826619, 0.00040385031024925411, 0.00039407494477927685, 0.00026963101117871702, 0.00036128197098150849, 0.00031596439657732844, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -37,13,-3,-35,-77,-33,-127,20, 
  /* [1][0][][] */ 76,-92,-65,-64,127,-104,107,3, 
  /* [2][0][][] */ -120,103,-65,-127,40,-12,-23,58, 
  /* [3][0][][] */ 49,19,61,9,71,126,127,-4, 
  /* [4][0][][] */ -100,-127,46,-16,-54,-109,-6,-34, 
  /* [5][0][][] */ 127,-16,60,103,-58,-13,3,-38, 
  /* [6][0][][] */ 36,51,127,-25,44,-38,-30,19, 
  /* [7][0][][] */ 13,1,-127,-40,-40,119,82,-66, 
  /* [8][0][][] */ -17,109,-43,-4,94,127,55,33, 
  /* [9][0][][] */ -2,85,-47,108,7,-87,58,127, 
  /* [10][0][][] */ 23,-127,2,-46,-81,-120,-67,-69, 
  /* [11][0][][] */ -127,-115,111,39,-19,-88,90,52, 
  /* [12][0][][] */ -6,55,-127,61,37,-76,-75,91, 
  /* [13][0][][] */ 92,-127,87,66,19,32,38,-70, 
  /* [14][0][][] */ 7,69,-12,-127,-46,-119,-60,-51, 
  /* [15][0][][] */ 49,127,37,-6,39,-68,103,-127, 
  /* [16][0][][] */ -127,-90,-87,103,-56,17,-21,105, 
  /* [17][0][][] */ -12,-102,-127,103,-49,108,-57,87, 
  /* [18][0][][] */ -61,-58,-43,112,-19,85,-1,127, 
  /* [19][0][][] */ 58,-127,110,-122,9,-65,24,-38, 
  /* [20][0][][] */ 13,85,28,23,25,127,54,10, 
  /* [21][0][][] */ 37,107,50,-39,33,-72,92,-127, 
  /* [22][0][][] */ 36,22,122,15,13,127,30,-53, 
  /* [23][0][][] */ -88,-81,47,-32,73,100,-41,-127, 
  /* [24][0][][] */ -88,-72,52,-73,105,127,-76,-84, 
  /* [25][0][][] */ 127,19,-60,-19,22,32,-57,-8, 
  /* [26][0][][] */ -127,-48,-108,-42,-41,-42,3,-18, 
  /* [27][0][][] */ 74,48,-12,-69,-127,-29,92,108, 
  /* [28][0][][] */ -127,-113,17,43,-42,-109,-13,14, 
  /* [29][0][][] */ 80,100,0,-127,37,58,-35,-93, 
  /* [30][0][][] */ -90,-76,46,-58,67,75,-46,-127, 
  /* [31][0][][] */ 45,30,-6,127,5,-62,6,3, 
  /* [32][0][][] */ -31,127,-6,34,35,68,-4,41, 
  /* [33][0][][] */ -35,127,-59,23,27,-11,-26,-3, 
  /* [34][0][][] */ -112,-79,-38,110,-45,2,0,127, 
  /* [35][0][][] */ -53,127,-36,-31,72,108,60,62, 
  /* [36][0][][] */ 68,29,-4,-27,-127,-29,89,108, 
  /* [37][0][][] */ -50,92,28,13,-127,87,-20,-92, 
  /* [38][0][][] */ 37,20,31,29,127,83,107,45, 
  /* [39][0][][] */ -12,-62,44,-30,-1,25,-100,127, 
  /* [40][0][][] */ -85,-30,-84,127,-12,11,28,91, 
  /* [41][0][][] */ 127,-3,78,89,-62,-26,6,-36, 
  /* [42][0][][] */ -38,13,-85,-127,50,-118,2,97, 
  /* [43][0][][] */ 38,-5,100,7,32,127,96,10, 
  /* [44][0][][] */ -20,-13,-59,127,56,11,-44,-30, 
  /* [45][0][][] */ 56,80,106,-94,51,-27,43,-127, 
  /* [46][0][][] */ -30,-127,-31,25,-11,29,-63,110, 
  /* [47][0][][] */ 23,53,127,-16,102,112,126,-43, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0041684354655444622, 0.0034339807461947203, 0.0033174371346831322, 0.002777688205242157, 0.00073762994725257158, 0.0035435627214610577, 0.0055059506557881832, 0.002800133777782321, 0.0024012958165258169, 0.0057304208166897297, 0.0039051349740475416, 0.0027180272154510021, 0.0019255192019045353, 0.0039631430990993977, 0.0035570890177041292, 0.0028903025668114424, 0.0022955914027988911, 0.00044314819388091564, 0.0027972047682851553, 0.0032032520975917578, 0.0038213394582271576, 0.0015797336818650365, 0.0039659766480326653, 0.0023636673577129841, 0.0038511957973241806, 0.0092350402846932411, 0.002930796705186367, 0.0056749763898551464, 0.0018700945656746626, 0.00055007799528539181, 0.0021821248810738325, 0.0076774568296968937, 0.00419214041903615, 0.0044933478347957134, 0.0024215804878622293, 0.0038745284546166658, 0.0032845386303961277, 0.0067365015856921673, 0.0029877375345677137, 0.0052930610254406929, 0.00326519925147295, 0.0026293413247913122, 0.0032390989363193512, 0.0038573830388486385, 0.0037640135269612074, 0.0025753851514309645, 0.003450790885835886, 0.0030179393943399191, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -7637, -3747, 11538, -9743, 19061, 7615, -9771, 10665, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00015645437815692276, 0.0002561346918810159, 0.00017499284876976162, 0.00024001601559575647, 0.00026824118685908616, 0.00018427839677315205, 0.00019215853535570204, 0.00026906668790616095, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 3,-7,-28,-75,-24,-30,11,-30,37,13,-37,-10,106,127,-15,-99, 
  /* [1][0][][] */ 127,-44,-54,7,-40,59,-60,-46,-34,73,-27,-45,-6,3,-57,-19, 
  /* [2][0][][] */ -45,-111,36,48,58,-67,-84,-14,44,-98,29,-127,55,-23,-81,20, 
  /* [3][0][][] */ 32,0,21,8,-10,75,-51,-22,127,47,3,20,2,-15,6,13, 
  /* [4][0][][] */ -67,-26,-30,-127,-2,20,33,-111,35,-26,-34,-29,-95,30,-27,-15, 
  /* [5][0][][] */ 95,49,68,-31,37,-47,-127,-123,-22,-71,58,42,-57,43,49,-35, 
  /* [6][0][][] */ 96,42,-127,-63,31,-74,17,-78,-29,17,-104,95,85,-96,3,49, 
  /* [7][0][][] */ -127,4,90,-10,-65,11,5,-49,-53,68,70,-36,59,-24,27,29, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0066493111662566662, 0.010885724797844887, 0.0074371956288814545, 0.010200680233538151, 0.011400250717997551, 0.0078318314626812935, 0.0081667378544807434, 0.011435333639383316, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 15442, 468, -396, 3017, -2780, 237, 9689, 699, -1273, 455, -2079, 4028, 3487, -1056, 265, -1322, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00015305721899494529, 0.00024318259966094047, 0.00015372813504654914, 0.00017698122246656567, 0.00073574896669015288, 0.00079414492938667536, 0.00018576497677713633, 0.0010397059377282858, 0.00043692215695045888, 0.0012917170533910394, 0.00030596746364608407, 0.00016004175995476544, 9.2442380264401436e-05, 0.00022513669682666659, 0.0002084871957777068, 0.00041391421109437943, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 10,-16,-2,-1,-15,13,10,15,-15,-12,1,-15,-10,-4,-13,-5, 7,-16,3,4,17,-1,9,-25,-14,9,-4,79,-14,23,0,-4, -6,-15,-6,6,10,-13,0,11,8,2,0,-20,1,-1,-16,-3, 
  /* [0][1][][] */ 7,-25,8,6,127,-24,-127,-20,127,127,-10,-12,107,-21,-4,-23, -127,127,127,5,-78,-92,-19,-98,6,-106,127,127,127,127,127,127, 16,-4,-5,0,0,127,5,-8,8,-13,-19,-11,12,-2,-15,-10, 
  /* [0][2][][] */ -7,-19,-7,-18,-12,15,41,8,-11,-8,-1,-8,8,2,-18,-15, 16,-27,-5,-127,12,-16,-16,127,-4,1,1,-17,-9,-56,-30,-39, -1,-13,-2,1,9,-4,-7,0,10,2,-4,-6,-1,-4,-16,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.006504931952804327, 0.010335260070860386, 0.0065334453247487545, 0.0075217019766569138, 0.031269330531358719, 0.033751159906387329, 0.0078950114548206329, 0.044187501072883606, 0.018569191917777061, 0.0548979751765728, 0.013003616593778133, 0.006801774725317955, 0.0039288010448217392, 0.009568309411406517, 0.0088607054203748703, 0.017591353505849838, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 5067, 2392, 1974, 572, 73526, 44121, 4091, 7278, 7849, 1738, 1033, 1844, 1677, -50341, -155, 56896, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00018791662296280265, 0.00073981034802272916, 0.00021082432067487389, 0.00016564705583732575, 2.5596733394195326e-05, 4.2333773308200762e-05, 0.00011457754590082914, 2.0987410607631318e-05, 0.00013187098375055939, 2.9606524549308233e-05, 0.00040104961954057217, 0.00081723602488636971, 0.00030401605181396008, 1.6200236132135615e-05, 0.0008215875132009387, 3.9816146454541013e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -89, -113, -33, 
  /* [0][1][][] */ 66, -39, 14, 
  /* [0][2][][] */ 31, 127, 17, 
  /* [1][0][][] */ 108, -96, -14, 
  /* [1][1][][] */ -127, 106, 21, 
  /* [1][2][][] */ 12, -4, -18, 
  /* [2][0][][] */ -25, -5, -52, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -13, -97, -83, 
  /* [3][0][][] */ 120, 126, 59, 
  /* [3][1][][] */ 1, -22, -14, 
  /* [3][2][][] */ -101, -127, -42, 
  /* [4][0][][] */ 9, -76, 8, 
  /* [4][1][][] */ 17, -127, 0, 
  /* [4][2][][] */ 15, -77, -19, 
  /* [5][0][][] */ -50, 39, 11, 
  /* [5][1][][] */ -127, 36, 16, 
  /* [5][2][][] */ -89, 30, 16, 
  /* [6][0][][] */ -15, 79, 127, 
  /* [6][1][][] */ -49, 56, -15, 
  /* [6][2][][] */ -35, -51, -88, 
  /* [7][0][][] */ 57, 29, -13, 
  /* [7][1][][] */ 127, 50, -10, 
  /* [7][2][][] */ 40, 16, -15, 
  /* [8][0][][] */ -22, -32, 52, 
  /* [8][1][][] */ -55, -88, 127, 
  /* [8][2][][] */ -27, -62, 96, 
  /* [9][0][][] */ -28, 51, -15, 
  /* [9][1][][] */ -16, 127, -13, 
  /* [9][2][][] */ -5, 111, -1, 
  /* [10][0][][] */ 25, 87, 13, 
  /* [10][1][][] */ -37, -127, -28, 
  /* [10][2][][] */ 12, 40, 19, 
  /* [11][0][][] */ 7, -20, 8, 
  /* [11][1][][] */ 65, -96, 33, 
  /* [11][2][][] */ -87, 127, -50, 
  /* [12][0][][] */ -39, 53, -7, 
  /* [12][1][][] */ -127, 120, 9, 
  /* [12][2][][] */ -77, 84, 9, 
  /* [13][0][][] */ 94, 29, 3, 
  /* [13][1][][] */ 127, 108, 16, 
  /* [13][2][][] */ 85, 119, 79, 
  /* [14][0][][] */ -30, -27, 46, 
  /* [14][1][][] */ 46, 99, -127, 
  /* [14][2][][] */ -16, -70, 78, 
  /* [15][0][][] */ -77, -12, 25, 
  /* [15][1][][] */ -127, -124, 24, 
  /* [15][2][][] */ -34, -88, -11, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.047918736934661865, 0.18865162134170532, 0.053760197013616562, 0.042239997535943985, 0.0065271668136119843, 0.010795111767947674, 0.029217272996902466, 0.0053517892956733704, 0.03362710028886795, 0.0075496635399758816, 0.10226764529943466, 0.20839516818523407, 0.077524088323116302, 0.0041310600936412811, 0.20950479805469513, 0.010153116658329964, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10469540953636169, } };
const TfArray<1, int> quant46_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.069924540817737579, } };
const TfArray<1, int> quant50_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.067006953060626984, } };
const TfArray<1, int> quant53_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.091894231736660004, } };
const TfArray<1, int> quant54_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.059801951050758362, } };
const TfArray<1, int> quant58_zero = { 1, { 18 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.058761689811944962, } };
const TfArray<1, int> quant61_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.082426838576793671, } };
const TfArray<1, int> quant62_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.058371935039758682, } };
const TfArray<1, int> quant65_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.097294263541698456, } };
const TfArray<1, int> quant66_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.043162506073713303, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant69_scale = { 1, { 0.056630000472068787, } };
const TfArray<1, int> quant69_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension69, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
